#!/usr/bin/env python3
"""
Script d'urgence pour FORCER la recr√©ation des tables PostgreSQL
Solution radicale pour l'erreur SQL 9h9h persistante
"""

import os
import sys
import logging
from dotenv import load_dotenv

# Ajouter le r√©pertoire parent au chemin Python
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.db_manager import engine
from database.models import Base
from sqlalchemy import text

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def force_recreate_tables():
    """FORCE la recr√©ation des tables PostgreSQL avec le bon sch√©ma"""
    
    DATABASE_URL = os.getenv('DATABASE_URL')
    if not DATABASE_URL or not DATABASE_URL.startswith(('postgres://', 'postgresql://')):
        logger.info("üè† SQLite d√©tect√© - aucune action n√©cessaire")
        return True
    
    logger.info("üö® RECREATION FORC√âE DES TABLES POSTGRESQL")
    
    try:
        with engine.connect() as conn:
            logger.warning("‚ö†Ô∏è SUPPRESSION FORC√âE DE TOUTES LES TABLES...")
            
            # Supprimer TOUTES les tables avec CASCADE (force)
            drop_commands = [
                "DROP TABLE IF EXISTS reviews CASCADE;",
                "DROP TABLE IF EXISTS messages CASCADE;", 
                "DROP TABLE IF EXISTS driver_proposals CASCADE;",
                "DROP TABLE IF EXISTS bookings CASCADE;",
                "DROP TABLE IF EXISTS trips CASCADE;",
                "DROP TABLE IF EXISTS users CASCADE;",
            ]
            
            for cmd in drop_commands:
                try:
                    conn.execute(text(cmd))
                    logger.info(f"‚úÖ {cmd}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è {cmd} ‚Üí {e}")
            
            conn.commit()
            logger.info("üî• TOUTES LES TABLES SUPPRIM√âES")
            
        # Recr√©er avec le sch√©ma corrig√©
        logger.info("üî® RECREATION AVEC SCH√âMA CORRIG√â...")
        Base.metadata.create_all(bind=engine)
        
        logger.info("üéâ TABLES RECR√â√âES AVEC SUCC√àS!")
        logger.info("‚úÖ PROBL√àME SQL 9h9h R√âSOLU")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur recreation forc√©e: {e}")
        return False

if __name__ == "__main__":
    logger.info("üö® D√âMARRAGE RECREATION FORC√âE...")
    success = force_recreate_tables()
    if success:
        print("üéâ SUCCESS: Tables recr√©√©es, cr√©ation profils va fonctionner!")
    else:
        print("‚ùå √âCHEC: Probl√®me lors de la recr√©ation")
        sys.exit(1)
