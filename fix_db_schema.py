#!/usr/bin/env python3
"""
Script pour ajouter les colonnes manquantes √† la base de donn√©es
"""

import sqlite3
import os

def add_missing_columns():
    """Ajouter les colonnes age et paypal_email √† la table users"""
    
    db_path = "/Users/margaux/CovoiturageSuisse/database/covoiturage.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es non trouv√©e: {db_path}")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # V√©rifier si les colonnes existent d√©j√†
        cursor.execute("PRAGMA table_info(users)")
        columns = [column[1] for column in cursor.fetchall()]
        
        print(f"Colonnes actuelles dans users: {columns}")
        
        # Ajouter la colonne age si elle n'existe pas
        if 'age' not in columns:
            print("Ajout de la colonne 'age'...")
            cursor.execute("ALTER TABLE users ADD COLUMN age INTEGER")
            print("‚úÖ Colonne 'age' ajout√©e")
        else:
            print("‚úÖ Colonne 'age' existe d√©j√†")
        
        # Ajouter la colonne paypal_email si elle n'existe pas
        if 'paypal_email' not in columns:
            print("Ajout de la colonne 'paypal_email'...")
            cursor.execute("ALTER TABLE users ADD COLUMN paypal_email TEXT")
            print("‚úÖ Colonne 'paypal_email' ajout√©e")
        else:
            print("‚úÖ Colonne 'paypal_email' existe d√©j√†")
        
        conn.commit()
        conn.close()
        
        print("‚úÖ Base de donn√©es mise √† jour avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour: {e}")
        return False

if __name__ == "__main__":
    print("=== MISE √Ä JOUR DE LA BASE DE DONN√âES ===")
    success = add_missing_columns()
    
    if success:
        print("\nüéâ Tu peux maintenant red√©marrer ton bot!")
    else:
        print("\n‚ùå Probl√®me lors de la mise √† jour")
