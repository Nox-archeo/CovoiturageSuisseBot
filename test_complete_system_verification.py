#!/usr/bin/env python3
"""
V√âRIFICATION COMPL√àTE DU SYST√àME DE COVOITURAGE
==============================================
Points √† v√©rifier selon les exigences utilisateur :

1. Notifications r√©elles conducteur/passager lors de r√©servation
2. Confirmation obligatoire par les deux parties
3. Transfert automatique 88% au conducteur, 12% commission
4. Remboursement automatique en cas d'annulation 
5. Prix partag√© dynamiquement entre passagers + remboursements

TOUT DOIT √äTRE R√âELLEMENT FONCTIONNEL !
"""

import asyncio
import logging
from database import get_db
from database.models import Trip, Booking, User

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_point_1_notifications():
    """
    POINT 1: V√©rifier les notifications conducteur/passager
    """
    print("üîç POINT 1: NOTIFICATIONS CONDUCTEUR/PASSAGER")
    print("=" * 60)
    
    issues = []
    
    # 1.1 - V√©rifier handlers de notification
    try:
        from handlers.search_trip_handler import pay_with_paypal
        from handlers.booking_handlers import confirm_booking_with_payment
        print("‚úÖ Handlers de r√©servation import√©s")
        
        # Chercher les notifications dans le code
        import inspect
        pay_source = inspect.getsource(pay_with_paypal)
        confirm_source = inspect.getsource(confirm_booking_with_payment)
        
        # V√©rifier pr√©sence notifications conducteur
        if "send_message" in pay_source and "conducteur" in pay_source.lower():
            print("‚úÖ Notification conducteur trouv√©e dans pay_with_paypal")
        else:
            issues.append("‚ùå Notification conducteur manquante dans pay_with_paypal")
            
        if "send_message" in confirm_source and ("conducteur" in confirm_source.lower() or "driver" in confirm_source.lower()):
            print("‚úÖ Notification conducteur trouv√©e dans confirm_booking")
        else:
            issues.append("‚ùå Notification conducteur manquante dans confirm_booking")
        
    except Exception as e:
        issues.append(f"‚ùå Erreur import handlers: {e}")
    
    # 1.2 - V√©rifier syst√®me de notification existant
    try:
        from handlers.notification_handlers import notify_booking_request
        print("‚úÖ Syst√®me de notification existant trouv√©")
    except ImportError:
        issues.append("‚ùå Module notification_handlers manquant")
    
    print(f"\nüìä R√âSULTAT POINT 1: {len(issues)} probl√®me(s) d√©tect√©(s)")
    for issue in issues:
        print(f"   {issue}")
    
    return len(issues) == 0

async def test_point_2_confirmations():
    """
    POINT 2: V√©rifier confirmations obligatoires par les deux parties
    """
    print("\nüîç POINT 2: CONFIRMATIONS OBLIGATOIRES")
    print("=" * 60)
    
    issues = []
    
    # 2.1 - V√©rifier syst√®me de confirmation existant
    try:
        from trip_confirmation import TripConfirmationSystem, handle_confirm_trip_callback
        print("‚úÖ Syst√®me de confirmation de trajet trouv√©")
        
        # V√©rifier la logique de double confirmation
        import inspect
        system_source = inspect.getsource(TripConfirmationSystem)
        
        if "confirmed_by_driver" in system_source and "confirmed_by_passengers" in system_source:
            print("‚úÖ Double confirmation (conducteur + passagers) pr√©sente")
        else:
            issues.append("‚ùå Logique de double confirmation incompl√®te")
            
        if "_trigger_driver_payment" in system_source:
            print("‚úÖ D√©clenchement automatique de paiement trouv√©")
        else:
            issues.append("‚ùå D√©clenchement automatique de paiement manquant")
        
    except ImportError:
        issues.append("‚ùå Module trip_confirmation manquant")
    
    # 2.2 - V√©rifier structure base de donn√©es
    try:
        db = get_db()
        # V√©rifier que Trip a les champs de confirmation
        sample_trip = db.query(Trip).first()
        if sample_trip:
            if hasattr(sample_trip, 'confirmed_by_driver'):
                print("‚úÖ Champ confirmed_by_driver pr√©sent")
            else:
                issues.append("‚ùå Champ confirmed_by_driver manquant en DB")
                
            if hasattr(sample_trip, 'confirmed_by_passengers'):
                print("‚úÖ Champ confirmed_by_passengers pr√©sent")
            else:
                issues.append("‚ùå Champ confirmed_by_passengers manquant en DB")
        
        db.close()
    except Exception as e:
        issues.append(f"‚ùå Erreur v√©rification DB: {e}")
    
    print(f"\nüìä R√âSULTAT POINT 2: {len(issues)} probl√®me(s) d√©tect√©(s)")
    for issue in issues:
        print(f"   {issue}")
    
    return len(issues) == 0

async def test_point_3_split_payment():
    """
    POINT 3: V√©rifier transfert 88% conducteur / 12% commission
    """
    print("\nüîç POINT 3: TRANSFERT 88% / 12%")
    print("=" * 60)
    
    issues = []
    
    # 3.1 - V√©rifier fonctions de paiement PayPal
    try:
        from paypal_utils import PayPalManager
        
        paypal = PayPalManager()
        
        # V√©rifier pr√©sence des m√©thodes de paiement conducteur
        if hasattr(paypal, 'send_payout'):
            print("‚úÖ M√©thode send_payout pr√©sente")
        else:
            issues.append("‚ùå M√©thode send_payout manquante")
            
        if hasattr(paypal, 'payout_to_driver'):
            print("‚úÖ M√©thode payout_to_driver pr√©sente")
        else:
            issues.append("‚ùå M√©thode payout_to_driver manquante")
        
    except Exception as e:
        issues.append(f"‚ùå Erreur PayPalManager: {e}")
    
    # 3.2 - V√©rifier calculs 88/12
    try:
        from trip_confirmation import TripConfirmationSystem
        import inspect
        
        trigger_source = inspect.getsource(TripConfirmationSystem._trigger_driver_payment)
        
        if "0.88" in trigger_source and "0.12" in trigger_source:
            print("‚úÖ Calculs 88% / 12% trouv√©s dans le code")
        else:
            issues.append("‚ùå Calculs 88% / 12% manquants")
            
        if "driver_amount" in trigger_source and "commission_amount" in trigger_source:
            print("‚úÖ S√©paration montant conducteur / commission pr√©sente")
        else:
            issues.append("‚ùå S√©paration montant conducteur / commission manquante")
        
    except Exception as e:
        issues.append(f"‚ùå Erreur v√©rification calculs: {e}")
    
    # 3.3 - Test calcul direct
    test_amount = 100.0
    driver_part = round(test_amount * 0.88, 2)
    commission_part = round(test_amount * 0.12, 2)
    
    if driver_part == 88.0 and commission_part == 12.0:
        print(f"‚úÖ Test calcul: {test_amount} CHF ‚Üí {driver_part} CHF (conducteur) + {commission_part} CHF (commission)")
    else:
        issues.append(f"‚ùå Erreur calcul: {test_amount} CHF ‚Üí {driver_part} CHF + {commission_part} CHF")
    
    print(f"\nüìä R√âSULTAT POINT 3: {len(issues)} probl√®me(s) d√©tect√©(s)")
    for issue in issues:
        print(f"   {issue}")
    
    return len(issues) == 0

async def test_point_4_refunds_cancellation():
    """
    POINT 4: V√©rifier remboursements automatiques en cas d'annulation
    """
    print("\nüîç POINT 4: REMBOURSEMENTS ANNULATION")
    print("=" * 60)
    
    issues = []
    
    # 4.1 - V√©rifier gestionnaire de remboursements d'annulation
    try:
        from cancellation_refund_manager import CancellationRefundManager
        print("‚úÖ Gestionnaire remboursements annulation trouv√©")
        
        manager = CancellationRefundManager()
        
        # V√©rifier pr√©sence des m√©thodes critiques
        if hasattr(manager, 'process_trip_cancellation_refunds'):
            print("‚úÖ M√©thode process_trip_cancellation_refunds pr√©sente")
        else:
            issues.append("‚ùå M√©thode process_trip_cancellation_refunds manquante")
            
        # V√©rifier logique automatique
        import inspect
        manager_source = inspect.getsource(CancellationRefundManager)
        
        if "paypal" in manager_source.lower() and "refund" in manager_source.lower():
            print("‚úÖ Int√©gration PayPal pour remboursements trouv√©e")
        else:
            issues.append("‚ùå Int√©gration PayPal pour remboursements manquante")
        
    except ImportError:
        issues.append("‚ùå Module cancellation_refund_manager manquant")
    except Exception as e:
        issues.append(f"‚ùå Erreur gestionnaire remboursements: {e}")
    
    # 4.2 - V√©rifier fonctions de remboursement PayPal
    try:
        from paypal_utils import PayPalManager
        
        paypal = PayPalManager()
        
        if hasattr(paypal, 'refund_payment'):
            print("‚úÖ M√©thode refund_payment pr√©sente")
        else:
            issues.append("‚ùå M√©thode refund_payment manquante")
            
        if hasattr(paypal, 'full_refund'):
            print("‚úÖ M√©thode full_refund pr√©sente")
        else:
            issues.append("‚ùå M√©thode full_refund manquante")
        
    except Exception as e:
        issues.append(f"‚ùå Erreur v√©rification remboursements PayPal: {e}")
    
    print(f"\nüìä R√âSULTAT POINT 4: {len(issues)} probl√®me(s) d√©tect√©(s)")
    for issue in issues:
        print(f"   {issue}")
    
    return len(issues) == 0

async def test_point_5_dynamic_pricing():
    """
    POINT 5: V√©rifier prix dynamique et remboursements entre passagers
    """
    print("\nüîç POINT 5: PRIX DYNAMIQUE + REMBOURSEMENTS")
    print("=" * 60)
    
    issues = []
    
    # 5.1 - V√©rifier syst√®me de prix dynamique
    try:
        from utils.swiss_pricing import calculate_price_per_passenger, round_to_nearest_0_05_up
        print("‚úÖ Fonctions de prix dynamique trouv√©es")
        
        # Test prix dynamique
        total_price = 10.0
        
        # 1 passager
        price_1 = calculate_price_per_passenger(total_price, 1)
        if price_1 == 10.0:
            print(f"‚úÖ 1 passager: {price_1} CHF")
        else:
            issues.append(f"‚ùå 1 passager: attendu 10.0, obtenu {price_1}")
        
        # 2 passagers  
        price_2 = calculate_price_per_passenger(total_price, 2)
        if price_2 == 5.0:
            print(f"‚úÖ 2 passagers: {price_2} CHF chacun")
        else:
            issues.append(f"‚ùå 2 passagers: attendu 5.0, obtenu {price_2}")
        
        # 3 passagers
        price_3 = calculate_price_per_passenger(total_price, 3)
        expected_3 = round_to_nearest_0_05_up(10.0 / 3)  # 3.33... ‚Üí 3.35
        if abs(price_3 - expected_3) < 0.01:
            print(f"‚úÖ 3 passagers: {price_3} CHF chacun")
        else:
            issues.append(f"‚ùå 3 passagers: attendu ~{expected_3}, obtenu {price_3}")
        
    except ImportError:
        issues.append("‚ùå Module swiss_pricing manquant")
    except Exception as e:
        issues.append(f"‚ùå Erreur syst√®me prix dynamique: {e}")
    
    # 5.2 - V√©rifier gestionnaire de remboursements dynamiques
    try:
        from auto_refund_manager import AutoRefundManager
        print("‚úÖ Gestionnaire remboursements automatiques trouv√©")
        
        manager = AutoRefundManager()
        
        if hasattr(manager, 'handle_new_passenger_refund'):
            print("‚úÖ M√©thode handle_new_passenger_refund pr√©sente")
        else:
            issues.append("‚ùå M√©thode handle_new_passenger_refund manquante")
        
    except ImportError:
        issues.append("‚ùå Module auto_refund_manager manquant")
    except Exception as e:
        issues.append(f"‚ùå Erreur gestionnaire remboursements auto: {e}")
    
    # 5.3 - V√©rifier logique de remboursement dans booking
    try:
        from handlers.booking_handlers import confirm_booking_with_payment
        import inspect
        
        booking_source = inspect.getsource(confirm_booking_with_payment)
        
        if "calculate_price_per_passenger" in booking_source:
            print("‚úÖ Calcul prix dynamique int√©gr√© dans r√©servation")
        else:
            issues.append("‚ùå Calcul prix dynamique manquant dans r√©servation")
            
        if "existing_paid_passengers" in booking_source:
            print("‚úÖ Comptage passagers existants pr√©sent")
        else:
            issues.append("‚ùå Comptage passagers existants manquant")
        
    except Exception as e:
        issues.append(f"‚ùå Erreur v√©rification booking: {e}")
    
    print(f"\nüìä R√âSULTAT POINT 5: {len(issues)} probl√®me(s) d√©tect√©(s)")
    for issue in issues:
        print(f"   {issue}")
    
    return len(issues) == 0

async def test_integration_complete():
    """
    TEST D'INT√âGRATION: V√©rifier que tous les syst√®mes fonctionnent ensemble
    """
    print("\nüîç TEST D'INT√âGRATION COMPL√àTE")
    print("=" * 60)
    
    issues = []
    
    # V√©rifier enregistrement des handlers
    try:
        from webhook_server import app
        print("‚úÖ Serveur webhook accessible")
        
        # V√©rifier que les handlers sont bien enregistr√©s
        # (Ceci est complexe √† v√©rifier directement, on se fie aux imports)
        
    except Exception as e:
        issues.append(f"‚ùå Erreur serveur webhook: {e}")
    
    # V√©rifier base de donn√©es
    try:
        db = get_db()
        
        # Compter les utilisateurs, trajets, r√©servations
        user_count = db.query(User).count()
        trip_count = db.query(Trip).count() 
        booking_count = db.query(Booking).count()
        
        print(f"‚úÖ Base de donn√©es: {user_count} utilisateurs, {trip_count} trajets, {booking_count} r√©servations")
        
        # V√©rifier structure des tables
        if hasattr(Booking, 'payment_status'):
            print("‚úÖ Champ payment_status pr√©sent")
        else:
            issues.append("‚ùå Champ payment_status manquant")
            
        if hasattr(Booking, 'total_price'):
            print("‚úÖ Champ total_price pr√©sent")
        else:
            issues.append("‚ùå Champ total_price manquant")
        
        db.close()
        
    except Exception as e:
        issues.append(f"‚ùå Erreur base de donn√©es: {e}")
    
    print(f"\nüìä R√âSULTAT INT√âGRATION: {len(issues)} probl√®me(s) d√©tect√©(s)")
    for issue in issues:
        print(f"   {issue}")
    
    return len(issues) == 0

async def main():
    """
    EX√âCUTION COMPL√àTE DE TOUS LES TESTS
    """
    print("üöÄ V√âRIFICATION COMPL√àTE DU SYST√àME COVOITURAGE")
    print("=" * 70)
    print("V√©rification de TOUS les points critiques mentionn√©s...")
    print()
    
    # Ex√©cuter tous les tests
    results = {}
    
    results['notifications'] = await test_point_1_notifications()
    results['confirmations'] = await test_point_2_confirmations()
    results['split_payment'] = await test_point_3_split_payment()
    results['refunds_cancellation'] = await test_point_4_refunds_cancellation()
    results['dynamic_pricing'] = await test_point_5_dynamic_pricing()
    results['integration'] = await test_integration_complete()
    
    # R√©sum√© final
    print("\nüéØ R√âSUM√â FINAL")
    print("=" * 70)
    
    total_points = len(results)
    passed_points = sum(1 for success in results.values() if success)
    
    for point, success in results.items():
        status = "‚úÖ FONCTIONNEL" if success else "‚ùå PROBL√àMES D√âTECT√âS"
        print(f"{point.upper().replace('_', ' ')}: {status}")
    
    print(f"\nüìä SCORE GLOBAL: {passed_points}/{total_points} points valid√©s")
    
    if passed_points == total_points:
        print("\nüéâ SYST√àME ENTI√àREMENT FONCTIONNEL !")
        print("‚úÖ Toutes les fonctionnalit√©s critiques sont pr√©sentes")
        print("‚úÖ Le syst√®me est pr√™t pour les vrais utilisateurs")
    else:
        print(f"\n‚ö†Ô∏è  ATTENTION: {total_points - passed_points} point(s) n√©cessitent des corrections")
        print("üîß Corrections requises avant mise en production")
    
    return passed_points == total_points

if __name__ == "__main__":
    asyncio.run(main())
