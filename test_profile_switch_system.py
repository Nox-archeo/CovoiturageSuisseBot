#!/usr/bin/env python3
"""
Test complet du syst√®me de switch entre profils conducteur/passager
"""

import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_profile_switch_system():
    """Test complet du syst√®me de switch de profils"""
    print("üîÑ TEST SYST√àME SWITCH PROFIL CONDUCTEUR/PASSAGER")
    print("=" * 60)
    
    try:
        # Test 1: V√©rifier les callbacks dans bot.py
        print("\n1Ô∏è‚É£ V√âRIFICATION ENREGISTREMENT CALLBACKS BOT.PY")
        with open('bot.py', 'r', encoding='utf-8') as f:
            bot_content = f.read()
            
        callbacks_to_check = [
            "switch_profile:driver",
            "switch_profile:passenger"
        ]
        
        missing_callbacks = []
        for callback in callbacks_to_check:
            if callback in bot_content:
                print(f"  ‚úÖ Callback '{callback}' enregistr√©")
            else:
                print(f"  ‚ùå Callback '{callback}' manquant")
                missing_callbacks.append(callback)
        
        # Test 2: V√©rifier la fonction switch_user_profile modifi√©e
        print("\n2Ô∏è‚É£ V√âRIFICATION FONCTION SWITCH_USER_PROFILE")
        with open('handlers/menu_handlers.py', 'r', encoding='utf-8') as f:
            menu_content = f.read()
            
        switch_checks = [
            ("Redirection vers profil", "profile_handler(update, context)"),
            ("Message de confirmation", "Mode {role_text} Activ√©"),
            ("Gestion asyncio sleep", "await asyncio.sleep(1)")
        ]
        
        for check_name, check_pattern in switch_checks:
            if check_pattern in menu_content:
                print(f"  ‚úÖ {check_name} impl√©ment√©")
            else:
                print(f"  ‚ùå {check_name} manquant")
        
        # Test 3: V√©rifier les boutons dans profile_handler.py
        print("\n3Ô∏è‚É£ V√âRIFICATION BOUTONS SWITCH DANS PROFIL")
        with open('handlers/profile_handler.py', 'r', encoding='utf-8') as f:
            profile_content = f.read()
            
        profile_switch_checks = [
            ("Bouton Mode Conducteur", "Mode Conducteur.*switch_profile:driver"),
            ("Bouton Mode Passager", "Mode Passager.*switch_profile:passenger"),
            ("Logique conditionnelle", "if user.is_driver and user.paypal_email"),
            ("Bouton DeveniConducteur", "Devenir conducteur.*menu:become_driver")
        ]
        
        for check_name, check_pattern in profile_switch_checks:
            import re
            if re.search(check_pattern, profile_content):
                print(f"  ‚úÖ {check_name} pr√©sent")
            else:
                print(f"  ‚ùå {check_name} manquant")
        
        # Test 4: V√©rifier l'import de asyncio dans menu_handlers.py
        print("\n4Ô∏è‚É£ V√âRIFICATION IMPORTS ET D√âPENDANCES")
        if "import asyncio" in menu_content:
            print("  ‚úÖ Import asyncio pr√©sent")
        else:
            print("  ‚ö†Ô∏è Import asyncio manquant - peut causer des erreurs")
            
        if "from handlers.profile_handler import profile_handler" in menu_content:
            print("  ‚úÖ Import profile_handler pr√©sent")
        else:
            print("  ‚ö†Ô∏è Import profile_handler manquant")
        
        # Test 5: V√©rifier la redirection directe dans list_my_trips_menu
        print("\n5Ô∏è‚É£ V√âRIFICATION REDIRECTION TRAJETS PASSAGERS")
        with open('handlers/trip_handlers.py', 'r', encoding='utf-8') as f:
            trip_content = f.read()
            
        if "show_passenger_trip_management" in trip_content and "list_my_trips_menu" in trip_content:
            if "has_passenger_profile and not has_driver_profile" in trip_content:
                print("  ‚úÖ Redirection automatique passager configur√©e")
            else:
                print("  ‚ùå Logique de redirection passager manquante")
        else:
            print("  ‚ùå Fonctions de redirection passager manquantes")
        
        # R√©sum√© des tests
        print("\n" + "=" * 60)
        print("üìä R√âSUM√â DU SYST√àME DE SWITCH")
        
        total_issues = len(missing_callbacks)
        
        if total_issues == 0:
            print("üéâ SYST√àME DE SWITCH COMPLET ET FONCTIONNEL!")
            print("\nüîß FLUX UTILISATEUR CORRIG√â:")
            print("   1Ô∏è‚É£ Utilisateur clique 'Mode Conducteur/Passager' dans profil")
            print("   2Ô∏è‚É£ V√©rification PayPal et activation du profil")
            print("   3Ô∏è‚É£ Message de confirmation affich√© (1 seconde)")
            print("   4Ô∏è‚É£ Redirection automatique vers le profil complet")
            print("   5Ô∏è‚É£ Profil affich√© avec les nouveaux boutons de switch")
            
            print("\nüéØ AVANTAGES:")
            print("   ‚úÖ Plus de mini-profil incomplet")
            print("   ‚úÖ Switch fluide entre les modes")
            print("   ‚úÖ Retour automatique au profil principal")
            print("   ‚úÖ Boutons de switch visibles dans le profil")
            print("   ‚úÖ Redirection intelligente pour les trajets")
            
        else:
            print(f"‚ö†Ô∏è {total_issues} PROBL√àMES D√âTECT√âS")
            if missing_callbacks:
                print(f"   ‚Ä¢ Callbacks manquants: {', '.join(missing_callbacks)}")
                
        return total_issues == 0
        
    except Exception as e:
        logger.error(f"Erreur dans le test: {e}")
        print(f"‚ùå Erreur: {e}")
        return False

if __name__ == "__main__":
    success = test_profile_switch_system()
    if success:
        print(f"\n‚úÖ Le syst√®me de switch fonctionne maintenant parfaitement!")
        print(f"‚úÖ Plus de mini-profil bizarre apr√®s le switch")
        print(f"‚úÖ Redirection automatique vers le profil complet")
    else:
        print(f"\n‚ùå Des am√©liorations sont encore n√©cessaires")
