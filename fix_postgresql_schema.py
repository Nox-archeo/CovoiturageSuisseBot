#!/usr/bin/env python3
"""
Script pour corriger le sch√©ma PostgreSQL et les contraintes
R√©sout les probl√®mes de types de colonnes et contraintes pour PostgreSQL
"""

import os
import sys
import logging
from dotenv import load_dotenv

# Ajouter le r√©pertoire parent au chemin Python
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.db_manager import engine, get_db
from database.models import Base
from sqlalchemy import text, inspect

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def fix_postgresql_schema():
    """Corrige le sch√©ma PostgreSQL pour assurer la compatibilit√©"""
    
    DATABASE_URL = os.getenv('DATABASE_URL')
    if not DATABASE_URL or not DATABASE_URL.startswith(('postgres://', 'postgresql://')):
        logger.info("üè† SQLite d√©tect√© - aucune correction n√©cessaire")
        return
    
    logger.info("üöÄ Correction du sch√©ma PostgreSQL...")
    
    try:
        # V√©rifier la connexion
        with engine.connect() as conn:
            result = conn.execute(text("SELECT version()"))
            version = result.fetchone()[0]
            logger.info(f"‚úÖ Connexion PostgreSQL OK: {version[:50]}...")
            
            # V√©rifier si les tables existent
            inspector = inspect(engine)
            tables = inspector.get_table_names()
            logger.info(f"üìã Tables existantes: {tables}")
            
            # Si pas de tables, cr√©er le sch√©ma complet
            if not tables:
                logger.info("üî® Cr√©ation du sch√©ma complet...")
                Base.metadata.create_all(bind=engine)
                logger.info("‚úÖ Sch√©ma cr√©√© avec succ√®s")
                return
            
            # Si tables existent, appliquer les corrections n√©cessaires
            logger.info("üîß Application des corrections sur le sch√©ma existant...")
            
            # Corrections sp√©cifiques pour PostgreSQL
            corrections = [
                # Assurer que les colonnes TEXT sont bien d√©finies
                "ALTER TABLE users ALTER COLUMN notification_preferences TYPE TEXT",
                # Assurer les contraintes NOT NULL
                "UPDATE users SET paypal_email = NULL WHERE paypal_email = ''",
                "UPDATE users SET car_model = NULL WHERE car_model = ''",
                "UPDATE users SET username = NULL WHERE username = ''",
            ]
            
            for correction in corrections:
                try:
                    conn.execute(text(correction))
                    logger.info(f"‚úÖ Correction appliqu√©e: {correction[:50]}...")
                except Exception as e:
                    # Ignorer les erreurs si la correction est d√©j√† appliqu√©e
                    logger.warning(f"‚ö†Ô∏è Correction ignor√©e (d√©j√† appliqu√©e): {str(e)[:50]}...")
            
            conn.commit()
            logger.info("‚úÖ Toutes les corrections PostgreSQL appliqu√©es")
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la correction PostgreSQL: {e}")
        raise

def test_user_creation():
    """Test la cr√©ation d'un utilisateur pour v√©rifier le sch√©ma"""
    try:
        from database.models import User
        db = get_db()
        
        # Test simple de cr√©ation (rollback apr√®s)
        test_user = User(
            telegram_id=999999999,
            username="test_user",
            full_name="Test User",
            age=25,
            phone="123456789",
            paypal_email=None,
            is_driver=True,
            is_passenger=True
        )
        
        db.add(test_user)
        db.flush()  # Ne pas commit, juste v√©rifier
        
        logger.info("‚úÖ Test de cr√©ation d'utilisateur OK")
        
        # Rollback le test
        db.rollback()
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test cr√©ation utilisateur: {e}")
        db.rollback()
        raise
    finally:
        db.close()

if __name__ == "__main__":
    logger.info("üîß D√©marrage correction sch√©ma PostgreSQL...")
    
    try:
        fix_postgresql_schema()
        test_user_creation()
        logger.info("üéâ Correction termin√©e avec succ√®s!")
        
    except Exception as e:
        logger.error(f"üí• √âchec de la correction: {e}")
        sys.exit(1)
