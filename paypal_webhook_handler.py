#!/usr/bin/env python3
"""
Webhook PayPal pour d√©tecter les nouveaux paiements et d√©clencher les remboursements automatiques
"""

import logging
from datetime import datetime
from database.models import Booking, Trip, User
from database import get_db
from fixed_auto_refund_manager import trigger_automatic_refunds_fixed

logger = logging.getLogger(__name__)

async def handle_payment_completion(payment_id: str, bot=None) -> bool:
    """
    G√®re la completion d'un paiement et d√©clenche les remboursements si n√©cessaire
    
    Args:
        payment_id: ID du paiement PayPal
        bot: Instance du bot Telegram
        
    Returns:
        True si le traitement a r√©ussi
    """
    try:
        logger.info(f"üî• Traitement de la completion du paiement: {payment_id}")
        
        # Obtenir la session SQLAlchemy
        db = get_db()
        
        # Essayer de r√©cup√©rer les d√©tails complets du paiement PayPal pour obtenir custom_id
        paypal_payment_details = None
        try:
            import requests
            from paypal_utils import PayPalManager
            
            paypal_manager = PayPalManager()
            access_token = paypal_manager.get_access_token()
            if access_token:
                headers = {
                    'Content-Type': 'application/json',
                    'Authorization': f'Bearer {access_token}'
                }
                response = requests.get(
                    f"https://api.paypal.com/v2/payments/captures/{payment_id}",
                    headers=headers
                )
                if response.status_code == 200:
                    paypal_payment_details = response.json()
                    logger.info(f"‚úÖ D√©tails PayPal r√©cup√©r√©s pour: {payment_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è Impossible de r√©cup√©rer les d√©tails PayPal: {response.status_code}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la r√©cup√©ration des d√©tails PayPal: {e}")
        
        # Rechercher la r√©servation par custom_id si disponible
        booking = None
        custom_id = None
        
        if paypal_payment_details:
            custom_id = paypal_payment_details.get('custom_id')
            if custom_id:
                try:
                    booking = db.query(Booking).filter(Booking.id == int(custom_id)).first()
                    logger.info(f"üîç Recherche par custom_id={custom_id}: {'Trouv√©' if booking else 'Non trouv√©'}")
                except (ValueError, TypeError):
                    logger.warning(f"‚ö†Ô∏è custom_id invalide: {custom_id}")
        
        # Fallback: rechercher par payment_id
        if not booking:
            booking = db.query(Booking).filter(
                Booking.paypal_payment_id == payment_id
            ).first()
            logger.info(f"üîç Recherche par payment_id={payment_id}: {'Trouv√©' if booking else 'Non trouv√©'}")
        
        if not booking:
            logger.error(f"‚ùå Aucune r√©servation trouv√©e pour payment_id={payment_id}, custom_id={custom_id}")
            return False
        
        logger.info(f"‚úÖ R√©servation trouv√©e: ID={booking.id}, Trip={booking.trip_id}")
        
        # Marquer le paiement comme confirm√©
        booking.is_paid = True
        booking.payment_status = "completed"
        booking.status = "confirmed"
        
        if not booking.paypal_payment_id:
            booking.paypal_payment_id = payment_id
        
        db.commit()
        logger.info(f"‚úÖ R√©servation {booking.id} marqu√©e comme pay√©e et confirm√©e")
        
        # Envoyer notifications
        if bot:
            # Notification au passager - CORRECTION: utiliser telegram_id
            try:
                # Si c'est une Application, utiliser bot.bot, sinon utiliser bot directement
                telegram_bot = bot.bot if hasattr(bot, 'bot') else bot
                
                # R√©cup√©rer l'utilisateur passager pour avoir son telegram_id
                passenger = db.query(User).filter(User.id == booking.passenger_id).first()
                if passenger and passenger.telegram_id:
                    await telegram_bot.send_message(
                        chat_id=passenger.telegram_id,
                        text=f"‚úÖ *R√©servation confirm√©e !*\n\n"
                             f"Votre paiement a √©t√© trait√© avec succ√®s.\n"
                             f"D√©tails de votre r√©servation #{booking.id}",
                        parse_mode='Markdown'
                    )
                    logger.info(f"‚úÖ Notification envoy√©e au passager telegram_id={passenger.telegram_id}")
                else:
                    logger.error(f"‚ùå Passager non trouv√© ou telegram_id manquant: passenger_id={booking.passenger_id}")
            except Exception as e:
                logger.error(f"‚ùå Erreur notification passager: {e}")
            
            # Notification au conducteur - CORRECTION: utiliser telegram_id
            trip = db.query(Trip).filter(Trip.id == booking.trip_id).first()
            if trip:
                try:
                    telegram_bot = bot.bot if hasattr(bot, 'bot') else bot
                    
                    # R√©cup√©rer l'utilisateur conducteur pour avoir son telegram_id
                    driver = db.query(User).filter(User.id == trip.driver_id).first()
                    if driver and driver.telegram_id:
                        await telegram_bot.send_message(
                            chat_id=driver.telegram_id,
                            text=f"üéâ *Nouvelle r√©servation confirm√©e !*\n\n"
                                 f"Un passager a confirm√© sa r√©servation pour votre trajet.\n"
                                 f"R√©servation #{booking.id}",
                            parse_mode='Markdown'
                        )
                        logger.info(f"‚úÖ Notification envoy√©e au conducteur telegram_id={driver.telegram_id}")
                    else:
                        logger.error(f"‚ùå Conducteur non trouv√© ou telegram_id manquant: driver_id={trip.driver_id}")
                except Exception as e:
                    logger.error(f"‚ùå Erreur notification conducteur: {e}")
        
        # D√©clencher les remboursements automatiques si n√©cessaire
        await trigger_automatic_refunds_fixed(booking.trip_id, bot)
        
        logger.info(f"‚úÖ Traitement du paiement {payment_id} termin√© avec succ√®s")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du traitement du paiement {payment_id}: {e}")
        import traceback
        logger.error(f"Stacktrace: {traceback.format_exc()}")
        return False

async def handle_paypal_webhook(webhook_data: dict, bot=None) -> bool:
    """
    Traite les webhooks PayPal
    
    Args:
        webhook_data: Donn√©es du webhook PayPal
        bot: Instance du bot Telegram
        
    Returns:
        True si le webhook a √©t√© trait√© avec succ√®s
    """
    try:
        event_type = webhook_data.get('event_type')
        
        if event_type == 'PAYMENT.CAPTURE.COMPLETED':
            # Paiement compl√©t√©
            resource = webhook_data.get('resource', {})
            payment_id = resource.get('id')
            
            if payment_id:
                return await handle_payment_completion(payment_id, bot)
        
        elif event_type == 'PAYMENT.CAPTURE.DENIED':
            # Paiement refus√©
            resource = webhook_data.get('resource', {})
            payment_id = resource.get('id')
            
            logger.warning(f"Paiement refus√©: {payment_id}")
            # TODO: G√©rer les paiements refus√©s
        
        # Autres types d'√©v√©nements peuvent √™tre ajout√©s ici
        return True
        
    except Exception as e:
        logger.error(f"Erreur lors du traitement du webhook PayPal: {e}")
        return False
