#!/usr/bin/env python3
"""
Test complet du syst√®me de gestion des trajets passagers
"""

import sys
import os
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_passenger_management_system():
    """Test complet du syst√®me de gestion des trajets passagers"""
    print("üéØ TEST SYST√àME GESTION TRAJETS PASSAGERS")
    print("=" * 50)
    
    try:
        # Configuration de la base de donn√©es
        engine = create_engine('sqlite:///covoiturage.db')
        Session = sessionmaker(bind=engine)
        db = Session()
        
        # Test 1: V√©rifier les handlers enregistr√©s
        print("\n1Ô∏è‚É£ V√âRIFICATION DES HANDLERS")
        handlers_to_check = [
            "show_passenger_trip_management",
            "handle_passenger_trip_action", 
            "confirm_delete_passenger_trip"
        ]
        
        # Charger le fichier trip_handlers.py pour v√©rifier les fonctions
        with open('handlers/trip_handlers.py', 'r', encoding='utf-8') as f:
            content = f.read()
            
        missing_handlers = []
        for handler in handlers_to_check:
            if f"async def {handler}" in content:
                print(f"  ‚úÖ {handler} d√©fini")
            else:
                print(f"  ‚ùå {handler} manquant")
                missing_handlers.append(handler)
        
        # Test 2: V√©rifier l'enregistrement dans la fonction register
        print("\n2Ô∏è‚É£ V√âRIFICATION ENREGISTREMENT HANDLERS")
        required_patterns = [
            "passenger_trip_management",
            "edit_passenger_trip",
            "delete_passenger_trip", 
            "report_passenger_trip",
            "confirm_delete_passenger"
        ]
        
        missing_registrations = []
        for pattern in required_patterns:
            if pattern in content:
                print(f"  ‚úÖ Pattern '{pattern}' enregistr√©")
            else:
                print(f"  ‚ùå Pattern '{pattern}' manquant")
                missing_registrations.append(pattern)
        
        # Test 3: V√©rifier la structure de la base de donn√©es pour les trajets passagers
        print("\n3Ô∏è‚É£ V√âRIFICATION BASE DE DONN√âES")
        
        # Compter les trajets passagers existants
        result = db.execute(text("""
            SELECT COUNT(*) as count 
            FROM trips 
            WHERE trip_role = 'passenger'
        """))
        passenger_trips_count = result.fetchone()[0]
        print(f"  üìä Trajets passagers existants: {passenger_trips_count}")
        
        # V√©rifier la structure des colonnes
        result = db.execute(text("PRAGMA table_info(trips)"))
        columns = [row[1] for row in result.fetchall()]
        
        required_columns = ['trip_role', 'creator_id', 'departure_city', 'arrival_city', 'departure_time']
        missing_columns = []
        for col in required_columns:
            if col in columns:
                print(f"  ‚úÖ Colonne '{col}' pr√©sente")
            else:
                print(f"  ‚ùå Colonne '{col}' manquante")
                missing_columns.append(col)
        
        # Test 4: V√©rifier la logique de redirection dans list_my_trips_menu
        print("\n4Ô∏è‚É£ V√âRIFICATION LOGIQUE DE REDIRECTION")
        if "show_passenger_trip_management" in content and "list_my_trips_menu" in content:
            if "has_passenger_profile and not has_driver_profile" in content:
                print("  ‚úÖ Redirection automatique vers trajets passagers configur√©e")
            else:
                print("  ‚ùå Logique de redirection manquante")
        else:
            print("  ‚ùå Fonctions de redirection manquantes")
        
        # Test 5: V√©rifier les callbacks dans bot.py
        print("\n5Ô∏è‚É£ V√âRIFICATION CALLBACKS BOT.PY")
        try:
            with open('bot.py', 'r', encoding='utf-8') as f:
                bot_content = f.read()
                
            if "register_trip_handlers(application)" in bot_content:
                print("  ‚úÖ Handlers trip enregistr√©s dans bot.py")
            else:
                print("  ‚ùå Handlers trip non enregistr√©s dans bot.py")
                
        except FileNotFoundError:
            print("  ‚ö†Ô∏è Fichier bot.py non trouv√©")
        
        # R√©sum√© des tests
        print("\n" + "=" * 50)
        print("üìä R√âSUM√â DES TESTS")
        
        total_issues = len(missing_handlers) + len(missing_registrations) + len(missing_columns)
        
        if total_issues == 0:
            print("üéâ TOUS LES TESTS PASS√âS!")
            print("‚úÖ Le syst√®me de gestion des trajets passagers est complet")
            print("\nüîß FONCTIONNALIT√âS DISPONIBLES:")
            print("   ‚Ä¢ Interface d√©di√©e pour les trajets passagers")
            print("   ‚Ä¢ Boutons Modifier/Supprimer/Signaler pour chaque trajet")
            print("   ‚Ä¢ Redirection automatique selon le profil utilisateur")
            print("   ‚Ä¢ Confirmation de suppression avec s√©curit√©")
            print("   ‚Ä¢ Interface coh√©rente avec les trajets conducteur")
            
        else:
            print(f"‚ö†Ô∏è {total_issues} PROBL√àMES D√âTECT√âS")
            if missing_handlers:
                print(f"   ‚Ä¢ Handlers manquants: {', '.join(missing_handlers)}")
            if missing_registrations:
                print(f"   ‚Ä¢ Enregistrements manquants: {', '.join(missing_registrations)}")
            if missing_columns:
                print(f"   ‚Ä¢ Colonnes manquantes: {', '.join(missing_columns)}")
                
        db.close()
        
    except Exception as e:
        logger.error(f"Erreur dans le test: {e}")
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    test_passenger_management_system()
