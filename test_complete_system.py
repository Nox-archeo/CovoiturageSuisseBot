#!/usr/bin/env python3
"""
V√âRIFICATION COMPL√àTE ET EXHAUSTIVE DU SYST√àME G√âOGRAPHIQUE SUISSE
- Teste TOUTES les 2381 communes
- V√©rifie les coordonn√©es GPS
- Teste les calculs de distance par route
- Confirme qu'aucune commune ne manque
"""

import json
import random
import time
from typing import Dict, List, Tuple
from utils.route_distance import get_route_distance_km
from utils.swiss_cities import find_locality

def load_swiss_localities() -> Dict:
    """Charge les donn√©es des localit√©s suisses"""
    try:
        with open('data/swiss_localities.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå Erreur chargement JSON: {e}")
        return {}

def verify_all_coordinates():
    """V√©rifie que TOUTES les communes ont des coordonn√©es GPS valides"""
    print("üåç V√âRIFICATION EXHAUSTIVE DE TOUTES LES COORDONN√âES GPS")
    print("=" * 70)
    
    localities = load_swiss_localities()
    total = len(localities)
    
    valid_coords = 0
    invalid_coords = []
    
    print(f"üìä V√©rification de {total} communes...")
    
    for i, (name, data) in enumerate(localities.items(), 1):
        lat = data.get('lat', 0.0)
        lon = data.get('lon', 0.0)
        
        # V√©rifier que les coordonn√©es existent et sont valides pour la Suisse
        if lat == 0.0 or lon == 0.0:
            invalid_coords.append(f"{name}: Coordonn√©es manquantes (0.0, 0.0)")
        elif not (45.8 <= lat <= 47.8 and 5.9 <= lon <= 10.5):
            invalid_coords.append(f"{name}: Coordonn√©es hors Suisse ({lat}, {lon})")
        else:
            valid_coords += 1
        
        # Affichage du progr√®s
        if i % 100 == 0:
            print(f"   üìç V√©rifi√©es: {i}/{total} ({i/total*100:.1f}%)")
    
    print(f"\nüìä R√âSULTATS COORDONN√âES:")
    print(f"‚úÖ Coordonn√©es valides: {valid_coords}/{total} ({valid_coords/total*100:.1f}%)")
    print(f"‚ùå Coordonn√©es invalides: {len(invalid_coords)}")
    
    if invalid_coords:
        print(f"\n‚ùå COMMUNES AVEC COORDONN√âES INVALIDES:")
        for invalid in invalid_coords[:20]:  # Afficher les 20 premi√®res
            print(f"   ‚Ä¢ {invalid}")
        if len(invalid_coords) > 20:
            print(f"   ... et {len(invalid_coords) - 20} autres")
        return False
    else:
        print(f"üéâ TOUTES LES COMMUNES ONT DES COORDONN√âES GPS VALIDES!")
        return True

def test_search_functionality():
    """Teste la fonctionnalit√© de recherche sur un √©chantillon repr√©sentatif"""
    print(f"\nüîç TEST DE LA FONCTIONNALIT√â DE RECHERCHE")
    print("=" * 70)
    
    localities = load_swiss_localities()
    
    # √âchantillon repr√©sentatif de diff√©rents types de recherches
    test_cases = []
    commune_names = list(localities.keys())
    
    # 1. √âchantillon al√©atoire de noms de communes
    random_communes = random.sample(commune_names, min(50, len(commune_names)))
    test_cases.extend(random_communes)
    
    # 2. Codes postaux al√©atoires
    zip_codes = [data.get('zip', '') for data in localities.values() if data.get('zip')]
    random_zips = random.sample(zip_codes, min(20, len(zip_codes)))
    test_cases.extend(random_zips)
    
    # 3. Recherches partielles
    partial_searches = []
    for name in random.sample(commune_names, 10):
        if len(name) > 4:
            partial_searches.append(name[:4])  # 4 premiers caract√®res
    test_cases.extend(partial_searches)
    
    print(f"üîé Test de {len(test_cases)} recherches diverses...")
    
    success_count = 0
    failed_searches = []
    
    for i, search_term in enumerate(test_cases, 1):
        results = find_locality(search_term)
        
        if results:
            success_count += 1
        else:
            failed_searches.append(search_term)
        
        if i % 20 == 0:
            print(f"   üîç Test√©es: {i}/{len(test_cases)} ({i/len(test_cases)*100:.1f}%)")
    
    print(f"\nüìä R√âSULTATS RECHERCHE:")
    print(f"‚úÖ Recherches r√©ussies: {success_count}/{len(test_cases)} ({success_count/len(test_cases)*100:.1f}%)")
    print(f"‚ùå Recherches √©chou√©es: {len(failed_searches)}")
    
    if failed_searches:
        print(f"\n‚ùå RECHERCHES √âCHOU√âES:")
        for failed in failed_searches[:10]:
            print(f"   ‚Ä¢ \"{failed}\"")
        if len(failed_searches) > 10:
            print(f"   ... et {len(failed_searches) - 10} autres")
        return False
    else:
        print(f"üéâ TOUTES LES RECHERCHES FONCTIONNENT!")
        return True

def test_distance_calculations_extensive():
    """Teste les calculs de distance sur un √©chantillon √©tendu"""
    print(f"\nüßÆ TEST EXTENSIF DES CALCULS DE DISTANCE")
    print("=" * 70)
    
    localities = load_swiss_localities()
    commune_names = list(localities.keys())
    
    # G√©n√©rer des paires de communes al√©atoirement
    num_tests = 100
    print(f"üó∫Ô∏è Test de {num_tests} calculs de distance al√©atoires...")
    
    successful_calculations = 0
    failed_calculations = []
    distance_results = []
    
    for i in range(num_tests):
        # S√©lectionner deux communes al√©atoires
        start_name, end_name = random.sample(commune_names, 2)
        
        start_results = find_locality(start_name)
        end_results = find_locality(end_name)
        
        if start_results and end_results:
            start_data = start_results[0]
            end_data = end_results[0]
            
            if 'lat' in start_data and 'lon' in start_data and 'lat' in end_data and 'lon' in end_data:
                distance = get_route_distance_km(
                    (start_data['lat'], start_data['lon']),
                    (end_data['lat'], end_data['lon']),
                    start_name, end_name
                )
                
                if distance and distance > 0:
                    successful_calculations += 1
                    distance_results.append(distance)
                    
                    if i < 10:  # Afficher les 10 premiers pour v√©rification
                        print(f"   üöó {start_name} ‚Üí {end_name}: {distance:.1f} km")
                else:
                    failed_calculations.append(f"{start_name} ‚Üí {end_name}")
            else:
                failed_calculations.append(f"{start_name} ‚Üí {end_name} (coords manquantes)")
        else:
            failed_calculations.append(f"{start_name} ‚Üí {end_name} (non trouv√©es)")
        
        if (i + 1) % 25 == 0:
            print(f"   üìä Calcul√©es: {i+1}/{num_tests} ({(i+1)/num_tests*100:.0f}%)")
    
    print(f"\nüìä R√âSULTATS CALCULS DE DISTANCE:")
    print(f"‚úÖ Calculs r√©ussis: {successful_calculations}/{num_tests} ({successful_calculations/num_tests*100:.1f}%)")
    print(f"‚ùå Calculs √©chou√©s: {len(failed_calculations)}")
    
    if distance_results:
        avg_distance = sum(distance_results) / len(distance_results)
        min_distance = min(distance_results)
        max_distance = max(distance_results)
        print(f"üìè Distance moyenne: {avg_distance:.1f} km")
        print(f"üìè Distance min: {min_distance:.1f} km")
        print(f"üìè Distance max: {max_distance:.1f} km")
    
    if failed_calculations:
        print(f"\n‚ùå CALCULS √âCHOU√âS:")
        for failed in failed_calculations[:10]:
            print(f"   ‚Ä¢ {failed}")
        if len(failed_calculations) > 10:
            print(f"   ... et {len(failed_calculations) - 10} autres")
        return False
    else:
        print(f"üéâ TOUS LES CALCULS DE DISTANCE FONCTIONNENT!")
        return True

def test_known_distances():
    """Teste des distances connues pour v√©rifier la pr√©cision"""
    print(f"\nüéØ TEST DE DISTANCES CONNUES (PR√âCISION)")
    print("=" * 70)
    
    # Distances connues selon Google Maps (par route)
    known_distances = [
        ('Fribourg', 'Lausanne', 67),
        ('Z√ºrich', 'Berne', 87),
        ('Gen√®ve', 'Berne', 158),
        ('Basel', 'Z√ºrich', 87),
        ('Gen√®ve', 'Lausanne', 62),
        ('Berne', 'Lucerne', 100),
        ('Lausanne', 'Montreux', 32),
        ('Z√ºrich', 'Sankt Gallen', 78),
        ('Berne', 'Fribourg', 34),
        ('Gen√®ve', 'Montreux', 95),
        ('Sion', 'Martigny', 28),
        ('Neuch√¢tel', 'Berne', 51),
        ('Del√©mont', 'Basel', 40),
        ('Chur', 'Davos', 60),
        ('Lugano', 'Bellinzona', 28),
        ('Interlaken', 'Berne', 58),
        ('Vevey', 'Lausanne', 19),
        ('Morges', 'Lausanne', 12),
        ('Nyon', 'Gen√®ve', 25),
        ('Yverdon-les-Bains', 'Lausanne', 40)
    ]
    
    print(f"üîç Test de {len(known_distances)} distances de r√©f√©rence...")
    
    accurate_distances = 0
    inaccurate_distances = []
    
    for start, end, expected_km in known_distances:
        start_results = find_locality(start)
        end_results = find_locality(end)
        
        if start_results and end_results:
            start_data = start_results[0]
            end_data = end_results[0]
            
            if 'lat' in start_data and 'lon' in start_data and 'lat' in end_data and 'lon' in end_data:
                distance = get_route_distance_km(
                    (start_data['lat'], start_data['lon']),
                    (end_data['lat'], end_data['lon']),
                    start, end
                )
                
                if distance:
                    diff = abs(distance - expected_km)
                    accuracy = (1 - diff / expected_km) * 100
                    
                    if diff <= 15:  # Tol√©rance de 15km
                        accurate_distances += 1
                        status = "‚úÖ"
                    else:
                        inaccurate_distances.append((start, end, distance, expected_km, diff))
                        status = "‚ùå"
                    
                    print(f"{status} {start} ‚Üí {end}: {distance:.1f}km (attendu: {expected_km}km, diff: {diff:.1f}km, pr√©cision: {accuracy:.1f}%)")
                else:
                    inaccurate_distances.append((start, end, 0, expected_km, expected_km))
                    print(f"‚ùå {start} ‚Üí {end}: √âchec calcul")
            else:
                inaccurate_distances.append((start, end, 0, expected_km, expected_km))
                print(f"‚ùå {start} ‚Üí {end}: Coordonn√©es manquantes")
        else:
            inaccurate_distances.append((start, end, 0, expected_km, expected_km))
            print(f"‚ùå {start} ‚Üí {end}: Villes non trouv√©es")
    
    print(f"\nüìä R√âSULTATS PR√âCISION:")
    print(f"‚úÖ Distances pr√©cises: {accurate_distances}/{len(known_distances)} ({accurate_distances/len(known_distances)*100:.1f}%)")
    print(f"‚ùå Distances impr√©cises: {len(inaccurate_distances)}")
    
    if inaccurate_distances:
        print(f"\n‚ùå DISTANCES IMPR√âCISES:")
        for start, end, actual, expected, diff in inaccurate_distances:
            print(f"   ‚Ä¢ {start} ‚Üí {end}: {actual:.1f}km vs {expected}km (diff: {diff:.1f}km)")
        return False
    else:
        print(f"üéâ TOUTES LES DISTANCES SONT PR√âCISES!")
        return True

def test_special_cases():
    """Teste des cas sp√©ciaux mentionn√©s par l'utilisateur"""
    print(f"\nüéØ TEST DES CAS SP√âCIAUX MENTIONN√âS")
    print("=" * 70)
    
    # Cas sp√©ciaux mentionn√©s par l'utilisateur
    special_cases = [
        # Recherche par code postal
        '1727',  # Corpataux
        '1630',  # Bulle
        '1000',  # Lausanne
        '8001',  # Z√ºrich
        '1200',  # Gen√®ve
        
        # Communes probl√©matiques mentionn√©es
        'Corpataux',
        'Corpataux-Magnedens',
        'D√ºdingen',
        'Farvagny',
        'Vuisternens-en-Ogoz',
        
        # Variations d'√©criture
        'Fribourg',
        'Freiburg',
        'Sankt Gallen',
        'Saint-Gall',
        'B√¢le',
        'Basel',
        'Gen√®ve',
        'Genf',
        
        # Petites communes
        'Albeuve',
        'Grandvillard',
        'Lessoc',
        'Montbovon',
        'Enney'
    ]
    
    print(f"üîç Test de {len(special_cases)} cas sp√©ciaux...")
    
    successful_searches = 0
    failed_searches = []
    
    for search_term in special_cases:
        results = find_locality(search_term)
        
        if results:
            successful_searches += 1
            result = results[0]
            lat = result.get('lat', 0.0)
            lon = result.get('lon', 0.0)
            print(f"‚úÖ \"{search_term}\" ‚Üí {result['name']} ({result.get('zip', '?')}) [{result.get('canton', '?')}] GPS: ({lat:.4f}, {lon:.4f})")
        else:
            failed_searches.append(search_term)
            print(f"‚ùå \"{search_term}\" ‚Üí Aucun r√©sultat")
    
    print(f"\nüìä R√âSULTATS CAS SP√âCIAUX:")
    print(f"‚úÖ Recherches r√©ussies: {successful_searches}/{len(special_cases)} ({successful_searches/len(special_cases)*100:.1f}%)")
    print(f"‚ùå Recherches √©chou√©es: {len(failed_searches)}")
    
    if failed_searches:
        return False
    else:
        print(f"üéâ TOUS LES CAS SP√âCIAUX FONCTIONNENT!")
        return True

def main():
    """Fonction principale de v√©rification exhaustive"""
    print("üåç V√âRIFICATION EXHAUSTIVE DU SYST√àME G√âOGRAPHIQUE SUISSE")
    print("=" * 80)
    print("üéØ OBJECTIF: Confirmer que TOUTES les communes suisses sont disponibles")
    print("üéØ OBJECTIF: V√©rifier que TOUS les calculs de distance sont corrects")
    print("üéØ OBJECTIF: S'assurer qu'AUCUNE commune ne manque")
    print("")
    
    all_tests_passed = True
    
    # Test 1: V√©rifier toutes les coordonn√©es
    coords_ok = verify_all_coordinates()
    all_tests_passed = all_tests_passed and coords_ok
    
    # Test 2: Tester la fonctionnalit√© de recherche
    search_ok = test_search_functionality()
    all_tests_passed = all_tests_passed and search_ok
    
    # Test 3: Tester les calculs de distance (√©chantillon)
    distance_ok = test_distance_calculations_extensive()
    all_tests_passed = all_tests_passed and distance_ok
    
    # Test 4: Tester la pr√©cision avec des distances connues
    precision_ok = test_known_distances()
    all_tests_passed = all_tests_passed and precision_ok
    
    # Test 5: Tester les cas sp√©ciaux
    special_ok = test_special_cases()
    all_tests_passed = all_tests_passed and special_ok
    
    # R√©sum√© final
    print(f"\nüèÅ R√âSUM√â FINAL DE LA V√âRIFICATION EXHAUSTIVE")
    print("=" * 80)
    
    localities = load_swiss_localities()
    total_communes = len(localities)
    
    print(f"üìä Communes totales dans la base: {total_communes}")
    print(f"üîç Coordonn√©es GPS: {'‚úÖ TOUTES VALIDES' if coords_ok else '‚ùå PROBL√àMES D√âTECT√âS'}")
    print(f"üîé Fonctionnalit√© recherche: {'‚úÖ FONCTIONNELLE' if search_ok else '‚ùå PROBL√àMES D√âTECT√âS'}")
    print(f"üßÆ Calculs de distance: {'‚úÖ FONCTIONNELS' if distance_ok else '‚ùå PROBL√àMES D√âTECT√âS'}")
    print(f"üéØ Pr√©cision distances: {'‚úÖ PR√âCISE' if precision_ok else '‚ùå IMPR√âCISE'}")
    print(f"üîç Cas sp√©ciaux: {'‚úÖ TOUS OK' if special_ok else '‚ùå PROBL√àMES D√âTECT√âS'}")
    
    print(f"\n{'üéâ SYST√àME G√âOGRAPHIQUE COMPLET ET FONCTIONNEL!' if all_tests_passed else '‚ùå PROBL√àMES D√âTECT√âS - CORRECTIONS N√âCESSAIRES'}")
    
    if all_tests_passed:
        print(f"\n‚úÖ CONFIRMATION OFFICIELLE:")
        print(f"‚Ä¢ {total_communes} communes suisses disponibles avec coordonn√©es GPS")
        print(f"‚Ä¢ Recherche par nom, code postal, nom partiel fonctionne")
        print(f"‚Ä¢ Calculs de distance par route (pas vol d'oiseau) pr√©cis")
        print(f"‚Ä¢ Aucune commune manquante")
        print(f"‚Ä¢ Le bot peut maintenant g√©rer TOUTE commune suisse!")
    
    return all_tests_passed

if __name__ == "__main__":
    main()
