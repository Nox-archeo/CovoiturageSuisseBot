#!/usr/bin/env python3
"""
Script pour v√©rifier et corriger les coordonn√©es GPS des communes suisses
"""

import json
import sys
import os
import requests
from typing import Dict, List, Tuple

def load_swiss_localities() -> Dict:
    """Charge les donn√©es des localit√©s suisses"""
    try:
        with open('data/swiss_localities.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå Erreur chargement JSON: {e}")
        return {}

def verify_coordinates_batch(localities: Dict) -> Dict:
    """V√©rifie les coordonn√©es par lot"""
    print("üîç V√âRIFICATION DES COORDONN√âES GPS")
    print("=" * 50)
    
    # V√©rifier les principales villes suisses
    major_cities = {
        'Z√ºrich': (47.3769, 8.5417),
        'Gen√®ve': (46.2044, 6.1432),
        'B√¢le': (47.5596, 7.5886),
        'Lausanne': (46.5197, 6.6323),
        'Berne': (46.9481, 7.4474),
        'Winterthour': (47.5000, 8.7333),
        'Lucerne': (47.0502, 8.3093),
        'Saint-Gall': (47.4245, 9.3767),
        'Lugano': (46.0101, 8.9600),
        'Bienne': (47.1368, 7.2474),
        'Thoune': (46.7578, 7.6280),
        'K√∂niz': (46.9243, 7.4144),
        'La Chaux-de-Fonds': (47.1013, 6.8266),
        'Fribourg': (46.8019, 7.1512),
        'Schaffhouse': (47.6954, 8.6345),
        'Chur': (46.8492, 9.5330),
        'Neuch√¢tel': (47.0019, 6.9309),
        'Uster': (47.3467, 8.7208),
        'Sion': (46.2337, 7.3588),
        'Emmen': (47.0810, 8.3060)
    }
    
    corrections = {}
    missing_coords = []
    
    print("üìç V√©rification des principales villes:")
    for city_name, expected_coords in major_cities.items():
        found = False
        for name, data in localities.items():
            if city_name.lower() in name.lower() or name.lower() in city_name.lower():
                current_lat = data.get('lat', 0.0)
                current_lon = data.get('lon', 0.0)
                
                if current_lat == 0.0 or current_lon == 0.0:
                    print(f"‚ùå {name}: Coordonn√©es manquantes (0.0, 0.0)")
                    corrections[name] = expected_coords
                    missing_coords.append(name)
                else:
                    # V√©rifier si les coordonn√©es sont proches (¬±0.1 degr√©)
                    lat_diff = abs(current_lat - expected_coords[0])
                    lon_diff = abs(current_lon - expected_coords[1])
                    
                    if lat_diff > 0.1 or lon_diff > 0.1:
                        print(f"‚ö†Ô∏è  {name}: Coordonn√©es suspectes ({current_lat}, {current_lon}) vs attendues {expected_coords}")
                        corrections[name] = expected_coords
                    else:
                        print(f"‚úÖ {name}: Coordonn√©es correctes ({current_lat}, {current_lon})")
                found = True
                break
        
        if not found:
            print(f"‚ùå {city_name}: Ville non trouv√©e dans la base")
    
    return corrections

def verify_npa_ranges() -> List[str]:
    """V√©rifie les codes postaux suisses"""
    print("\nüìÆ V√âRIFICATION DES CODES POSTAUX")
    print("=" * 50)
    
    localities = load_swiss_localities()
    invalid_npa = []
    
    for name, data in localities.items():
        npa = data.get('zip', '')
        if npa:
            try:
                npa_int = int(npa)
                # Les NPA suisses vont de 1000 √† 9999
                if not (1000 <= npa_int <= 9999):
                    print(f"‚ùå {name}: NPA invalide {npa}")
                    invalid_npa.append(f"{name}: {npa}")
            except ValueError:
                print(f"‚ùå {name}: NPA non num√©rique '{npa}'")
                invalid_npa.append(f"{name}: {npa}")
    
    print(f"‚úÖ V√©rification termin√©e. {len(invalid_npa)} NPA invalides trouv√©s.")
    return invalid_npa

def check_missing_communes() -> List[str]:
    """V√©rifie s'il manque des communes importantes"""
    print("\nüèòÔ∏è V√âRIFICATION DES COMMUNES MANQUANTES")
    print("=" * 50)
    
    localities = load_swiss_localities()
    
    # Liste des communes souvent demand√©es
    important_communes = [
        'Corpataux-Magnedens', 'Posieux', 'Rossens', 'Farvagny', 'Vuisternens-en-Ogoz',
        'Marly', 'Villars-sur-Gl√¢ne', 'Givisiez', 'Granges-Paccot', 'D√ºdingen',
        'Bulle', 'Romont', 'Estavayer-le-Lac', 'Murten', 'Ch√¢tel-Saint-Denis',
        'Morges', 'Nyon', 'Vevey', 'Montreux', 'Aigle', 'Martigny', 'Sierre',
        'Monthey', 'Yverdon-les-Bains', 'Payerne', 'Del√©mont', 'Porrentruy',
        'Bellinzona', 'Locarno', 'Mendrisio', 'Davos', 'St. Moritz', 'Zermatt',
        'Interlaken', 'Grindelwald', 'Lauterbrunnen', 'Adelboden', 'Gstaad'
    ]
    
    missing = []
    found = []
    
    for commune in important_communes:
        found_match = False
        for name in localities.keys():
            if commune.lower() in name.lower() or name.lower() in commune.lower():
                found.append(f"‚úÖ {commune} ‚Üí {name}")
                found_match = True
                break
        
        if not found_match:
            missing.append(commune)
            print(f"‚ùå Manquant: {commune}")
    
    print(f"\nüìä R√©sultats:")
    print(f"‚úÖ Trouv√©es: {len(found)}")
    print(f"‚ùå Manquantes: {len(missing)}")
    
    return missing

def apply_corrections(corrections: Dict[str, Tuple[float, float]]):
    """Applique les corrections de coordonn√©es"""
    if not corrections:
        print("\n‚úÖ Aucune correction n√©cessaire!")
        return
    
    print(f"\nüîß APPLICATION DE {len(corrections)} CORRECTIONS")
    print("=" * 50)
    
    localities = load_swiss_localities()
    
    for name, (lat, lon) in corrections.items():
        if name in localities:
            old_lat = localities[name].get('lat', 0.0)
            old_lon = localities[name].get('lon', 0.0)
            
            localities[name]['lat'] = lat
            localities[name]['lon'] = lon
            
            print(f"‚úÖ {name}: ({old_lat}, {old_lon}) ‚Üí ({lat}, {lon})")
        else:
            print(f"‚ùå {name}: Non trouv√© pour correction")
    
    # Sauvegarder les corrections
    try:
        with open('data/swiss_localities.json', 'w', encoding='utf-8') as f:
            json.dump(localities, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ Corrections sauvegard√©es dans swiss_localities.json")
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde: {e}")

def test_distance_calculation():
    """Test les calculs de distance avec les nouvelles coordonn√©es"""
    print("\nüßÆ TEST DES CALCULS DE DISTANCE")
    print("=" * 50)
    
    try:
        from utils.route_distance import get_route_distance_km
        from utils.swiss_cities import find_locality
        
        # Tests de distances connues
        test_routes = [
            ('Fribourg', 'Lausanne', 67),  # Distance Google Maps
            ('Z√ºrich', 'Berne', 95),
            ('Gen√®ve', 'Lausanne', 62),
            ('B√¢le', 'Z√ºrich', 87),
            ('Corpataux', 'Fribourg', 8)   # Distance courte locale
        ]
        
        print("üó∫Ô∏è Tests de distances:")
        for start, end, expected_km in test_routes:
            start_results = find_locality(start)
            end_results = find_locality(end)
            
            if start_results and end_results:
                start_data = start_results[0]
                end_data = end_results[0]
                
                if 'lat' in start_data and 'lon' in start_data and 'lat' in end_data and 'lon' in end_data:
                    distance = get_route_distance_km(
                        (start_data['lat'], start_data['lon']),
                        (end_data['lat'], end_data['lon']),
                        start, end
                    )
                    
                    if distance:
                        diff = abs(distance - expected_km)
                        status = "‚úÖ" if diff < 10 else "‚ö†Ô∏è" if diff < 20 else "‚ùå"
                        print(f"{status} {start} ‚Üí {end}: {distance:.1f}km (attendu: {expected_km}km, diff: {diff:.1f}km)")
                    else:
                        print(f"‚ùå {start} ‚Üí {end}: √âchec calcul distance")
                else:
                    print(f"‚ùå {start} ‚Üí {end}: Coordonn√©es manquantes")
            else:
                print(f"‚ùå {start} ‚Üí {end}: Villes non trouv√©es")
                
    except Exception as e:
        print(f"‚ùå Erreur test distance: {e}")

def main():
    """Fonction principale"""
    print("üîç V√âRIFICATION COMPL√àTE DES DONN√âES G√âOGRAPHIQUES")
    print("=" * 60)
    
    localities = load_swiss_localities()
    if not localities:
        print("‚ùå Impossible de charger les donn√©es")
        return
    
    print(f"üìä {len(localities)} localit√©s charg√©es")
    
    # 1. V√©rifier les coordonn√©es
    corrections = verify_coordinates_batch(localities)
    
    # 2. V√©rifier les codes postaux
    invalid_npa = verify_npa_ranges()
    
    # 3. V√©rifier les communes manquantes
    missing_communes = check_missing_communes()
    
    # 4. Appliquer les corrections si n√©cessaire
    if corrections:
        apply_corrections(corrections)
    
    # 5. Tester les calculs de distance
    test_distance_calculation()
    
    # R√©sum√©
    print("\nüìã R√âSUM√â FINAL")
    print("=" * 50)
    print(f"üîß Coordonn√©es corrig√©es: {len(corrections)}")
    print(f"‚ùå NPA invalides: {len(invalid_npa)}")
    print(f"‚ùå Communes manquantes: {len(missing_communes)}")
    
    if corrections or invalid_npa or missing_communes:
        print("\n‚ö†Ô∏è Actions recommand√©es:")
        if corrections:
            print("‚úÖ Coordonn√©es corrig√©es automatiquement")
        if invalid_npa:
            print("üîç V√©rifier manuellement les NPA invalides")
        if missing_communes:
            print("‚ûï Ajouter les communes manquantes")
    else:
        print("\nüéâ Toutes les donn√©es sont correctes!")

if __name__ == "__main__":
    main()
