#!/usr/bin/env python
# filepath: /Users/margaux/CovoiturageSuisse/handlers/trip_creation/driver_trip_handler.py
"""
Handler pour la cr√©ation de trajet en tant que conducteur.
"""
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    CommandHandler,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    CallbackContext,
    filters
)
from database import get_db
from database.models import Trip, User
from utils.date_picker import (
    start_date_selection, handle_calendar_navigation, 
    handle_day_selection, handle_time_selection, handle_datetime_action
)
from utils.location_picker import (
    start_location_selection, handle_location_selection, handle_location_query
)
from handlers.preferences.trip_preferences_handler import (
    show_preferences_menu, show_preference_options, 
    handle_option_selection, handle_preferences_action
)
from .common import (
    get_trip_creation_keyboard, handle_trip_type_selection,
    show_trip_summary, handle_trip_confirmation, handle_edit_selection,
    common_states
)

logger = logging.getLogger(__name__)

# √âtats de conversation
(
    TRIP_TYPE,
    DRIVER_START,
    DEPARTURE,
    ARRIVAL,
    CALENDAR,
    TIME,
    CONFIRM_DATETIME,
    SEATS,
    PRICE,
    ADDITIONAL_INFO,
    PREFERENCES,
    CONFIRM,
    REGULAR_DETAILS,
    EDITING_TRIP,
    EDITING_SEATS,
    EDITING_PRICE,
    EDITING_INFO,
    REGULAR_ROLE,
    WOMEN_ROLE,
    WOMEN_ONLY_CHECK,
    CANCEL
) = range(21)

async def start_driver_trip(update: Update, context: CallbackContext):
    """D√©marre le processus de cr√©ation d'un trajet conducteur"""
    logger.debug("üîç DEBUG: start_driver_trip appel√©")
    if update.callback_query:
        logger.debug(f"üîç DEBUG: callback_data={update.callback_query.data}")

    query = update.callback_query
    if query:
        await query.answer()
        
    # Enregistrons des informations pour le d√©bogage
    logger.info(f"D√©marrage cr√©ation trajet conducteur: user_id={update.effective_user.id}")
    
    # V√©rifier si l'utilisateur est autoris√© √† √™tre conducteur
    user_id = update.effective_user.id
    db = get_db()
    user = db.query(User).filter_by(telegram_id=user_id).first()
    
    if not user:
        # L'utilisateur n'a pas de profil, il faut en cr√©er un
        user = User(telegram_id=user_id, username=update.effective_user.username)
        db.add(user)
        db.commit()
    
    # V√©rifier si l'utilisateur est d√©j√† un conducteur
    if not user.is_driver:
        # L'utilisateur n'est pas encore conducteur
        keyboard = [
            [InlineKeyboardButton("‚úÖ Devenir conducteur", callback_data="become_driver")],
            [InlineKeyboardButton("‚ùå Annuler", callback_data="cancel_driver")]
        ]
        
        message_text = (
            "üöó *Mode Conducteur*\n\n"
            "Pour cr√©er un trajet en tant que conducteur, vous devez d'abord "
            "activer votre profil conducteur.\n\n"
            "En devenant conducteur, vous acceptez:\n"
            "- De fournir un v√©hicule en bon √©tat\n"
            "- D'avoir un permis de conduire valide\n"
            "- De respecter le code de la route"
        )
        
        if query:
            await query.edit_message_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        
        logger.debug("üîç DEBUG: Retourne l'√©tat BECOMING_DRIVER")
        return "BECOMING_DRIVER" 
    
    # L'utilisateur est d√©j√† conducteur, continuer avec la cr√©ation du trajet
    logger.debug("üîç DEBUG: Appel start_departure_selection")
    return await start_departure_selection(update, context)

async def handle_become_driver(update: Update, context: CallbackContext):
    """G√®re l'activation du profil conducteur"""
    query = update.callback_query
    await query.answer()
    
    # Extraire l'action
    action = query.data
    
    if action == "become_driver":
        # Activer le profil conducteur
        user_id = query.from_user.id
        db = get_db()
        user = db.query(User).filter_by(telegram_id=user_id).first()
        
        if user:
            user.is_driver = True
            db.commit()
            logger.info(f"Utilisateur {user_id} est devenu conducteur")
            
            # V√©rifier si l'utilisateur a d√©j√† un email PayPal
            if user.paypal_email:
                # Email PayPal d√©j√† configur√©, continuer avec la cr√©ation du trajet
                await query.edit_message_text(
                    "‚úÖ *Profil conducteur activ√©!*\n\n"
                    f"üìß Email PayPal : `{user.paypal_email}`\n\n"
                    "Vous pouvez maintenant cr√©er des trajets en tant que conducteur.",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # Continuer avec la cr√©ation du trajet
                logger.debug("üîç DEBUG: Appel start_departure_selection")
                return await start_departure_selection(update, context)
            else:
                # Pas d'email PayPal, demander la configuration
                keyboard = [
                    [InlineKeyboardButton("üí≥ Configurer PayPal", callback_data="setup_paypal")],
                    [InlineKeyboardButton("‚è≠Ô∏è Ignorer pour l'instant", callback_data="skip_paypal_setup")]
                ]
                
                await query.edit_message_text(
                    "‚úÖ *Profil conducteur activ√©!*\n\n"
                    "üí≥ *Configuration PayPal requise*\n\n"
                    "Pour recevoir vos paiements automatiques (88% du montant), "
                    "vous devez configurer votre email PayPal.\n\n"
                    "‚ö†Ô∏è Sans email PayPal, vous ne pourrez pas recevoir de paiements automatiques.",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                
                # D√©finir l'√©tat suivant apr√®s configuration PayPal
                context.user_data['next_state_after_paypal'] = "DEPARTURE"
                return "PAYPAL_SETUP"
        else:
            await query.edit_message_text(
                "‚ùå Erreur: Votre profil n'a pas √©t√© trouv√©."
            )
            return ConversationHandler.END
    
    elif action == "cancel_driver":
        # Annuler l'activation
        await query.edit_message_text(
            "‚ùå Activation du profil conducteur annul√©e."
        )
        return ConversationHandler.END
    
    elif action == "skip_paypal_setup":
        # Ignorer la configuration PayPal pour l'instant
        await query.edit_message_text(
            "‚è≠Ô∏è *Configuration PayPal ignor√©e*\n\n"
            "Vous pourrez configurer votre email PayPal plus tard avec /paypal\n\n"
            "‚ö†Ô∏è Attention : Sans email PayPal configur√©, vous ne recevrez "
            "pas de paiements automatiques pour vos trajets."
        )
        
        # Continuer avec la cr√©ation du trajet
        return await start_departure_selection(update, context)
    
    elif action == "setup_paypal":
        # Rediriger vers le handler de configuration PayPal
        from handlers.paypal_setup_handler import request_paypal_email
        return await request_paypal_email(update, context)
    
    else:
        # Action non reconnue
        await query.edit_message_text("‚ùå Action non reconnue.")
        return ConversationHandler.END

async def start_departure_selection(update: Update, context: CallbackContext):
    """D√©marre la s√©lection de la ville de d√©part"""
    # Initialiser le dictionnaire des donn√©es du trajet
    context.user_data['trip_type'] = 'driver'
    
    # Rediriger vers le s√©lecteur de localit√©
    return await start_location_selection(
        update, context, 
        "departure", 
        "üèôÔ∏è S√©lectionnez votre ville de d√©part:"
    )

async def after_departure_selection(update: Update, context: CallbackContext):
    """Handler appel√© apr√®s la s√©lection de la ville de d√©part"""
    # Rediriger vers le s√©lecteur de localit√© pour la ville d'arriv√©e
    return await start_location_selection(
        update, context, 
        "arrival", 
        "üèôÔ∏è S√©lectionnez votre ville d'arriv√©e:"
    )

async def after_arrival_selection(update: Update, context: CallbackContext):
    """Handler appel√© apr√®s la s√©lection de la ville d'arriv√©e"""
    # Rediriger vers le s√©lecteur de date
    return await start_date_selection(
        update, context,
        "üìÖ S√©lectionnez la date de d√©part:"
    )

async def after_datetime_selection(update: Update, context: CallbackContext):
    """Handler appel√© apr√®s la s√©lection de la date et l'heure"""
    query = update.callback_query
    await query.answer()
    
    # Cr√©er un clavier pour le nombre de places
    keyboard = []
    # Cr√©er des boutons pour 1 √† 8 places
    for i in range(1, 9):
        keyboard.append([InlineKeyboardButton(str(i), callback_data=f"seats:{i}")])
    
    await query.edit_message_text(
        "üë• Combien de places proposez-vous?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return SEATS

async def handle_seats_selection(update: Update, context: CallbackContext):
    """G√®re la s√©lection du nombre de places"""
    query = update.callback_query
    await query.answer()
    
    # Extraire le nombre de places
    parts = query.data.split(':', 1)
    if len(parts) != 2:
        await query.edit_message_text("‚ùå Nombre de places non valide.")
        return SEATS
    
    _, seats_str = parts
    
    try:
        seats = int(seats_str)
        if seats < 1 or seats > 8:
            raise ValueError("Nombre de places hors limites")
        
        # Sauvegarder le nombre de places
        context.user_data['seats'] = seats
        context.user_data['available_seats'] = seats  # Pour garder la trace des places restantes
        
        # Passer √† la s√©lection du prix
        await query.edit_message_text(
            "üí∞ Quel est le prix par place (en CHF)?\n\n"
            "Entrez un nombre (par exemple: 15 ou 12.50)"
        )
        
        return PRICE
        
    except ValueError:
        await query.edit_message_text("‚ùå Nombre de places non valide.")
        return SEATS

async def handle_price_input(update: Update, context: CallbackContext):
    """G√®re l'entr√©e du prix par place"""
    # R√©cup√©rer le prix entr√©
    price_text = update.message.text.strip().replace(',', '.')
    
    try:
        price = float(price_text)
        if price < 0:
            raise ValueError("Prix n√©gatif")
        
        # Arrondir √† 2 d√©cimales
        price = round(price, 2)
        
        # Sauvegarder le prix
        context.user_data['price'] = price
        
        # Calculer la commission
        commission = price * 0.12  # 12% de commission
        driver_receives = price - commission
        
        # Informer l'utilisateur sur la commission
        keyboard = [
            [InlineKeyboardButton("‚úÖ Continuer", callback_data="price:continue")],
            [InlineKeyboardButton("‚úèÔ∏è Modifier", callback_data="price:edit")]
        ]
        
        await update.message.reply_text(
            f"üí∞ *Prix:* {price:.2f} CHF par place\n\n"
            f"üìä *Commission de 12%:* {commission:.2f} CHF\n"
            f"üí∏ *Vous recevrez:* {driver_receives:.2f} CHF par passager\n\n"
            f"Souhaitez-vous continuer?",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        
        return "CONFIRMING_PRICE"
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå Prix non valide. Veuillez entrer un nombre positif (ex: 15 ou 12.50)."
        )
        return PRICE

async def handle_price_confirmation(update: Update, context: CallbackContext):
    """G√®re la confirmation du prix"""
    query = update.callback_query
    await query.answer()
    
    # Extraire l'action
    _, action = query.data.split(':', 1)
    
    if action == "continue":
        # Passer aux informations suppl√©mentaires
        await query.edit_message_text(
            "üìù Souhaitez-vous ajouter des informations suppl√©mentaires?\n\n"
            "Par exemple:\n"
            "- Point de rendez-vous pr√©cis\n"
            "- Type de voiture\n"
            "- Autres d√©tails importants\n\n"
            "Entrez vos informations ou cliquez sur 'Passer':",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚è≠Ô∏è Passer", callback_data="info:skip")]
            ])
        )
        
        return ADDITIONAL_INFO
        
    elif action == "edit":
        # Permettre √† l'utilisateur de modifier le prix
        await query.edit_message_text(
            "üí∞ Veuillez entrer un nouveau prix par place (en CHF):"
        )
        
        return PRICE
    
    else:
        # Action non reconnue
        await query.edit_message_text("‚ùå Action non reconnue.")
        return PRICE

async def handle_additional_info(update: Update, context: CallbackContext):
    """G√®re l'entr√©e des informations suppl√©mentaires"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        
        # L'utilisateur a cliqu√© sur "Passer"
        if query.data == "info:skip":
            context.user_data['additional_info'] = None
        else:
            # Action non reconnue
            await query.edit_message_text("‚ùå Action non reconnue.")
            return ADDITIONAL_INFO
    else:
        # L'utilisateur a entr√© du texte
        info_text = update.message.text.strip()
        context.user_data['additional_info'] = info_text
    
    # Passer aux pr√©f√©rences
    return await show_preferences_menu(update, context)

async def after_preferences(update: Update, context: CallbackContext):
    """Handler appel√© apr√®s la s√©lection des pr√©f√©rences"""
    # Passer √† la confirmation du trajet
    return await show_trip_summary(update, context, "SAVE_TRIP")

async def save_trip(update: Update, context: CallbackContext):
    """Sauvegarde le trajet dans la base de donn√©es"""
    # R√©cup√©rer les donn√©es du trajet
    trip_data = context.user_data
    
    # R√©cup√©rer l'utilisateur
    user_id = update.effective_user.id
    db = get_db()
    user = db.query(User).filter_by(telegram_id=user_id).first()
    
    if not user:
        # Cas improbable mais √† g√©rer
        await update.callback_query.edit_message_text(
            "‚ùå Erreur: Votre profil n'a pas √©t√© trouv√©."
        )
        return ConversationHandler.END
    
    # Cr√©er le nouveau trajet
    try:
        new_trip = Trip(
            driver_id=user.id,
            departure_city=trip_data.get('departure'),
            arrival_city=trip_data.get('arrival'),
            departure_time=trip_data.get('selected_datetime'),
            seats_available=trip_data.get('seats', 1),
            available_seats=trip_data.get('seats', 1),  # Au d√©part, toutes les places sont disponibles
            price_per_seat=trip_data.get('price', 0),
            additional_info=trip_data.get('additional_info'),
            booking_deadline=trip_data.get('selected_datetime') - timedelta(hours=1),  # Par d√©faut 1h avant
            is_published=True,  # Publier automatiquement
            
            # Pr√©f√©rences
            preferences = trip_data.get('trip_preferences', {})
        )
        
        # Ajouter les pr√©f√©rences sp√©cifiques si pr√©sentes
        preferences = trip_data.get('trip_preferences', {})
        if preferences:
            if 'smoking' in preferences:
                new_trip.smoking = preferences['smoking']
            if 'music' in preferences:
                new_trip.music = preferences['music']
            if 'talk_preference' in preferences:
                new_trip.talk_preference = preferences['talk_preference']
            if 'pets_allowed' in preferences:
                new_trip.pets_allowed = preferences['pets_allowed']
            if 'luggage_size' in preferences:
                new_trip.luggage_size = preferences['luggage_size']
        
        # Autres options sp√©ciales
        new_trip.recurring = trip_data.get('is_regular', False)
        new_trip.women_only = trip_data.get('women_only', False)
        
        # Sauvegarder dans la base de donn√©es
        db.add(new_trip)
        db.commit()
        
        # Log de cr√©ation r√©ussie
        logger.info(f"Nouveau trajet cr√©√© par {user_id} de {new_trip.departure_city} √† {new_trip.arrival_city}")
        
        # Message de confirmation
        message_text = (
            "‚úÖ *Trajet cr√©√© avec succ√®s!*\n\n"
            f"Votre trajet de *{new_trip.departure_city}* √† *{new_trip.arrival_city}* "
            f"le {new_trip.departure_time.strftime('%d/%m/%Y √† %H:%M')} a √©t√© enregistr√©.\n\n"
            f"Il est maintenant visible pour les passagers potentiels."
        )
        
        # Ajouter des boutons pour les actions suivantes
        keyboard = [
            [InlineKeyboardButton("üìã Voir mes trajets", callback_data="view_my_trips")],
            [InlineKeyboardButton("üöó Cr√©er un autre trajet", callback_data="create_another_trip")],
            [InlineKeyboardButton("üîô Menu principal", callback_data="back_to_menu")]
        ]
        
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        
        # Nettoyer les donn√©es temporaires
        context.user_data.clear()
        
        return ConversationHandler.END
        
    except Exception as e:
        # G√©rer les erreurs de cr√©ation de trajet
        logger.error(f"Erreur lors de la cr√©ation du trajet: {str(e)}")
        
        await update.callback_query.edit_message_text(
            "‚ùå Une erreur est survenue lors de la cr√©ation du trajet.\n\n"
            "Veuillez r√©essayer plus tard."
        )
        
        return ConversationHandler.END

async def handle_after_creation_action(update: Update, context: CallbackContext):
    """G√®re les actions apr√®s la cr√©ation d'un trajet"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    
    if action == "create_another_trip":
        # Red√©marrer le processus de cr√©ation
        return await start_driver_trip(update, context)
    
    elif action == "view_my_trips":
        # Rediriger vers la liste des trajets de l'utilisateur
        # Cette fonction doit √™tre d√©finie ailleurs
        from handlers.trip_handlers import list_my_trips
        return await list_my_trips(update, context)
    
    elif action == "back_to_menu":
        # Rediriger vers le menu principal
        # Cette fonction doit √™tre d√©finie ailleurs
        from handlers.menu_handlers import back_to_menu
        return await back_to_menu(update, context)
    
    else:
        # Action non reconnue, retourner au menu
        from handlers.menu_handlers import back_to_menu
        return await back_to_menu(update, context)

# D√©finir le ConversationHandler pour la cr√©ation de trajet conducteur
driver_trip_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(start_driver_trip, pattern=r"^trip_type:driver$"),
        CommandHandler("creer", start_driver_trip)
    ],
    states={
        # √âtats initiaux
        "BECOMING_DRIVER": [
            CallbackQueryHandler(handle_become_driver, pattern=r"^(become_driver|cancel_driver)$")
        ],
        
        # √âtat interm√©diaire apr√®s s√©lection du type de trajet
        "DRIVER_START": [
            # Cet √©tat est g√©n√©ralement transitoire et va directement √† start_departure_selection
            CallbackQueryHandler(start_departure_selection, pattern=r"^.*$")
        ],
        
        # S√©lection de localit√©s
        "ENTERING_LOCATION": [
            CallbackQueryHandler(
                lambda u, c: after_departure_selection(u, c) if c.user_data.get('location_action') == 'departure' else after_arrival_selection(u, c), 
                pattern=r"^(departure|arrival):.+$"
            )
        ],
        "SEARCHING_LOCATION": [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_location_query)
        ],
        "SELECTING_FROM_RESULTS": [
            CallbackQueryHandler(
                lambda u, c: after_departure_selection(u, c) if c.user_data.get('location_action') == 'departure' else after_arrival_selection(u, c), 
                pattern=r"^(departure|arrival):.+$"
            )
        ],
        
        # S√©lection de date et heure
        "CALENDAR": [
            CallbackQueryHandler(handle_calendar_navigation, pattern=r"^calendar:(prev|next|month):\d+:\d+$"),
            CallbackQueryHandler(handle_day_selection, pattern=r"^calendar:day:\d+:\d+:\d+$"),
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=r"^calendar:cancel$")
        ],
        "TIME": [
            CallbackQueryHandler(handle_time_selection, pattern=r"^time:\d+:\d+$"),
            CallbackQueryHandler(lambda u, c: start_date_selection(u, c), pattern=r"^time:back$"),
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=r"^time:cancel$")
        ],
        "CONFIRM_DATETIME": [
            CallbackQueryHandler(
                lambda u, c: handle_datetime_action(u, c, SEATS), 
                pattern=r"^datetime:(confirm|change|cancel)$"
            )
        ],
        
        # S√©lection du nombre de places
        SEATS: [
            CallbackQueryHandler(handle_seats_selection, pattern=r"^seats:\d+$")
        ],
        
        # Saisie du prix
        PRICE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_price_input)
        ],
        "CONFIRMING_PRICE": [
            CallbackQueryHandler(handle_price_confirmation, pattern=r"^price:(continue|edit)$")
        ],
        
        # Informations suppl√©mentaires
        ADDITIONAL_INFO: [
            CallbackQueryHandler(handle_additional_info, pattern=r"^info:skip$"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_additional_info)
        ],
        
        # Pr√©f√©rences
        "CHOOSING_PREFERENCE": [
            CallbackQueryHandler(show_preference_options, pattern=r"^pref:[a-z_]+$"),
            CallbackQueryHandler(
                lambda u, c: handle_preferences_action(u, c, "CONFIRM"), 
                pattern=r"^pref:(save|cancel)$"
            )
        ],
        "SELECTING_OPTION": [
            CallbackQueryHandler(handle_option_selection, pattern=r"^option:.+$")
        ],
        
        # Confirmation finale
        "CONFIRMING_TRIP": [
            CallbackQueryHandler(
                lambda u, c: handle_trip_confirmation(u, c), 
                pattern=r"^trip:(confirm|edit|cancel)$"
            )
        ],
        
        # √âdition du trajet
        "EDITING_TRIP": [
            CallbackQueryHandler(handle_edit_selection, pattern=r"^edit:.+$")
        ],
        "EDITING_SEATS": [
            CallbackQueryHandler(
                lambda u, c: handle_seats_selection(u, c), 
                pattern=r"^seats:\d+$"
            )
        ],
        "EDITING_PRICE": [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_price_input)
        ],
        "EDITING_INFO": [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_additional_info)
        ],
        
        # Sauvegarde du trajet
        "SAVE_TRIP": [
            CallbackQueryHandler(save_trip, pattern=r"^trip:confirm$"),
            CallbackQueryHandler(handle_trip_confirmation, pattern=r"^trip:(edit|cancel)$")
        ],
        
        # Action apr√®s cr√©ation
        ConversationHandler.END: [
            CallbackQueryHandler(
                handle_after_creation_action, 
                pattern=r"^(create_another_trip|view_my_trips|back_to_menu)$"
            )
        ],
        
        # √âtats de sortie
        "CANCEL": [
            # Retour au menu principal ou autre action
            CallbackQueryHandler(
                lambda u, c: ConversationHandler.END,
                pattern=r".*"
            )
        ]
    },
    fallbacks=[
        CommandHandler("annuler", lambda u, c: ConversationHandler.END),
        # Autres fallbacks si n√©cessaire
    ],
    name="driver_trip_creation",
    persistent=True,
)

def register(application):
    """Enregistre les handlers pour la cr√©ation de trajet conducteur"""
    logger.info("Enregistrement des handlers de cr√©ation de trajet conducteur")
    
    # Enregistrer le ConversationHandler
    application.add_handler(driver_trip_handler)
    
    # Autres handlers si n√©cessaire
