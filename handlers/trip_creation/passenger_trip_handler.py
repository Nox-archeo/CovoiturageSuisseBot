#!/usr/bin/env python
# filepath: /Users/margaux/CovoiturageSuisse/handlers/trip_creation/passenger_trip_handler.py
"""
Handler pour la cr√©ation de trajet en tant que passager.
"""
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    CommandHandler,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    CallbackContext,
    filters
)
from database import get_db
from database.models import Trip, User
from utils.date_picker import (
    start_date_selection, handle_calendar_navigation, 
    handle_day_selection, handle_time_selection, handle_datetime_action
)
from utils.location_picker import (
    start_location_selection, handle_location_selection, handle_location_query
)
from handlers.preferences.trip_preferences_handler import (
    show_preferences_menu, show_preference_options, 
    handle_option_selection, handle_preferences_action
)
from .common import (
    get_trip_creation_keyboard, handle_trip_type_selection,
    show_trip_summary, handle_trip_confirmation, handle_edit_selection,
    common_states
)

logger = logging.getLogger(__name__)

# √âtats de conversation
(
    TRIP_TYPE,
    PASSENGER_START,
    DEPARTURE,
    ARRIVAL,
    CALENDAR,
    TIME,
    CONFIRM_DATETIME,
    PASSENGER_COUNT,
    NEEDS,
    PREFERENCES,
    CONFIRM,
    REGULAR_DETAILS,
    EDITING_TRIP,
    EDITING_PASSENGER_COUNT,
    EDITING_NEEDS,
    REGULAR_ROLE,
    WOMEN_ROLE,
    WOMEN_ONLY_CHECK,
    CANCEL
) = range(19)

async def start_passenger_trip(update: Update, context: CallbackContext):
    """D√©marre le processus de cr√©ation d'un trajet passager"""
    logger.debug("üîç DEBUG: start_passenger_trip appel√©")
    if update.callback_query:
        logger.debug(f"üîç DEBUG: callback_data={update.callback_query.data}")
        
    query = update.callback_query
    if query:
        await query.answer()
    
    # Enregistrons des informations pour le d√©bogage
    logger.info(f"D√©marrage cr√©ation trajet passager: user_id={update.effective_user.id}")
    
    # V√©rifier si l'utilisateur est autoris√© √† √™tre passager
    user_id = update.effective_user.id
    db = get_db()
    user = db.query(User).filter_by(telegram_id=user_id).first()
    
    if not user:
        # L'utilisateur n'a pas de profil, il faut en cr√©er un
        user = User(telegram_id=user_id, username=update.effective_user.username)
        db.add(user)
        db.commit()
    
    # V√©rifier si l'utilisateur est d√©j√† un passager
    if not user.is_passenger:
        # L'utilisateur n'est pas encore passager
        keyboard = [
            [InlineKeyboardButton("‚úÖ Devenir passager", callback_data="become_passenger")],
            [InlineKeyboardButton("‚ùå Annuler", callback_data="cancel_passenger")]
        ]
        
        message_text = (
            "üë• *Mode Passager*\n\n"
            "Pour cr√©er une demande de trajet, vous devez d'abord "
            "activer votre profil passager.\n\n"
            "En devenant passager, vous acceptez:\n"
            "- De respecter les r√®gles d√©finies par les conducteurs\n"
            "- De pr√©venir en cas d'annulation\n"
            "- De traiter les autres utilisateurs avec respect"
        )
        
        if query:
            await query.edit_message_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        
        return "BECOMING_PASSENGER"
    
    # L'utilisateur est d√©j√† passager, continuer avec la cr√©ation de la demande
    return await start_departure_selection(update, context)

async def handle_become_passenger(update: Update, context: CallbackContext):
    """G√®re l'activation du profil passager"""
    query = update.callback_query
    await query.answer()
    
    # Extraire l'action
    action = query.data
    
    if action == "become_passenger":
        # Activer le profil passager
        user_id = query.from_user.id
        db = get_db()
        user = db.query(User).filter_by(telegram_id=user_id).first()
        
        if user:
            user.is_passenger = True
            db.commit()
            logger.info(f"Utilisateur {user_id} est devenu passager")
            
            await query.edit_message_text(
                "‚úÖ *Profil passager activ√©!*\n\n"
                "Vous pouvez maintenant cr√©er des demandes de trajet.",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # Continuer avec la cr√©ation de la demande
            return await start_departure_selection(update, context)
        else:
            await query.edit_message_text(
                "‚ùå Erreur: Votre profil n'a pas √©t√© trouv√©."
            )
            return ConversationHandler.END
    
    elif action == "cancel_passenger":
        # Annuler l'activation
        await query.edit_message_text(
            "‚ùå Activation du profil passager annul√©e."
        )
        return ConversationHandler.END
    
    else:
        # Action non reconnue
        await query.edit_message_text("‚ùå Action non reconnue.")
        return ConversationHandler.END

async def start_departure_selection(update: Update, context: CallbackContext):
    """D√©marre la s√©lection de la ville de d√©part"""
    # Initialiser le dictionnaire des donn√©es du trajet
    context.user_data['trip_type'] = 'passenger'
    
    # Rediriger vers le s√©lecteur de localit√©
    return await start_location_selection(
        update, context, 
        "departure", 
        "üèôÔ∏è D'o√π souhaitez-vous partir?"
    )

async def after_departure_selection(update: Update, context: CallbackContext):
    """Handler appel√© apr√®s la s√©lection de la ville de d√©part"""
    # Rediriger vers le s√©lecteur de localit√© pour la ville d'arriv√©e
    return await start_location_selection(
        update, context, 
        "arrival", 
        "üèôÔ∏è O√π souhaitez-vous aller?"
    )

async def after_arrival_selection(update: Update, context: CallbackContext):
    """Handler appel√© apr√®s la s√©lection de la ville d'arriv√©e"""
    # Rediriger vers le s√©lecteur de date
    return await start_date_selection(
        update, context,
        "üìÖ √Ä quelle date souhaitez-vous partir?"
    )

async def after_datetime_selection(update: Update, context: CallbackContext):
    """Handler appel√© apr√®s la s√©lection de la date et l'heure"""
    query = update.callback_query
    await query.answer()
    
    # Cr√©er un clavier pour le nombre de passagers
    keyboard = []
    # Cr√©er des boutons pour 1 √† 4 passagers
    for i in range(1, 5):
        keyboard.append([InlineKeyboardButton(f"{i} {('personne' if i == 1 else 'personnes')}", callback_data=f"passengers:{i}")])
    
    await query.edit_message_text(
        "üë• Combien de personnes voyagent avec vous?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return PASSENGER_COUNT

async def handle_passenger_count(update: Update, context: CallbackContext):
    """G√®re la s√©lection du nombre de passagers"""
    query = update.callback_query
    await query.answer()
    
    # Extraire le nombre de passagers
    parts = query.data.split(':', 1)
    if len(parts) != 2:
        await query.edit_message_text("‚ùå Nombre de passagers non valide.")
        return PASSENGER_COUNT
    
    _, passengers_str = parts
    
    try:
        passengers = int(passengers_str)
        if passengers < 1 or passengers > 4:
            raise ValueError("Nombre de passagers hors limites")
        
        # Sauvegarder le nombre de passagers
        context.user_data['passengers'] = passengers
        
        # Passer √† la saisie des besoins sp√©cifiques
        await query.edit_message_text(
            "üìù Avez-vous des besoins particuliers?\n\n"
            "Par exemple:\n"
            "- Flexibilit√© horaire\n"
            "- Bagages volumineux\n"
            "- Autres informations importantes\n\n"
            "Entrez vos besoins ou cliquez sur 'Passer':",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚è≠Ô∏è Passer", callback_data="needs:skip")]
            ])
        )
        
        return NEEDS
        
    except ValueError:
        await query.edit_message_text("‚ùå Nombre de passagers non valide.")
        return PASSENGER_COUNT

async def handle_needs_input(update: Update, context: CallbackContext):
    """G√®re l'entr√©e des besoins sp√©cifiques"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        
        # L'utilisateur a cliqu√© sur "Passer"
        if query.data == "needs:skip":
            context.user_data['needs'] = None
        else:
            # Action non reconnue
            await query.edit_message_text("‚ùå Action non reconnue.")
            return NEEDS
    else:
        # L'utilisateur a entr√© du texte
        needs_text = update.message.text.strip()
        context.user_data['needs'] = needs_text
    
    # Passer aux pr√©f√©rences
    return await show_preferences_menu(update, context)

async def after_preferences(update: Update, context: CallbackContext):
    """Handler appel√© apr√®s la s√©lection des pr√©f√©rences"""
    # Passer √† la confirmation de la demande
    return await show_trip_summary(update, context, "SAVE_TRIP")

async def save_trip_request(update: Update, context: CallbackContext):
    """Sauvegarde la demande de trajet dans la base de donn√©es"""
    # R√©cup√©rer les donn√©es du trajet
    trip_data = context.user_data
    
    # R√©cup√©rer l'utilisateur
    user_id = update.effective_user.id
    db = get_db()
    user = db.query(User).filter_by(telegram_id=user_id).first()
    
    if not user:
        # Cas improbable mais √† g√©rer
        await update.callback_query.edit_message_text(
            "‚ùå Erreur: Votre profil n'a pas √©t√© trouv√©."
        )
        return ConversationHandler.END
    
    # Cr√©er la nouvelle demande de trajet (utiliser la m√™me table Trip avec un flag)
    try:
        new_request = Trip(
            passenger_id=user.id,  # Utiliser passenger_id au lieu de driver_id
            departure_city=trip_data.get('departure'),
            arrival_city=trip_data.get('arrival'),
            departure_time=trip_data.get('selected_datetime'),
            seats_needed=trip_data.get('passengers', 1),  # Nombre de passagers n√©cessaires
            is_request=True,  # Flag pour indiquer qu'il s'agit d'une demande
            additional_info=trip_data.get('needs'),
            
            # Pr√©f√©rences
            preferences = trip_data.get('trip_preferences', {})
        )
        
        # Ajouter les pr√©f√©rences sp√©cifiques si pr√©sentes
        preferences = trip_data.get('trip_preferences', {})
        if preferences:
            if 'smoking' in preferences:
                new_request.smoking = preferences['smoking']
            if 'music' in preferences:
                new_request.music = preferences['music']
            if 'talk_preference' in preferences:
                new_request.talk_preference = preferences['talk_preference']
            if 'pets_allowed' in preferences:
                new_request.pets_allowed = preferences['pets_allowed']
            if 'luggage_size' in preferences:
                new_request.luggage_size = preferences['luggage_size']
        
        # Autres options sp√©ciales
        new_request.recurring = trip_data.get('is_regular', False)
        new_request.women_only = trip_data.get('women_only', False)
        
        # Sauvegarder dans la base de donn√©es
        db.add(new_request)
        db.commit()
        
        # Log de cr√©ation r√©ussie
        logger.info(f"Nouvelle demande de trajet cr√©√©e par {user_id} de {new_request.departure_city} √† {new_request.arrival_city}")
        
        # Message de confirmation
        message_text = (
            "‚úÖ *Demande de trajet cr√©√©e avec succ√®s!*\n\n"
            f"Votre demande de trajet de *{new_request.departure_city}* √† *{new_request.arrival_city}* "
            f"le {new_request.departure_time.strftime('%d/%m/%Y √† %H:%M')} a √©t√© enregistr√©e.\n\n"
            f"Elle est maintenant visible pour les conducteurs potentiels."
        )
        
        # Ajouter des boutons pour les actions suivantes
        keyboard = [
            [InlineKeyboardButton("üîç Chercher des trajets", callback_data="search_trips")],
            [InlineKeyboardButton("üìã Voir mes demandes", callback_data="view_my_requests")],
            [InlineKeyboardButton("üîô Menu principal", callback_data="back_to_menu")]
        ]
        
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        
        # Nettoyer les donn√©es temporaires
        context.user_data.clear()
        
        return ConversationHandler.END
        
    except Exception as e:
        # G√©rer les erreurs de cr√©ation de demande
        logger.error(f"Erreur lors de la cr√©ation de la demande de trajet: {str(e)}")
        
        await update.callback_query.edit_message_text(
            "‚ùå Une erreur est survenue lors de la cr√©ation de la demande.\n\n"
            "Veuillez r√©essayer plus tard."
        )
        
        return ConversationHandler.END

async def handle_after_creation_action(update: Update, context: CallbackContext):
    """G√®re les actions apr√®s la cr√©ation d'une demande de trajet"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    
    if action == "search_trips":
        # Rediriger vers la recherche de trajets
        # Cette fonction doit √™tre d√©finie ailleurs
        from handlers.trip_search.search_handler import start_search
        return await start_search(update, context)
    
    elif action == "view_my_requests":
        # Rediriger vers la liste des demandes de l'utilisateur
        # Cette fonction doit √™tre d√©finie ailleurs
        from handlers.trip_handlers import list_my_trips
        return await list_my_trips(update, context)
    
    elif action == "back_to_menu":
        # Rediriger vers le menu principal
        # Cette fonction doit √™tre d√©finie ailleurs
        from handlers.menu_handlers import back_to_menu
        return await back_to_menu(update, context)
    
    else:
        # Action non reconnue, retourner au menu
        from handlers.menu_handlers import back_to_menu
        return await back_to_menu(update, context)

# D√©finir le ConversationHandler pour la cr√©ation de demande de trajet passager
passenger_trip_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(start_passenger_trip, pattern=r"^trip_type:passenger$"),
        CommandHandler("demander", start_passenger_trip)
    ],
    states={
        # √âtats initiaux
        "BECOMING_PASSENGER": [
            CallbackQueryHandler(handle_become_passenger, pattern=r"^(become_passenger|cancel_passenger)$")
        ],
        
        # √âtat interm√©diaire apr√®s s√©lection du type de trajet
        "PASSENGER_START": [
            # Cet √©tat est g√©n√©ralement transitoire et va directement √† start_departure_selection
            CallbackQueryHandler(start_departure_selection, pattern=r"^.*$")
        ],
        
        # S√©lection de localit√©s
        "ENTERING_LOCATION": [
            CallbackQueryHandler(
                lambda u, c: after_departure_selection(u, c) if c.user_data.get('location_action') == 'departure' else after_arrival_selection(u, c), 
                pattern=r"^(departure|arrival):.+$"
            )
        ],
        "SEARCHING_LOCATION": [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_location_query)
        ],
        "SELECTING_FROM_RESULTS": [
            CallbackQueryHandler(
                lambda u, c: after_departure_selection(u, c) if c.user_data.get('location_action') == 'departure' else after_arrival_selection(u, c), 
                pattern=r"^(departure|arrival):.+$"
            )
        ],
        
        # S√©lection de date et heure
        "CALENDAR": [
            CallbackQueryHandler(handle_calendar_navigation, pattern=r"^calendar:(prev|next|month):\d+:\d+$"),
            CallbackQueryHandler(handle_day_selection, pattern=r"^calendar:day:\d+:\d+:\d+$"),
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=r"^calendar:cancel$")
        ],
        "TIME": [
            CallbackQueryHandler(handle_time_selection, pattern=r"^time:\d+:\d+$"),
            CallbackQueryHandler(lambda u, c: start_date_selection(u, c), pattern=r"^time:back$"),
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=r"^time:cancel$")
        ],
        "CONFIRM_DATETIME": [
            CallbackQueryHandler(
                lambda u, c: handle_datetime_action(u, c, PASSENGER_COUNT), 
                pattern=r"^datetime:(confirm|change|cancel)$"
            )
        ],
        
        # S√©lection du nombre de passagers
        PASSENGER_COUNT: [
            CallbackQueryHandler(handle_passenger_count, pattern=r"^passengers:\d+$")
        ],
        
        # Saisie des besoins sp√©cifiques
        NEEDS: [
            CallbackQueryHandler(handle_needs_input, pattern=r"^needs:skip$"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_needs_input)
        ],
        
        # Pr√©f√©rences
        "CHOOSING_PREFERENCE": [
            CallbackQueryHandler(show_preference_options, pattern=r"^pref:[a-z_]+$"),
            CallbackQueryHandler(
                lambda u, c: handle_preferences_action(u, c, "CONFIRM"), 
                pattern=r"^pref:(save|cancel)$"
            )
        ],
        "SELECTING_OPTION": [
            CallbackQueryHandler(handle_option_selection, pattern=r"^option:.+$")
        ],
        
        # Confirmation finale
        "CONFIRMING_TRIP": [
            CallbackQueryHandler(
                lambda u, c: handle_trip_confirmation(u, c), 
                pattern=r"^trip:(confirm|edit|cancel)$"
            )
        ],
        
        # √âdition de la demande
        "EDITING_TRIP": [
            CallbackQueryHandler(handle_edit_selection, pattern=r"^edit:.+$")
        ],
        "EDITING_PASSENGER_COUNT": [
            CallbackQueryHandler(
                lambda u, c: handle_passenger_count(u, c), 
                pattern=r"^passengers:\d+$"
            )
        ],
        "EDITING_NEEDS": [
            CallbackQueryHandler(handle_needs_input, pattern=r"^needs:skip$"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_needs_input)
        ],
        
        # Sauvegarde de la demande
        "SAVE_TRIP": [
            CallbackQueryHandler(save_trip_request, pattern=r"^trip:confirm$"),
            CallbackQueryHandler(handle_trip_confirmation, pattern=r"^trip:(edit|cancel)$")
        ],
        
        # Action apr√®s cr√©ation
        ConversationHandler.END: [
            CallbackQueryHandler(
                handle_after_creation_action, 
                pattern=r"^(search_trips|view_my_requests|back_to_menu)$"
            )
        ],
        
        # √âtats de sortie
        "CANCEL": [
            # Retour au menu principal ou autre action
            CallbackQueryHandler(
                lambda u, c: ConversationHandler.END,
                pattern=r".*"
            )
        ]
    },
    fallbacks=[
        CommandHandler("annuler", lambda u, c: ConversationHandler.END),
        # Autres fallbacks si n√©cessaire
    ],
    name="passenger_trip_request",
    persistent=True,
)

def register(application):
    """Enregistre les handlers pour la cr√©ation de demande de trajet passager"""
    logger.info("Enregistrement des handlers de cr√©ation de demande de trajet passager")
    
    # Enregistrer le ConversationHandler
    application.add_handler(passenger_trip_handler)
    
    # Autres handlers si n√©cessaire
