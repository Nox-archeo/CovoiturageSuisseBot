import os
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    CallbackContext,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
from database.models import Trip, User, Booking
from database import get_db
from utils.validators import validate_date, validate_price, validate_seats
from utils.swiss_cities import find_locality, format_locality_result
from .trip_preferences import show_preferences_menu

# Configuration du logger
logger = logging.getLogger(__name__)

# √âtats de conversation (IMPORTANT: d√©finir avant toute utilisation)
(
    CHOOSING_TYPE,
    CHOOSING_DEPARTURE,
    CHOOSING_DESTINATION,
    ENTERING_DEPARTURE,
    ENTERING_ARRIVAL,
    DATE,
    SEATS,
    PRICE,
    CONFIRM,
    TRIP_TYPE,
    DEPARTURE,
    ARRIVAL,
    ADDING_STOP,
    MEETING_POINT
) = range(14)

def load_cities():
    """Charge le fichier cities.json"""
    try:
        cities_file = os.path.join(
            os.path.dirname(os.path.dirname(__file__)), 
            'src', 'bot', 'data', 'cities.json'
        )
        with open(cities_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return [city['name'] for city in data['cities']]
    except Exception as e:
        logger.error(f"Erreur chargement cities.json: {e}")
        return [
            "Z√ºrich", "Gen√®ve", "B√¢le", "Lausanne", "Berne", 
            "Lucerne", "Fribourg", "Neuch√¢tel", "Sion"
        ]  # Liste par d√©faut

# Charger les villes au d√©marrage
SWISS_CITIES = load_cities()

async def create_trip(update: Update, context):
    """Processus de cr√©ation de trajet am√©lior√©"""
    keyboard = [
        [
            InlineKeyboardButton("üöó Trajet simple", callback_data="trip_oneway"),
            InlineKeyboardButton("üîÑ Aller-retour", callback_data="trip_roundtrip")
        ],
        [
            InlineKeyboardButton("üë© Entre femmes uniquement", callback_data="trip_women_only"),
            InlineKeyboardButton("‚ö° R√©servation instantan√©e", callback_data="trip_instant")
        ]
    ]
    
    await update.message.reply_text(
        "üöó Cr√©ation d'un nouveau trajet\n"
        "Choisissez le type de trajet:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return TRIP_TYPE

async def add_stops(update: Update, context):
    """Ajoute des arr√™ts interm√©diaires"""
    if 'stops' not in context.user_data:
        context.user_data['stops'] = []
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ Terminer les arr√™ts", callback_data="stops_done")],
        [InlineKeyboardButton("‚ùå Annuler", callback_data="stops_cancel")]
    ]
    
    await update.message.reply_text(
        f"üöè Arr√™ts actuels: {', '.join(context.user_data['stops']) if context.user_data['stops'] else 'Aucun'}\n"
        "Entrez un nouvel arr√™t ou terminez:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADDING_STOP

async def handle_preferences(update: Update, context):
    """Gestion des pr√©f√©rences du trajet"""
    keyboard = [
        [
            InlineKeyboardButton("üö≠ Non-fumeur", callback_data="pref_no_smoking"),
            InlineKeyboardButton("üîä Musique", callback_data="pref_music")
        ],
        [
            InlineKeyboardButton("üê± Animaux", callback_data="pref_pets"),
            InlineKeyboardButton("üíº Bagages", callback_data="pref_luggage")
        ],
        [
            InlineKeyboardButton("üë© Entre femmes", callback_data="pref_women_only")
        ]
    ]
    await update.message.reply_text(
        "D√©finissez vos pr√©f√©rences pour ce trajet:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def search_trip(update: Update, context: CallbackContext):
    """Commence la recherche de trajet"""
    # Cr√©er un clavier avec les villes principales
    keyboard = []
    popular_cities = ["Fribourg", "Gen√®ve", "Lausanne", "Z√ºrich", "Berne", "B√¢le"]
    
    for city in popular_cities:
        keyboard.append([InlineKeyboardButton(city, callback_data=f"from_{city}")])
    
    keyboard.append([InlineKeyboardButton("üîç Recherche avanc√©e", callback_data="advanced_search")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîç Recherche de trajets\n\n"
        "1Ô∏è‚É£ Choisissez votre ville de d√©part:\n"
        "- S√©lectionnez une ville dans la liste\n"
        "- Ou utilisez la recherche avanc√©e",
        reply_markup=reply_markup
    )
    return ENTERING_DEPARTURE

async def handle_departure(update: Update, context):
    """Traite la ville de d√©part"""
    logger.info("Entr√©e dans handle_departure")
    try:
        # Cas 1: R√©ponse √† un callback query (bouton press√©)
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            logger.info(f"Callback query data: {query.data}")

            if query.data == "advanced_search" or query.data == "other_city":
                await query.edit_message_text(
                    "üèôÔ∏è Entrez le nom de la ville ou le code postal:\n"
                    "Exemple: Bulle, 1630, Fribourg, etc."
                )
                return DEPARTURE
            
            # Gestion du format "from_city"
            if query.data.startswith("from_"):
                city = query.data.replace("from_", "")
                context.user_data['departure'] = city
                logger.info(f"Ville de d√©part s√©lectionn√©e: {city}")
                
                # Afficher le choix de la destination
                keyboard = []
                for city in SWISS_CITIES[:6]:
                    if city.lower() != context.user_data['departure'].lower():
                        keyboard.append([InlineKeyboardButton(city, callback_data=f"to_{city}")])
                keyboard.append([InlineKeyboardButton("üîç Autre destination", callback_data="other_destination")])
                
                await query.edit_message_text(
                    f"D√©part: {context.user_data['departure']}\n\n"
                    "2Ô∏è‚É£ Choisissez votre destination:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return ENTERING_ARRIVAL
            
            # Gestion du format "dep_nom|code"
            if query.data.startswith("dep_"):
                city_info = query.data.replace("dep_", "").split('|')
                if len(city_info) == 2:
                    context.user_data['departure'] = {
                        'name': city_info[0],
                        'zip': city_info[1]
                    }
                    logger.info(f"Ville de d√©part s√©lectionn√©e: {city_info[0]} ({city_info[1]})")
                    
                    # Passer √† l'√©tape suivante pour la ville d'arriv√©e
                    departure = context.user_data['departure']
                    keyboard = []
                    for city in get_popular_destinations():
                        if city['name'] != departure['name']:
                            display_text = format_locality_result(city)
                            callback_data = f"arr_{city['name']}|{city['zip']}"
                            keyboard.append([InlineKeyboardButton(display_text, callback_data=callback_data)])
                    
                    keyboard.append([InlineKeyboardButton("üîç Autre ville", callback_data="other_arrival")])
                    keyboard.append([InlineKeyboardButton("‚ùå Annuler", callback_data="cancel_trip")])
                    
                    message_text = (
                        f"D√©part depuis : {departure['name']} ({departure['zip']})\n\n"
                        "Choisissez la ville d'arriv√©e :"
                    )
                    
                    await query.edit_message_text(
                        text=message_text,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    return ARRIVAL
        
        # Cas 2: Entr√©e directe de texte par l'utilisateur
        else:
            user_input = update.message.text.strip()
            logger.info(f"Recherche de localit√©: {user_input}")
            
            # Importer la fonction ici pour √©viter les probl√®mes d'import
            from utils.swiss_cities import find_locality, format_locality_result
            
            matches = find_locality(user_input)
            logger.info(f"Correspondances trouv√©es: {len(matches)}")
            
            if matches:
                keyboard = []
                for match in matches:
                    display_text = format_locality_result(match)
                    callback_data = f"dep_{match['name']}|{match['zip']}"
                    keyboard.append([InlineKeyboardButton(display_text, callback_data=callback_data)])
                
                keyboard.append([InlineKeyboardButton("‚ùå Annuler", callback_data="cancel_trip")])
                
                await update.message.reply_text(
                    "Choisissez une ville:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return DEPARTURE
            else:
                # Recherche dans SWISS_CITIES si pas de r√©sultat avec find_locality
                if user_input.lower() in [c.lower() for c in SWISS_CITIES]:
                    context.user_data['departure'] = user_input
                    logger.info(f"Ville trouv√©e dans SWISS_CITIES: {user_input}")
                    
                    # Afficher choix destination
                    keyboard = []
                    for city in SWISS_CITIES[:6]:
                        if city.lower() != user_input.lower():
                            keyboard.append([InlineKeyboardButton(city, callback_data=f"to_{city}")])
                    
                    keyboard.append([InlineKeyboardButton("üîç Autre destination", callback_data="other_destination")])
                    await update.message.reply_text(
                        f"D√©part: {context.user_data['departure']}\n\n"
                        "2Ô∏è‚É£ Choisissez votre destination:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    return ENTERING_ARRIVAL
                else:
                    # Sugg√©rer des villes similaires
                    closest_matches = get_closest_matches(user_input, SWISS_CITIES)
                    
                    if closest_matches:
                        keyboard = [[InlineKeyboardButton(c, callback_data=f"from_{c}")] for c in closest_matches]
                        await update.message.reply_text(
                            "‚ùå Ville non trouv√©e. Voulez-vous dire:\n",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                    else:
                        await update.message.reply_text(
                            "‚ùå Ville non trouv√©e.\n"
                            "Veuillez entrer un nom de ville ou un code postal valide."
                        )
                    return ENTERING_DEPARTURE

    except Exception as e:
        logger.error(f"Error in handle_departure: {str(e)}")
        if update.message:
            await update.message.reply_text(
                "Une erreur est survenue. Veuillez r√©essayer avec /creer"
            )
        return ConversationHandler.END

async def arrival(update: Update, context):
    """G√®re la ville d'arriv√©e"""
    context.user_data['arrival'] = update.message.text
    await update.message.reply_text(
        "√Ä quelle date et heure? (format: JJ/MM/AAAA HH:MM)"
    )
    return DATE

async def handle_arrival(update: Update, context):
    """Traite la ville d'arriv√©e"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        if query.data == "other_arrival":
            await query.edit_message_text(
                "üèôÔ∏è Entrez la ville d'arriv√©e:\n"
                "Par exemple: Bulle, Bienne, etc."
            )
            return ARRIVAL
        city_info = query.data.replace("arr_", "").split('|')
        if len(city_info) == 2:
            context.user_data['arrival'] = {
                'name': city_info[0],
                'zip': city_info[1]
            }
    else:
        # Recherche par nom ou NPA
        query_text = update.message.text.strip()
        matches = find_locality(query_text)
        
        if matches:
            keyboard = []
            for match in matches:
                display_text = format_locality_result(match)
                callback_data = f"arr_{match['name']}|{match['zip']}"
                keyboard.append([InlineKeyboardButton(display_text, callback_data=callback_data)])
            
            keyboard.append([InlineKeyboardButton("‚ùå Annuler", callback_data="cancel_trip")])
            await update.message.reply_text(
                "S√©lectionnez la localit√© :",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return ARRIVAL
        else:
            await update.message.reply_text(
                "‚ùå Localit√© non trouv√©e.\n"
                "Veuillez entrer un nom de ville ou un code postal (NPA) valide."
            )
            return ARRIVAL

    # Si on a une ville d'arriv√©e valide, passer √† la date
    if 'arrival' in context.user_data:
        departure = context.user_data['departure']
        arrival = context.user_data['arrival']
        
        message_text = (
            "üöó Nouveau trajet\n\n"
            f"De: {departure['name']} ({departure['zip']})\n"
            f"√Ä: {arrival['name']} ({arrival['zip']})\n\n"
            "üìÖ Entrez la date et l'heure du d√©part\n"
            "Format: JJ/MM/AAAA HH:MM\n"
            "Exemple: 25/04/2024 14:30"
        )
        
        if update.callback_query:
            await query.edit_message_text(text=message_text)
        else:
            await update.message.reply_text(text=message_text)
        return DATE

async def date(update: Update, context):
    """G√®re la date et l'heure"""
    date_str = update.message.text
    if not validate_date(date_str):
        await update.message.reply_text("Format invalide. Utilisez JJ/MM/AAAA HH:MM")
        return DATE
    
    context.user_data['date'] = date_str
    await update.message.reply_text("Combien de places disponibles?")
    return SEATS

async def seats(update: Update, context):
    """G√®re le nombre de places"""
    seats = update.message.text
    if not validate_seats(seats):
        await update.message.reply_text("Nombre de places invalide (1-8)")
        return SEATS
    
    context.user_data['seats'] = seats
    await update.message.reply_text("Quel est le prix par place (en CHF)?")
    return PRICE

async def price(update: Update, context):
    """G√®re le prix"""
    price = update.message.text
    if not validate_price(price):
        await update.message.reply_text("Prix invalide (1-1000 CHF)")
        return PRICE
    
    context.user_data['price'] = price
    # Afficher le r√©sum√©
    keyboard = [[
        InlineKeyboardButton("Confirmer", callback_data="confirm_trip"),
        InlineKeyboardButton("Annuler", callback_data="cancel_trip")
    ]]
    await update.message.reply_text(
        "R√©sum√© du trajet:\n"
        f"De: {context.user_data['departure']}\n"
        f"√Ä: {context.user_data['arrival']}\n"
        f"Date: {context.user_data['date']}\n"
        f"Places: {context.user_data['seats']}\n"
        f"Prix: {context.user_data['price']} CHF\n\n"
        "Confirmez-vous ces informations?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONFIRM

async def confirm(update: Update, context):
    """Confirme la cr√©ation du trajet"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm_trip":
        # Sauvegarder le trajet dans la base de donn√©es
        # ...
        await query.message.edit_text("Trajet cr√©√© avec succ√®s! üöó")
    else:
        await query.message.edit_text("Cr√©ation du trajet annul√©e.")
    
    return ConversationHandler.END

async def cancel(update: Update, context):
    """Annule la cr√©ation du trajet"""
    await update.message.reply_text("Cr√©ation du trajet annul√©e.")
    return ConversationHandler.END

# Fonction handle_departure remplac√©e par la version unifi√©e plus haut

async def handle_arrival(update: Update, context):
    """Traite la ville d'arriv√©e"""
    logger.info("Entr√©e dans handle_arrival")
    try:
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            logger.info(f"Callback query data: {query.data}")
            
            if query.data == "other_arrival" or query.data == "other_destination":
                await query.edit_message_text(
                    "üèôÔ∏è Entrez la ville d'arriv√©e:\n"
                    "Par exemple: Bulle, Bienne, etc."
                )
                return ARRIVAL
                
            # Format "to_city"
            if query.data.startswith("to_"):
                city = query.data.replace("to_", "")
                context.user_data['arrival'] = city
                logger.info(f"Ville d'arriv√©e s√©lectionn√©e: {city}")
                
                # Passer √† l'√©tape suivante
                if isinstance(context.user_data['departure'], str):
                    departure_text = context.user_data['departure']
                else:
                    departure_text = f"{context.user_data['departure']['name']} ({context.user_data['departure']['zip']})"
                
                await query.edit_message_text(
                    f"üöó Nouveau trajet\n\n"
                    f"De: {departure_text}\n"
                    f"√Ä: {city}\n\n"
                    f"üìÖ Entrez la date et l'heure du d√©part\n"
                    f"Format: JJ/MM/AAAA HH:MM\n"
                    f"Exemple: 25/04/2024 14:30"
                )
                return DATE
            
            # Format "arr_nom|code"
            if query.data.startswith("arr_"):
                city_info = query.data.replace("arr_", "").split('|')
                if len(city_info) == 2:
                    context.user_data['arrival'] = {
                        'name': city_info[0],
                        'zip': city_info[1]
                    }
                    logger.info(f"Ville d'arriv√©e s√©lectionn√©e: {city_info[0]} ({city_info[1]})")
                    
                    # Passer √† l'√©tape suivante pour la date
                    departure = context.user_data['departure']
                    arrival = context.user_data['arrival']
                    
                    message_text = (
                        "üöó Nouveau trajet\n\n"
                        f"De: {departure['name']} ({departure['zip']})\n"
                        f"√Ä: {arrival['name']} ({arrival['zip']})\n\n"
                        "üìÖ Entrez la date et l'heure du d√©part\n"
                        "Format: JJ/MM/AAAA HH:MM\n"
                        "Exemple: 25/04/2024 14:30"
                    )
                    
                    await query.edit_message_text(text=message_text)
                    return DATE
        else:
            # Entr√©e directe d'une ville par l'utilisateur
            city = update.message.text.strip()
            logger.info(f"Recherche de ville d'arriv√©e: {city}")
            
            # V√©rifier avec find_locality
            matches = find_locality(city)
            logger.info(f"Correspondances trouv√©es: {len(matches)}")
            
            if matches:
                keyboard = []
                for match in matches:
                    display_text = format_locality_result(match)
                    callback_data = f"arr_{match['name']}|{match['zip']}"
                    keyboard.append([InlineKeyboardButton(display_text, callback_data=callback_data)])
                
                keyboard.append([InlineKeyboardButton("‚ùå Annuler", callback_data="cancel_trip")])
                
                await update.message.reply_text(
                    "S√©lectionnez la localit√© :",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return ARRIVAL
            elif city.lower() in [c.lower() for c in SWISS_CITIES]:
                # Ville trouv√©e dans la liste simple
                context.user_data['arrival'] = city
                
                if isinstance(context.user_data['departure'], str):
                    departure_text = context.user_data['departure']
                else:
                    departure_text = f"{context.user_data['departure']['name']} ({context.user_data['departure']['zip']})"
                
                await update.message.reply_text(
                    f"üöó Nouveau trajet\n\n"
                    f"De: {departure_text}\n"
                    f"√Ä: {city}\n\n"
                    f"üìÖ Entrez la date et l'heure du d√©part\n"
                    f"Format: JJ/MM/AAAA HH:MM\n"
                    f"Exemple: 25/04/2024 14:30"
                )
                return DATE
            else:
                await update.message.reply_text(
                    "‚ùå Localit√© non trouv√©e.\n"
                    "Veuillez entrer un nom de ville ou un code postal (NPA) valide."
                )
                return ARRIVAL
    
    except Exception as e:
        logger.error(f"Error in handle_arrival: {str(e)}")
        if update.message:
            await update.message.reply_text(
                "Une erreur est survenue. Veuillez r√©essayer avec /creer"
            )
        return ConversationHandler.END

def get_closest_matches(city, cities_list, max_matches=3):
    """Trouve les villes les plus proches dans la liste"""
    # Impl√©mentation simple, √† am√©liorer avec fuzzy matching
    return [c for c in cities_list if city.lower() in c.lower()][:max_matches]

async def list_my_trips(update: Update, context):
    """Affiche la liste des trajets de l'utilisateur"""
    user_id = update.effective_user.id
    db = get_db()
    
    # R√©cup√©rer les trajets o√π l'utilisateur est conducteur
    driver_trips = db.query(Trip).join(User).filter(User.telegram_id == user_id).all()
    
    # R√©cup√©rer les r√©servations de l'utilisateur
    passenger_bookings = db.query(Booking).join(User).filter(User.telegram_id == user_id).all()
    
    message = "üöó Vos trajets:\n\n"
    
    if driver_trips:
        message += "En tant que conducteur:\n"
        for trip in driver_trips:
            message += f"‚Ä¢ {trip.departure_city} ‚Üí {trip.arrival_city} le {trip.departure_time}\n"
    
    if passenger_bookings:
        message += "\nEn tant que passager:\n"
        for booking in passenger_bookings:
            message += f"‚Ä¢ {booking.trip.departure_city} ‚Üí {booking.trip.arrival_city} le {booking.trip.departure_time}\n"
    
    if not driver_trips and not passenger_bookings:
        message = "Vous n'avez pas encore de trajets."
    
    keyboard = [
        [
            InlineKeyboardButton("üöó Cr√©er un trajet", callback_data="create_trip"),
            InlineKeyboardButton("üîç Chercher un trajet", callback_data="search_trip")
        ]
    ]
    
    await update.message.reply_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_trip_type(update: Update, context):
    """G√®re le choix du type de trajet"""
    query = update.callback_query
    if query:
        await query.answer()  # Important: toujours r√©pondre au callback
        
        choice = query.data.replace("trip_", "")
        context.user_data['trip_type'] = choice
        
        # Afficher les villes de d√©part disponibles
        keyboard = []
        # Ajouter les villes principales
        for city in SWISS_CITIES[:6]:  # Prendre les 6 premi√®res villes
            keyboard.append([InlineKeyboardButton(city, callback_data=f"dep_{city}")])
        
        keyboard.append([InlineKeyboardButton("üîç Autre ville", callback_data="other_city")])
        keyboard.append([InlineKeyboardButton("‚ùå Annuler", callback_data="cancel_trip")])
        
        await query.edit_message_text(
            "üöó Cr√©ation d'un nouveau trajet\n\n"
            "1Ô∏è‚É£ Choisissez la ville de d√©part:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return DEPARTURE
    else:
        # Premier affichage du menu de cr√©ation
        keyboard = [
            [InlineKeyboardButton("üöó Trajet simple", callback_data="trip_simple")],
            [InlineKeyboardButton("üîÑ Trajet r√©gulier", callback_data="trip_regular")],
            [InlineKeyboardButton("‚ùå Annuler", callback_data="cancel_trip")]
        ]
        
        await update.message.reply_text(
            "üöó Cr√©ation d'un nouveau trajet\n\n"
            "Quel type de trajet souhaitez-vous cr√©er?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return TRIP_TYPE

async def handle_stop(update: Update, context):
    """G√®re l'ajout d'un arr√™t interm√©diaire"""
    if 'stops' not in context.user_data:
        context.user_data['stops'] = []
    
    new_stop = update.message.text
    if new_stop in SWISS_CITIES:
        context.user_data['stops'].append(new_stop)
        keyboard = [
            [InlineKeyboardButton("‚úÖ Terminer les arr√™ts", callback_data="stops_done")],
            [InlineKeyboardButton("‚ûï Ajouter un autre arr√™t", callback_data="stops_add")],
            [InlineKeyboardButton("‚ùå Annuler", callback_data="stops_cancel")]
        ]
        await update.message.reply_text(
            f"Arr√™t ajout√©: {new_stop}\n"
            f"Arr√™ts actuels: {', '.join(context.user_data['stops'])}\n\n"
            "Voulez-vous ajouter un autre arr√™t?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADDING_STOP
    else:
        await update.message.reply_text(
            "Cette ville n'est pas dans notre liste. Veuillez choisir une ville suisse valide."
        )
        return ADDING_STOP

async def finish_stops(update: Update, context):
    """Termine l'ajout des arr√™ts"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "stops_done":
        keyboard = [[
            InlineKeyboardButton("Confirmer", callback_data="confirm_trip"),
            InlineKeyboardButton("Annuler", callback_data="cancel_trip")
        ]]
        await query.message.edit_text(
            "R√©sum√© du trajet:\n"
            f"De: {context.user_data['departure']}\n"
            f"√Ä: {context.user_data['arrival']}\n"
            f"Arr√™ts: {', '.join(context.user_data['stops'])}\n"
            f"Date: {context.user_data['date']}\n"
            f"Places: {context.user_data['seats']}\n"
            f"Prix: {context.user_data['price']} CHF\n\n"
            "Confirmez-vous ces informations?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CONFIRM
    elif query.data == "stops_add":
        await query.message.edit_text("Entrez le nom de la ville pour l'arr√™t suivant:")
        return ADDING_STOP
    else:  # stops_cancel
        return await cancel(update, context)

async def add_meeting_point(update: Update, context):
    """Ajoute un point de rendez-vous pr√©cis"""
    keyboard = [
        [InlineKeyboardButton("üìç Partager ma position", callback_data="share_location")],
        [InlineKeyboardButton("‚úèÔ∏è D√©crire le lieu", callback_data="describe_location")]
    ]
    await update.message.reply_text(
        "O√π exactement retrouverez-vous les passagers?\n"
        "Choisissez une option:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MEETING_POINT

async def handle_trip_details(update: Update, context):
    """G√®re les d√©tails suppl√©mentaires du trajet"""
    keyboard = [
        [
            InlineKeyboardButton("üîÑ Trajet r√©gulier", callback_data="recurring"),
            InlineKeyboardButton("‚Ü©Ô∏è Aller-retour", callback_data="round_trip")
        ],
        [
            InlineKeyboardButton("‚è∞ D√©lai r√©servation", callback_data="booking_deadline"),
            InlineKeyboardButton("üí∫ Si√®ges sp√©cifiques", callback_data="seat_selection")
        ]
    ]
    await update.message.reply_text(
        "Options suppl√©mentaires:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_other_city(update: Update, context):
    """G√®re le choix d'une ville non list√©e"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üèôÔ∏è Entrez le nom de la ville:\n"
        "Par exemple: Bulle, Bienne, etc."
    )
    return DEPARTURE

async def handle_date(update: Update, context):
    """G√®re l'entr√©e de la date"""
    try:
        date_str = update.message.text
        if not validate_date(date_str):
            await update.message.reply_text(
                "‚ùå Format invalide! Utilisez le format: JJ/MM/AAAA HH:MM\n"
                "Par exemple: 25/04/2024 14:30"
            )
            return DATE
        
        context.user_data['date'] = date_str
        await update.message.reply_text(
            "Combien de places disponibles? (1-8)"
        )
        return SEATS

    except Exception as e:
        print(f"Error in handle_date: {e}")
        await update.message.reply_text("Une erreur est survenue. Utilisez /creer pour recommencer.")
        return ConversationHandler.END

async def handle_seats(update: Update, context):
    """G√®re l'entr√©e du nombre de places"""
    try:
        seats = update.message.text
        if not validate_seats(seats):
            await update.message.reply_text("‚ùå Nombre invalide! Choisissez entre 1 et 8 places.")
            return SEATS
        
        context.user_data['seats'] = seats
        await update.message.reply_text(
            "Quel est le prix par place en CHF?"
        )
        return PRICE

    except Exception as e:
        print(f"Error in handle_seats: {e}")
        await update.message.reply_text("Une erreur est survenue.")
        return ConversationHandler.END

async def handle_price(update: Update, context):
    """G√®re l'entr√©e du prix"""
    try:
        price = update.message.text
        if not validate_price(price):
            await update.message.reply_text("‚ùå Prix invalide! Le prix doit √™tre entre 1 et 1000 CHF.")
            return PRICE
        
        context.user_data['price'] = price
        
        # Afficher le r√©sum√©
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ Confirmer", callback_data="confirm_trip"),
                InlineKeyboardButton("‚ùå Annuler", callback_data="cancel_trip")
            ]
        ]
        
        await update.message.reply_text(
            "üìã R√©sum√© du trajet:\n\n"
            f"üöó De: {context.user_data['departure']}\n"
            f"üèÅ √Ä: {context.user_data['arrival']}\n"
            f"üìÖ Date: {context.user_data['date']}\n"
            f"üí∫ Places: {context.user_data['seats']}\n"
            f"üí∞ Prix: {context.user_data['price']} CHF\n\n"
            "Tout est correct?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CONFIRM

    except Exception as e:
        print(f"Error in handle_price: {e}")
        await update.message.reply_text("Une erreur est survenue.")
        return ConversationHandler.END

def get_popular_destinations():
    """Retourne une liste des destinations populaires"""
    # √Ä impl√©menter : r√©cup√©rer les destinations les plus fr√©quentes
    return [
        {"name": "Gen√®ve", "zip": "1200", "canton": "GE"},
        {"name": "Lausanne", "zip": "1000", "canton": "VD"},
        {"name": "Berne", "zip": "3000", "canton": "BE"},
        {"name": "Z√ºrich", "zip": "8000", "canton": "ZH"},
        {"name": "B√¢le", "zip": "4000", "canton": "BS"}
    ]

async def start_trip(update: Update, context):
    """D√©marre le processus de cr√©ation d'un trajet"""
    return await handle_trip_type(update, context)

def register(application):
    """Enregistre les handlers"""
    create_handler = ConversationHandler(
        entry_points=[
            CommandHandler('creer', create_trip),
            CallbackQueryHandler(create_trip, pattern='^create_trip$')
        ],
        states={
            TRIP_TYPE: [
                CallbackQueryHandler(handle_trip_type, pattern='^trip_'),
            ],
            DEPARTURE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_departure),
                CallbackQueryHandler(handle_departure, pattern='^dep_|^other_city$')
            ],
            ARRIVAL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_arrival),
                CallbackQueryHandler(handle_arrival, pattern='^arr_|^other_arrival$')
            ],
            DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date)
            ],
            SEATS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_seats)
            ],
            PRICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_price)
            ],
            CONFIRM: [
                CallbackQueryHandler(confirm, pattern='^confirm_trip$'),
                CallbackQueryHandler(cancel, pattern='^cancel_trip$')
            ],
            ENTERING_DEPARTURE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_departure),
                CallbackQueryHandler(handle_departure, pattern='^from_|^advanced_search$')
            ],
            ENTERING_ARRIVAL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_arrival),
                CallbackQueryHandler(handle_arrival, pattern='^to_|^other_destination$')
            ]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CallbackQueryHandler(cancel, pattern='^cancel_trip$')
        ],
        name="create_trip_handler",  # Ajout d'un nom unique pour faciliter le debug
        allow_reentry=True  # Permettre de rentrer √† nouveau dans la conversation
    )

    search_handler = ConversationHandler(
        entry_points=[
            CommandHandler('chercher', search_trip),
            CallbackQueryHandler(search_trip, pattern='^search_trip$')
        ],
        states={
            ENTERING_DEPARTURE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_departure),
                CallbackQueryHandler(handle_departure, pattern='^from_|^advanced_search$')
            ],
            ENTERING_ARRIVAL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_arrival),
                CallbackQueryHandler(handle_arrival, pattern='^to_|^other_destination$')
            ],
            DEPARTURE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_departure),
                CallbackQueryHandler(handle_departure, pattern='^dep_|^other_city$')
            ],
            ARRIVAL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_arrival),
                CallbackQueryHandler(handle_arrival, pattern='^arr_|^other_arrival$')
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        name="search_handler",  # Ajout d'un nom unique pour faciliter le debug
        allow_reentry=True  # Permettre de rentrer √† nouveau dans la conversation
    )

    # Handlers pour les commandes de base
    application.add_handler(create_handler)
    application.add_handler(search_handler)
    application.add_handler(CommandHandler("mes_trajets", list_my_trips))
    application.add_handler(CommandHandler("start", start_command))

async def start_command(update: Update, context: CallbackContext):
    """Commande /start"""
    keyboard = [
        [
            InlineKeyboardButton("üöó Cr√©er un trajet", callback_data="create_trip"),
            InlineKeyboardButton("üîç Chercher un trajet", callback_data="search_trip")
        ],
        [
            InlineKeyboardButton("üìã Mes trajets", callback_data="my_trips")
        ]
    ]
    
    await update.message.reply_text(
        "üëã Bienvenue sur CovoiturageSuisse!\n\n"
        "Que souhaitez-vous faire?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
