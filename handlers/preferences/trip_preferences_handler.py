#!/usr/bin/env python
# filepath: /Users/margaux/CovoiturageSuisse/handlers/preferences/trip_preferences_handler.py
"""
Handler pour les pr√©f√©rences de trajet.
Permet aux utilisateurs de d√©finir leurs pr√©f√©rences pour un trajet.
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler, CallbackQueryHandler

logger = logging.getLogger(__name__)

# D√©finir les pr√©f√©rences possibles
PREFERENCES = {
    "smoking": {
        "name": "Fumeur",
        "options": [
            {"id": "no_smoking", "label": "üö≠ Non-fumeur"},
            {"id": "smoking_outside", "label": "üö¨ Pauses cigarette"},
            {"id": "smoking_allowed", "label": "üö¨ Fumeur autoris√©"}
        ]
    },
    "music": {
        "name": "Musique",
        "options": [
            {"id": "no_music", "label": "üîá Pas de musique"},
            {"id": "music_low", "label": "üîà Musique douce"},
            {"id": "music_ok", "label": "üîä Musique ok"}
        ]
    },
    "talk_preference": {
        "name": "Conversation",
        "options": [
            {"id": "quiet", "label": "üò∂ Je pr√©f√®re le silence"},
            {"id": "depends", "label": "üòê Selon l'humeur"},
            {"id": "chatty", "label": "üòÉ J'aime discuter"}
        ]
    },
    "pets_allowed": {
        "name": "Animaux",
        "options": [
            {"id": "no_pets", "label": "üêæ Pas d'animaux"},
            {"id": "small_pets", "label": "üê± Petits animaux ok"},
            {"id": "all_pets", "label": "üêï Tous animaux ok"}
        ]
    },
    "luggage_size": {
        "name": "Bagages",
        "options": [
            {"id": "small", "label": "üëú Petit sac"},
            {"id": "medium", "label": "üéí Valise moyenne"},
            {"id": "large", "label": "üß≥ Grosse valise"}
        ]
    }
}

async def show_preferences_menu(update: Update, context: CallbackContext):
    """Affiche le menu des pr√©f√©rences de trajet"""
    query = update.callback_query
    if query:
        await query.answer()
    
    # Cr√©er les boutons pour chaque cat√©gorie de pr√©f√©rence
    keyboard = []
    for pref_id, pref_data in PREFERENCES.items():
        # V√©rifier si cette pr√©f√©rence est d√©j√† d√©finie
        current_value = context.user_data.get('trip_preferences', {}).get(pref_id)
        current_label = ""
        
        if current_value:
            for option in pref_data["options"]:
                if option["id"] == current_value:
                    current_label = f": {option['label'].split(' ', 1)[0]}"
                    break
        
        keyboard.append([
            InlineKeyboardButton(
                f"{pref_data['name']}{current_label}", 
                callback_data=f"pref:{pref_id}"
            )
        ])
    
    # Boutons de sauvegarde et d'annulation
    keyboard.append([
        InlineKeyboardButton("‚úÖ Enregistrer", callback_data="pref:save"),
        InlineKeyboardButton("‚ùå Annuler", callback_data="pref:cancel")
    ])
    
    # Afficher le message avec les boutons
    message_text = (
        "üîß *Pr√©f√©rences pour ce trajet*\n\n"
        "Ces pr√©f√©rences seront visibles par les autres utilisateurs.\n"
        "S√©lectionnez une option dans chaque cat√©gorie:"
    )
    
    if query:
        await query.edit_message_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    
    return "CHOOSING_PREFERENCE"

async def show_preference_options(update: Update, context: CallbackContext):
    """Affiche les options pour une pr√©f√©rence sp√©cifique"""
    query = update.callback_query
    await query.answer()
    
    # R√©cup√©rer l'ID de la pr√©f√©rence
    _, pref_id = query.data.split(':', 1)
    
    # V√©rifier si la pr√©f√©rence existe
    if pref_id not in PREFERENCES:
        await query.edit_message_text("‚ùå Pr√©f√©rence non valide.")
        return "CHOOSING_PREFERENCE"
    
    # R√©cup√©rer les donn√©es de la pr√©f√©rence
    pref_data = PREFERENCES[pref_id]
    
    # Cr√©er les boutons pour chaque option
    keyboard = []
    for option in pref_data["options"]:
        keyboard.append([
            InlineKeyboardButton(
                option["label"], 
                callback_data=f"option:{pref_id}:{option['id']}"
            )
        ])
    
    # Bouton pour revenir au menu des pr√©f√©rences
    keyboard.append([
        InlineKeyboardButton("üîô Retour", callback_data="option:back")
    ])
    
    # Afficher le message avec les options
    await query.edit_message_text(
        f"üîß {pref_data['name']}\n\n"
        f"Choisissez votre pr√©f√©rence:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return "SELECTING_OPTION"

async def handle_option_selection(update: Update, context: CallbackContext):
    """G√®re la s√©lection d'une option de pr√©f√©rence"""
    query = update.callback_query
    await query.answer()
    
    # R√©cup√©rer les donn√©es du callback
    parts = query.data.split(':', 2)
    
    if len(parts) == 2 and parts[1] == "back":
        # L'utilisateur veut revenir au menu des pr√©f√©rences
        return await show_preferences_menu(update, context)
    
    if len(parts) != 3:
        # Format de donn√©es invalide
        await query.edit_message_text("‚ùå Option non valide.")
        return "CHOOSING_PREFERENCE"
    
    _, pref_id, option_id = parts
    
    # Initialiser le dictionnaire des pr√©f√©rences si n√©cessaire
    if 'trip_preferences' not in context.user_data:
        context.user_data['trip_preferences'] = {}
    
    # Sauvegarder l'option s√©lectionn√©e
    context.user_data['trip_preferences'][pref_id] = option_id
    
    # Revenir au menu des pr√©f√©rences
    return await show_preferences_menu(update, context)

async def handle_preferences_action(update: Update, context: CallbackContext, next_state=None):
    """G√®re les actions de sauvegarde ou d'annulation des pr√©f√©rences"""
    query = update.callback_query
    await query.answer()
    
    # R√©cup√©rer l'action
    _, action = query.data.split(':', 1)
    
    if action == "save":
        # Sauvegarder les pr√©f√©rences dans la base de donn√©es
        preferences = context.user_data.get('trip_preferences', {})
        
        # Message de confirmation
        pref_text = "\n".join([
            f"‚úì {PREFERENCES[pref_id]['name']}: {next(option['label'] for option in PREFERENCES[pref_id]['options'] if option['id'] == option_id)}"
            for pref_id, option_id in preferences.items()
        ])
        
        await query.edit_message_text(
            f"‚úÖ *Pr√©f√©rences enregistr√©es*\n\n{pref_text}",
            parse_mode="Markdown"
        )
        
        # Passer √† l'√©tat suivant
        return next_state
    
    elif action == "cancel":
        # Annuler les modifications
        await query.edit_message_text("‚ùå Modification des pr√©f√©rences annul√©e.")
        
        # Si next_state est fourni, y retourner, sinon retourner √† "CANCEL"
        return next_state if next_state else "CANCEL"
    
    else:
        # Action non reconnue
        await query.edit_message_text("‚ùå Action non valide.")
        return "CANCEL"

# Ces fonctions peuvent √™tre r√©f√©renc√©es dans vos ConversationHandler
preference_handlers = {
    "CHOOSING_PREFERENCE": [
        CallbackQueryHandler(show_preference_options, pattern=r"^pref:[a-z_]+$"),
        CallbackQueryHandler(
            lambda u, c: handle_preferences_action(u, c, "NEXT_STATE"), 
            pattern=r"^pref:(save|cancel)$"
        )
    ],
    "SELECTING_OPTION": [
        CallbackQueryHandler(handle_option_selection, pattern=r"^option:.+$")
    ]
}

def register(application):
    """Enregistre les handlers pour les pr√©f√©rences de trajet"""
    logger.info("Enregistrement des handlers de pr√©f√©rences de trajet")
    
    # Si vous avez des handlers sp√©cifiques √† enregistrer en dehors des ConversationHandlers, faites-le ici
    pass
