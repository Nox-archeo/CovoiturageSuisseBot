#!/usr/bin/env python
# filepath: /Users/margaux/CovoiturageSuisse/handlers/create_trip_handler_fixed.py
import logging
import json
import calendar
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    CallbackContext,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
from database.models import Trip, User
from database import get_db
from utils.validators import validate_date, validate_price, validate_seats
from utils.swiss_cities import find_locality, format_locality_result, load_localities as load_all_localities
from utils.date_picker import (
    start_date_selection, handle_calendar_navigation, 
    handle_day_selection, handle_time_selection, handle_minute_selection,
    handle_flex_time_selection, handle_datetime_action,
    CALENDAR_NAVIGATION_PATTERN, CALENDAR_DAY_SELECTION_PATTERN, 
    CALENDAR_CANCEL_PATTERN, TIME_SELECTION_PATTERN, TIME_BACK_PATTERN, TIME_CANCEL_PATTERN,
    MINUTE_SELECTION_PATTERN, MINUTE_BACK_PATTERN, MINUTE_CANCEL_PATTERN,
    FLEX_TIME_PATTERN, DATETIME_ACTION_PATTERN
)
import os
import json
import logging
from geopy.distance import geodesic

# Configuration du logger
logger = logging.getLogger(__name__)

# √âtats de conversation pour la cr√©ation de trajet
(
    CREATE_TRIP_TYPE,
    CREATE_TRIP_OPTIONS,
    CREATE_DEPARTURE,
    CREATE_ARRIVAL,
    CREATE_DATE,
    CREATE_SEATS,
    CREATE_PRICE,
    CREATE_CONFIRM,
    CREATE_CALENDAR, 
    CREATE_TIME,     
    CREATE_MINUTE,   
    CREATE_CONFIRM_DATETIME,
    FLEX_HOUR,
    HOUR,  # √âtat pour la saisie de l'heure apr√®s la date
    # Nouveaux √©tats pour trajets r√©guliers
    REGULAR_DAYS_SELECTION,
    REGULAR_CALENDAR_SELECTION,
    REGULAR_TIME_TYPE,  # Nouveau : choisir heure unique ou ind√©pendante
    # Nouveaux √©tats pour trajets aller-retour
    RETURN_DATE,  # S√©lection de la date de retour
    RETURN_TIME,  # S√©lection de l'heure de retour
    RETURN_CONFIRM_DATETIME  # Confirmation de la date/heure de retour
) = range(20)

# --- UTILS GPS pour calcul automatique du prix ---
CITIES_COORDS_PATH = os.path.join(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
    'src', 'bot', 'data', 'cities.json'
)
def load_city_coords():
    with open(CITIES_COORDS_PATH, 'r', encoding='utf-8') as f:
        data = json.load(f)
    return { (c['name'], c.get('npa')): (c.get('lat'), c.get('lon')) for c in data['cities'] if 'lat' in c and 'lon' in c }

CITY_COORDS = load_city_coords()

def get_coords(city):
    name = city.get('name')
    npa = city.get('zip') or city.get('npa')
    # Recherche stricte puis souple
    return CITY_COORDS.get((name, npa)) or next((v for (n, z), v in CITY_COORDS.items() if n == name), (None, None))

def compute_price_auto(dep, arr):
    """Calcule automatiquement le prix et la distance entre deux villes"""
    from utils.swiss_cities import find_locality
    from utils.route_distance import get_route_distance_km
    
    # Rechercher les coordonn√©es des villes
    dep_results = find_locality(dep)
    arr_results = find_locality(arr)
    
    if not dep_results or not arr_results:
        return None, None
    
    dep_data = dep_results[0]
    arr_data = arr_results[0]
    
    # Calculer la distance avec notre nouveau syst√®me
    distance = get_route_distance_km(
        (dep_data['lat'], dep_data['lon']),
        (arr_data['lat'], arr_data['lon']),
        dep, arr
    )
    
    if not distance:
        return None, None
    
    # Bar√®me de prix
    if 1 <= distance < 25:
        price = distance * 0.75
    elif 25 <= distance <= 40:
        price = distance * 0.5
    elif distance > 40:
        price = distance * 0.25
    else:
        price = 0
    
    return round(price, 2), round(distance, 1)

async def handle_hour_input(update: Update, context: CallbackContext):
    """G√®re l'entr√©e manuelle de l'heure du trajet."""
    user_input = update.message.text.strip()
    
    try:
        # V√©rifier si l'entr√©e contient des heures et minutes (format HH:MM)
        if ":" in user_input:
            hour_str, minute_str = user_input.split(":")
            hour = int(hour_str)
            minute = int(minute_str)
            
            if not (0 <= hour <= 23 and 0 <= minute <= 59):
                await update.message.reply_text("‚ö†Ô∏è Format d'heure invalide. Veuillez entrer une heure valide (ex: 13:30)")
                return HOUR
        else:
            # Si seulement l'heure est fournie
            hour = int(user_input)
            minute = 0
            
            if not (0 <= hour <= 23):
                await update.message.reply_text("‚ö†Ô∏è Format d'heure invalide. Veuillez entrer une heure valide (0-23)")
                return HOUR
        
        # R√©cup√©rer la date pr√©c√©demment s√©lectionn√©e
        selected_date = context.user_data.get('selected_date')
        if not selected_date:
            await update.message.reply_text("‚ùå Erreur: Veuillez d'abord s√©lectionner une date.")
            return CREATE_CALENDAR
        
        # Cr√©er l'objet datetime complet
        selected_datetime = selected_date.replace(hour=hour, minute=minute)
        context.user_data['selected_datetime'] = selected_datetime
        context.user_data['date'] = selected_datetime.strftime('%d/%m/%Y %H:%M')
        context.user_data['datetime_obj'] = selected_datetime
        
        # Passer directement √† l'√©tape des si√®ges
        departure = context.user_data.get('departure', {})
        arrival = context.user_data.get('arrival', {})
        departure_display = departure.get('name', str(departure)) if departure else 'N/A'
        arrival_display = arrival.get('name', str(arrival)) if arrival else 'N/A'
        
        # Adapter le message selon le r√¥le
        trip_role = context.user_data.get('trip_type', 'driver')
        if trip_role == 'passenger':
            seats_message = "√âtape 6Ô∏è‚É£ - Combien de places voulez-vous r√©server? (1-4)"
        else:
            seats_message = "√âtape 6Ô∏è‚É£ - Combien de places disponibles? (1-8)"
        
        await update.message.reply_text(
            f"üìÖ Date et heure s√©lectionn√©es: {selected_datetime.strftime('%d/%m/%Y √† %H:%M')}\n\n"
            f"R√©capitulatif:\n"
            f"De: {departure_display}\n"
            f"√Ä: {arrival_display}\n\n"
            f"{seats_message}"
        )
        
        return CREATE_SEATS
        
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è Format d'heure invalide. Veuillez entrer une heure au format HH:MM (ex: 13:30)")
        return HOUR

async def handle_manual_time_input(update: Update, context: CallbackContext):
    """G√®re la saisie manuelle de l'heure."""
    time_text = update.message.text.strip()
    try:
        hour, minute = map(int, time_text.split(":"))
        if 0 <= hour <= 23 and 0 <= minute <= 59:
            selected_date = context.user_data.get('selected_date', datetime.now())
            selected_datetime = selected_date.replace(hour=hour, minute=minute)
            context.user_data['selected_datetime'] = selected_datetime
            await update.message.reply_text(
                f"Heure s√©lectionn√©e: {hour:02d}:{minute:02d}\n"
                f"Date et heure: {selected_datetime.strftime('%d/%m/%Y √† %H:%M')}"
            )
            return CREATE_SEATS
        else:
            await update.message.reply_text("Heure invalide. Veuillez entrer une heure entre 00:00 et 23:59.")
            return CREATE_TIME
    except Exception:
        await update.message.reply_text("Format d'heure invalide. Utilisez le format HH:MM (ex: 13:30).")
        return CREATE_TIME

async def handle_minute_selection(update: Update, context: CallbackContext):
    """G√®re la s√©lection des minutes."""
    query = update.callback_query
    await query.answer()
    logger.info(f"[MINUTE] Callback re√ßu: {query.data}")
    
    if query.data.startswith("create_minute:"):
        # Format create_minute:hour:minute
        parts = query.data.split(":")
        if len(parts) == 3:
            hour = int(parts[1])
            minute = int(parts[2])
        else:
            logger.error(f"[MINUTE] Format callback invalide: {query.data}")
            minute = 0
            hour = context.user_data.get('selected_hour', 0)
    else:
        # Ancien format minute:minute
        minute = int(query.data.split(":")[1])
        hour = context.user_data.get('selected_hour', 0)
    
    # V√©rifier si c'est un trajet r√©gulier
    regular_time_type = context.user_data.get('regular_time_type')
    regular_dates = context.user_data.get('regular_dates', [])
    
    if regular_time_type and regular_dates:
        # Trajet r√©gulier
        departure = context.user_data.get('departure', {})
        arrival = context.user_data.get('arrival', {})
        departure_display = departure.get('name', str(departure)) if departure else 'N/A'
        arrival_display = arrival.get('name', str(arrival)) if arrival else 'N/A'
        
        if regular_time_type == 'same':
            # M√™me horaire pour toutes les dates
            time_str = f"{hour:02d}:{minute:02d}"
            
            # Cr√©er les datetime objects pour toutes les dates
            context.user_data['regular_times'] = {}
            for date_str in regular_dates:
                date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                full_datetime = date_obj.replace(hour=hour, minute=minute)
                context.user_data['regular_times'][date_str] = full_datetime.strftime('%d/%m/%Y %H:%M')
            
            # Adapter le message selon le r√¥le
            trip_role = context.user_data.get('trip_type', 'driver')
            if trip_role == 'passenger':
                seats_message = "√âtape 6Ô∏è‚É£ - Combien de places voulez-vous r√©server? (1-4)"
            else:
                seats_message = "√âtape 6Ô∏è‚É£ - Combien de places disponibles? (1-8)"
            
            await query.edit_message_text(
                f"‚úÖ **Horaire appliqu√© √† tous les trajets**\n\n"
                f"De: {departure_display}\n"
                f"√Ä: {arrival_display}\n"
                f"‚è∞ Heure: {time_str}\n"
                f"üìä {len(regular_dates)} trajet{'s' if len(regular_dates) > 1 else ''}\n\n"
                f"{seats_message}"
            )
            
            return CREATE_SEATS
            
        elif regular_time_type == 'individual':
            # Horaires individuels - sauvegarder pour la date actuelle
            current_date = context.user_data.get('current_regular_date')
            current_index = context.user_data.get('current_date_index', 0)
            
            if not context.user_data.get('regular_times'):
                context.user_data['regular_times'] = {}
            
            # Sauvegarder l'horaire pour cette date
            date_obj = datetime.strptime(current_date, '%Y-%m-%d')
            full_datetime = date_obj.replace(hour=hour, minute=minute)
            context.user_data['regular_times'][current_date] = full_datetime.strftime('%d/%m/%Y %H:%M')
            
            # V√©rifier s'il y a d'autres dates
            next_index = current_index + 1
            if next_index < len(regular_dates):
                # Passer √† la date suivante
                next_date = regular_dates[next_index]
                context.user_data['current_regular_date'] = next_date
                context.user_data['current_date_index'] = next_index
                
                date_display = datetime.strptime(next_date, '%Y-%m-%d').strftime('%A %d %B %Y')
                
                message_text = (
                    f"‚è∞ **Horaires individuels**\n\n"
                    f"De: {departure_display}\n"
                    f"√Ä: {arrival_display}\n\n"
                    f"üìÖ **Date {next_index + 1}/{len(regular_dates)}:** {date_display}\n\n"
                    "Choisissez l'heure de d√©part pour cette date:"
                )
                
                # Afficher la s√©lection d'heure pour la date suivante
                hours_keyboard = []
                for hour_opt in range(6, 23):  # 6h √† 22h
                    hours_keyboard.append([InlineKeyboardButton(f"{hour_opt:02d}:00", callback_data=f"create_hour:{hour_opt}")])
                
                await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(hours_keyboard))
                return CREATE_TIME
            else:
                # Toutes les dates ont √©t√© configur√©es - aller aux si√®ges
                # Adapter le message selon le r√¥le
                trip_role = context.user_data.get('trip_type', 'driver')
                if trip_role == 'passenger':
                    seats_message = "√âtape 6Ô∏è‚É£ - Combien de places voulez-vous r√©server? (1-4)"
                else:
                    seats_message = "√âtape 6Ô∏è‚É£ - Combien de places disponibles? (1-8)"
                
                await query.edit_message_text(
                    f"‚úÖ **Tous les horaires configur√©s**\n\n"
                    f"De: {departure_display}\n"
                    f"√Ä: {arrival_display}\n"
                    f"üìä {len(regular_dates)} trajet{'s' if len(regular_dates) > 1 else ''} avec horaires individuels\n\n"
                    f"{seats_message}"
                )
                
                return CREATE_SEATS
    else:
        # Trajet simple - comportement normal
        selected_date = context.user_data.get('selected_date', datetime.now())
        selected_datetime = selected_date.replace(hour=hour, minute=minute)
        context.user_data['selected_datetime'] = selected_datetime
        
        # DEBUG: Ajouter des logs pour diagnostiquer le probl√®me aller-retour
        is_selecting_return = context.user_data.get('selecting_return', False)
        trip_options = context.user_data.get('trip_options', {})
        is_round_trip = trip_options.get('round_trip', False)
        logger.debug(f"[MINUTE_SELECTION] is_selecting_return: {is_selecting_return}")
        logger.debug(f"[MINUTE_SELECTION] is_round_trip: {is_round_trip}")
        logger.debug(f"[MINUTE_SELECTION] user_data keys: {list(context.user_data.keys())}")
        
        # V√©rifier si nous sommes dans un processus de s√©lection de retour
        if is_selecting_return:
            logger.debug("[MINUTE_SELECTION] IMPORTANT - Mode retour d√©tect√©, NE PAS √©craser datetime_obj")
            # C'est la s√©lection de l'heure de retour - nettoyer le flag et appeler le handler de retour
            context.user_data['selecting_return'] = False
            logger.debug("[MINUTE_SELECTION] Redirection vers handle_return_date_confirmed")
            return await handle_return_date_confirmed(update, context)
        
        # SEULEMENT pour les trajets simples : stocker dans datetime_obj
        context.user_data['date'] = selected_datetime.strftime('%d/%m/%Y %H:%M')
        context.user_data['datetime_obj'] = selected_datetime
        logger.debug(f"[MINUTE_SELECTION] Trajet simple - datetime_obj stock√©: {selected_datetime}")
        
        # R√©cup√©ration des donn√©es de trajet pour le r√©capitulatif
        departure = context.user_data.get('departure', {})
        arrival = context.user_data.get('arrival', {})
        departure_display = departure.get('name', str(departure)) if departure else 'N/A'
        arrival_display = arrival.get('name', str(arrival)) if arrival else 'N/A'
        
        # Adapter le message selon le r√¥le
        trip_role = context.user_data.get('trip_type', 'driver')
        if trip_role == 'passenger':
            seats_message = "√âtape 6Ô∏è‚É£ - Combien de places voulez-vous r√©server? (1-4)"
        else:
            seats_message = "√âtape 6Ô∏è‚É£ - Combien de places disponibles? (1-8)"
        
        await query.edit_message_text(
            f"üìÖ Date et heure s√©lectionn√©es: {selected_datetime.strftime('%d/%m/%Y √† %H:%M')}\n\n"
            f"R√©capitulatif:\n"
            f"De: {departure_display}\n"
            f"√Ä: {arrival_display}\n\n"
            f"{seats_message}"
        )
        
        return CREATE_SEATS

# Charger les villes au d√©marrage
def load_cities_list():
    """Charge les villes depuis swiss_localities.json pour les suggestions."""
    try:
        localities = load_all_localities() # from utils.swiss_cities
        if localities:
            logger.info(f"Charg√© {len(localities)} localit√©s pour create_trip_handler")
            return sorted(list(localities.keys())) 
        else:
            logger.warning("Aucune localit√© trouv√©e dans create_trip_handler, utilisation de la liste par d√©faut")
            # Fallback list
            return sorted(["Z√ºrich", "Gen√®ve", "B√¢le", "Lausanne", "Berne", "Lucerne", "Fribourg", "Neuch√¢tel", "Sion"])
    except Exception as e:
        logger.error(f"Erreur chargement des localit√©s dans create_trip_handler: {e}")
        # Fallback list
        return sorted(["Z√ºrich", "Gen√®ve", "B√¢le", "Lausanne", "Berne", "Lucerne", "Fribourg", "Neuch√¢tel", "Sion"])

SWISS_CITIES_SUGGESTIONS = load_cities_list()

async def start_create_trip(update: Update, context: CallbackContext):
    """Lance le processus de cr√©ation de trajet."""
    logger.info(f"üöÄ DEBUG - start_create_trip appel√©. Update type: {type(update)}")
    if update.callback_query:
        logger.info(f"üöÄ DEBUG - Callback data: {update.callback_query.data}")
        logger.info(f"üöÄ DEBUG - MESSAGE: Appel√© par CALLBACK - ConversationHandler actif")
    else:
        logger.info(f"üöÄ DEBUG - Pas de callback, c'est un message")
        logger.info(f"üöÄ DEBUG - MESSAGE: Appel√© par COMMANDE - ConversationHandler peut ne pas √™tre actif")
    logger.info(f"üöÄ DEBUG - User ID: {update.effective_user.id}")
    
    # V√©rifier si l'utilisateur a un profil
    user_id = update.effective_user.id
    db = get_db()
    user = db.query(User).filter(User.telegram_id == user_id).first()
    
    if not user:
        # Utilisateur sans profil - rediriger vers la cr√©ation
        keyboard = [
            [InlineKeyboardButton("‚úÖ Cr√©er mon profil", callback_data="menu:create_profile")],
            [InlineKeyboardButton("üîô Retour", callback_data="menu:back_to_main")]
        ]
        
        text = (
            "‚ùå *Profil requis*\n\n"
            "Vous devez cr√©er un profil avant de pouvoir cr√©er un trajet."
        )
        
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        db.close()
        return ConversationHandler.END
    
    db.close()
    
    context.user_data.clear()
    context.user_data['mode'] = 'create'
    context.user_data['current_state'] = CREATE_TRIP_TYPE # For fallback
    logger.info("Mode r√©gl√© sur 'create' dans start_create_trip")
    
    keyboard = [
        [
            InlineKeyboardButton("üöó Je propose un trajet (conducteur)", callback_data="create_trip_type:driver"),
        ],
        [
            InlineKeyboardButton("üßç Je cherche un trajet (passager)", callback_data="create_trip_type:passenger")
        ],
        [InlineKeyboardButton("‚ùå Annuler", callback_data="create_trip:cancel")]
    ]
    
    message_text = (
        "üöó *Cr√©ation d'un nouveau trajet*\n\n"
        "√âtape 1Ô∏è‚É£ - Choisissez votre r√¥le :\n\n"
        "üöó **Conducteur** : Vous proposez votre v√©hicule\n"
        "üßç **Passager** : Vous recherchez un conducteur\n\n"
        "S√©lectionnez votre r√¥le :"
    )
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    logger.info("‚úÖ Boutons Conducteur/Passager affich√©s")
    logger.info(f"üîÑ RETOUR - start_create_trip retourne l'√©tat: {CREATE_TRIP_TYPE}")
    return CREATE_TRIP_TYPE

async def handle_create_trip_type(update: Update, context: CallbackContext):
    """G√®re le choix du type de trajet (conducteur/passager)."""
    query = update.callback_query
    await query.answer()
    
    try:
        # Ajouter des logs d√©taill√©s pour d√©bugger
        logger.info(f"üîç DEBUG - Callback re√ßu: {query.data}")
        logger.info(f"üîç DEBUG - User ID: {update.effective_user.id}")
        logger.info(f"üîç DEBUG - Context user_data avant: {context.user_data}")
        
        # query.data will be "create_trip_type:driver" or "create_trip_type:passenger"
        choice = query.data.split(":")[1] 
        logger.info(f"‚úÖ Callback re√ßu dans handle_create_trip_type: {query.data}, choix: {choice}")
            
        context.user_data['trip_type'] = choice
        logger.info(f"Type de trajet (cr√©ation) enregistr√©: {choice}")
        logger.info(f"üîç DEBUG - Context user_data apr√®s: {context.user_data}")
        
        context.user_data['current_state'] = CREATE_TRIP_OPTIONS
        return await show_create_trip_options(update, context) # show_create_trip_options should return CREATE_TRIP_OPTIONS
    except Exception as e:
        logger.error(f"‚ùå Erreur dans handle_create_trip_type: {e}", exc_info=True)
        await query.message.reply_text("Une erreur s'est produite. Veuillez r√©essayer.")
        return ConversationHandler.END

async def show_create_trip_options(update: Update, context: CallbackContext):
    """Affiche les options suppl√©mentaires pour la cr√©ation de trajet."""
    logger.info(f"Entr√©e dans show_create_trip_options avec update type: {type(update)}")
    query = update.callback_query if hasattr(update, 'callback_query') else None
    
    if 'trip_options' not in context.user_data:
        context.user_data['trip_options'] = {}
    
    keyboard_options = [
        [InlineKeyboardButton(f"{'üî¥' if context.user_data['trip_options'].get('simple', False) else 'üîò'} Trajet simple", callback_data="create_trip_option:simple")],
        [InlineKeyboardButton(f"{'üî¥' if context.user_data['trip_options'].get('regular', False) else 'üîò'} Trajet r√©gulier", callback_data="create_trip_option:regular")],
        [InlineKeyboardButton(f"{'üî¥' if context.user_data['trip_options'].get('round_trip', False) else 'üîò'} Aller-retour", callback_data="create_trip_option:round_trip")]
        # Potentially "women_only" option here could be added separately with checkbox logic
    ]
    keyboard_options.append([
        InlineKeyboardButton("‚ñ∂Ô∏è Continuer", callback_data="create_trip_options:continue"),
        InlineKeyboardButton("‚ùå Annuler", callback_data="create_trip:cancel_options")
    ])
    
    role_text = "conducteur" if context.user_data.get('trip_type') == "driver" else "passager"
    
    # V√©rifier quelle option est s√©lectionn√©e pour donner du feedback
    selected_options = []
    if context.user_data['trip_options'].get('simple', False):
        selected_options.append("Trajet simple")
    if context.user_data['trip_options'].get('regular', False):
        selected_options.append("Trajet r√©gulier")
    if context.user_data['trip_options'].get('round_trip', False):
        selected_options.append("Aller-retour")
    
    selected_text = f"\n\nüéØ **S√©lectionn√©:** {', '.join(selected_options)}" if selected_options else "\n\n‚ö†Ô∏è **Aucun type de trajet s√©lectionn√©**"
    
    message_text = (
        f"üöó *Cr√©ation d'un nouveau trajet* ({role_text})\n\n"
        f"√âtape 2Ô∏è‚É£ - **Choisissez le type de trajet** (obligatoire):\n\n"
        f"üîò **Trajet simple** : Un trajet unique √† une date pr√©cise\n"
        f"üîò **Trajet r√©gulier** : Trajets r√©p√©t√©s chaque semaine\n"
        f"üîò **Aller-retour** : Trajet avec retour le m√™me jour\n\n"
        f"üìù *Cliquez sur UNE seule option pour la s√©lectionner.*{selected_text}"
    )
    
    if query:
        await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard_options), parse_mode="Markdown")
    # else if called without query (e.g. after text input, though not typical for this step)
    # await update.effective_message.reply_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard_options), parse_mode="Markdown")
    return CREATE_TRIP_OPTIONS


# --- Correction du handler d'options pour permettre la s√©lection puis la validation ---

# Correction FINALE : handler d'options qui fonctionne comme le bouton "start"
async def handle_create_trip_options(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("create_trip_option:"):
        option = query.data.split(":")[1]
        context.user_data.setdefault('trip_options', {})
        
        # Logique de s√©lection exclusive pour le type de trajet
        if option in ['simple', 'regular', 'round_trip']:
            # D√©s√©lectionner toutes les autres options de type de trajet
            context.user_data['trip_options']['simple'] = False
            context.user_data['trip_options']['regular'] = False
            context.user_data['trip_options']['round_trip'] = False
            
            # S√©lectionner uniquement l'option choisie
            context.user_data['trip_options'][option] = True
            
            logger.info(f"‚úÖ Option de trajet s√©lectionn√©e: {option}")
        else:
            # Pour les autres options (comme women_only), garder la logique de toggle
            context.user_data['trip_options'][option] = not context.user_data['trip_options'].get(option, False)
        
        return await show_create_trip_options(update, context) # Refresh options view

    elif query.data == "create_trip_options:continue":
        # V√©rifier qu'une option de type de trajet a √©t√© s√©lectionn√©e
        trip_options = context.user_data.get('trip_options', {})
        has_trip_type = (trip_options.get('simple', False) or 
                        trip_options.get('regular', False) or 
                        trip_options.get('round_trip', False))
        
        if not has_trip_type:
            # Forcer l'utilisateur √† choisir un type de trajet
            await query.answer("‚ö†Ô∏è Vous devez choisir un type de trajet (Simple, R√©gulier ou Aller-retour)", show_alert=True)
            return CREATE_TRIP_OPTIONS
        
        # V√©rifier si c'est un trajet r√©gulier
        is_regular = trip_options.get('regular', False)
        
        if is_regular:
            # Aller directement au calendrier interactif pour trajets r√©guliers
            now = datetime.now()
            context.user_data['calendar_year'] = now.year
            context.user_data['calendar_month'] = now.month
            context.user_data['selected_calendar_dates'] = set()
            context.user_data['selected_days'] = []  # Vide au d√©but
            
            # Afficher le calendrier interactif
            calendar_keyboard = create_interactive_calendar(now.year, now.month, [], set())
            
            await query.edit_message_text(
                f"üìÖ **Trajet r√©gulier - S√©lection des dates**\n\n"
                f"Cliquez directement sur les dates que vous voulez pour vos trajets :\n"
                f"‚Ä¢ Cliquez sur **L, M, M, J, V, S, D** pour s√©lectionner tous les jours de cette semaine (optionnel)\n"
                f"‚Ä¢ Ou cliquez directement sur les dates individuelles (recommand√©)\n\n"
                f"‚úÖ = S√©lectionn√©\n"
                f"‚òëÔ∏è = Disponible\n"
                f"‚ùå = Date pass√©e",
                reply_markup=calendar_keyboard,
                parse_mode="Markdown"
            )
            return REGULAR_CALENDAR_SELECTION
        else:
            # Flux normal pour trajet simple
            context.user_data['current_state'] = CREATE_DEPARTURE
            keyboard_dep = [
                [InlineKeyboardButton(city, callback_data=f"create_dep_city:{city}")] for city in SWISS_CITIES_SUGGESTIONS[:5]
            ]
            keyboard_dep.append([InlineKeyboardButton("Autre ville...", callback_data="create_dep_other")])
            keyboard_dep.append([InlineKeyboardButton("‚ùå Annuler", callback_data="create_trip:cancel_departure")])
            await query.edit_message_text("√âtape 3Ô∏è‚É£ - Choisissez votre ville de d√©part:", reply_markup=InlineKeyboardMarkup(keyboard_dep))
            return CREATE_DEPARTURE

    # Fallback or error
    return CREATE_TRIP_OPTIONS

async def handle_create_departure_city_callback(update: Update, context: CallbackContext):
    """G√®re le clic sur un bouton de ville de d√©part sugg√©r√©e ou 'Autre ville'."""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data

    if callback_data == "create_dep_other":
        await query.edit_message_text("Veuillez entrer le nom de votre ville de d√©part ou son NPA:")
        return CREATE_DEPARTURE
    elif callback_data.startswith("create_dep_city:"):
        city_name = callback_data.split(":")[1]
        context.user_data['departure'] = {'name': city_name}
        logger.info(f"Ville de d√©part s√©lectionn√©e: {city_name}")
        
        keyboard_arr = [
            [InlineKeyboardButton(city, callback_data=f"create_arr_city:{city}")] 
            for city in SWISS_CITIES_SUGGESTIONS[:5]
        ]
        keyboard_arr.append([InlineKeyboardButton("Autre ville...", callback_data="create_arr_other")])
        keyboard_arr.append([InlineKeyboardButton("‚ùå Annuler", callback_data="create_trip:cancel")])
        
        await query.edit_message_text(
            f"D√©part depuis: {city_name}\nChoisissez votre destination:",
            reply_markup=InlineKeyboardMarkup(keyboard_arr)
        )
        return CREATE_ARRIVAL

async def handle_create_departure_text(update: Update, context: CallbackContext):
    """G√®re la saisie texte pour la ville de d√©part."""
    user_input = update.message.text.strip()
    matches = find_locality(user_input)

    if matches:
        keyboard = []
        for match in matches[:5]:  # Limite √† 5 r√©sultats
            display_text = f"{match['name']} ({match['zip']})"
            callback_data = f"create_dep_loc:{match['zip']}|{match['name']}"
            keyboard.append([InlineKeyboardButton(display_text, callback_data=callback_data)])
        
        keyboard.append([InlineKeyboardButton("üîÑ R√©essayer", callback_data="create_dep_retry_text")])
        keyboard.append([InlineKeyboardButton("‚ùå Annuler", callback_data="create_trip:cancel_departure")])
        
        await update.message.reply_text(
            "üìç Voici les localit√©s trouv√©es. Choisissez votre ville de d√©part :",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            "‚ùå Ville non trouv√©e. Veuillez r√©essayer avec un autre nom ou NPA.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå Annuler", callback_data="create_trip:cancel_departure")
            ]])
        )
    return CREATE_DEPARTURE

async def handle_create_departure_loc_callback(update: Update, context: CallbackContext):
    """G√®re le clic sur une localit√© sp√©cifique apr√®s recherche texte."""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data

    if callback_data == "create_dep_retry_text":
        await query.edit_message_text("‚å®Ô∏è Veuillez entrer le nom de votre ville de d√©part ou son NPA:")
        return CREATE_DEPARTURE

    elif callback_data.startswith("create_dep_loc:"):
        try:
            # Extraction correcte des donn√©es du callback
            locality_part = callback_data.split(":")[1]
            zip_code, name = locality_part.split('|')
            context.user_data['departure'] = {'name': name, 'zip': zip_code}
            logger.info(f"Ville de d√©part confirm√©e: {name} ({zip_code})")

            # Passage √† la s√©lection de la ville d'arriv√©e
            keyboard_arr = [
                [InlineKeyboardButton(city, callback_data=f"create_arr_city:{city}")] 
                for city in SWISS_CITIES_SUGGESTIONS[:5]
            ]
            keyboard_arr.append([InlineKeyboardButton("üèôÔ∏è Autre ville...", callback_data="create_arr_other")])
            keyboard_arr.append([InlineKeyboardButton("‚ùå Annuler", callback_data="create_trip:cancel")])

            await query.edit_message_text(
                f"üåç D√©part depuis: {name}\nChoisissez votre destination:",
                reply_markup=InlineKeyboardMarkup(keyboard_arr)
            )
            return CREATE_ARRIVAL

        except Exception as e:
            logger.error(f"Erreur lors de la s√©lection de la ville de d√©part: {e}")
            await query.edit_message_text(
                "Une erreur s'est produite. Veuillez r√©essayer.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ R√©essayer", callback_data="create_dep_retry_text")
                ]])
            )
            return CREATE_DEPARTURE

    return CREATE_DEPARTURE

async def handle_create_arrival_city_callback(update: Update, context: CallbackContext):
    """G√®re le clic sur un bouton de ville d'arriv√©e."""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    departure_display = context.user_data.get('departure', {}).get('name', 'N/A')

    if callback_data == "create_arr_other":
        await query.edit_message_text(
            f"D√©part: {departure_display}\n"
            "‚å®Ô∏è Veuillez entrer le nom de votre ville d'arriv√©e ou son NPA:"
        )
        return CREATE_ARRIVAL
        
    elif callback_data.startswith("create_arr_city:"):
        city_name = callback_data.split(":")[1]
        context.user_data['arrival'] = {'name': city_name}
        logger.info(f"Ville d'arriv√©e (cr√©ation) s√©lectionn√©e: {city_name}")
        
        # V√©rifier si c'est un trajet r√©gulier qui a d√©j√† ses dates
        is_regular = context.user_data.get('trip_options', {}).get('regular', False)
        regular_dates = context.user_data.get('regular_dates')
        
        if is_regular and regular_dates:
            # Trajet r√©gulier avec dates d√©j√† s√©lectionn√©es - aller directement aux si√®ges
            departure = context.user_data.get('departure', {})
            arrival = context.user_data.get('arrival', {})
            departure_display = departure.get('name', str(departure)) if departure else 'N/A'
            arrival_display = arrival.get('name', str(arrival)) if arrival else 'N/A'
            
            dates_display = "\n".join([f"üìÖ {datetime.strptime(d, '%Y-%m-%d').strftime('%A %d %B %Y')}" for d in regular_dates[:3]])
            if len(regular_dates) > 3:
                dates_display += f"\n... et {len(regular_dates) - 3} autres dates"
            
            # Trajet r√©gulier avec dates d√©j√† s√©lectionn√©es - aller √† la s√©lection du type d'heure
            await query.edit_message_text(
                f"üïê **Gestion des horaires pour vos trajets r√©guliers**\n\n"
                f"Comment souhaitez-vous g√©rer les horaires ?\n\n"
                f"üïê **M√™me heure** : La m√™me heure pour tous vos trajets\n"
                f"‚è∞ **Horaires ind√©pendants** : Une heure diff√©rente pour chaque date",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("ÔøΩ M√™me heure pour tous", callback_data="regular_time:same")],
                    [InlineKeyboardButton("‚è∞ Horaires ind√©pendants", callback_data="regular_time:individual")],
                    [InlineKeyboardButton("‚ùå Annuler", callback_data="create_trip:cancel")]
                ]),
                parse_mode="Markdown"
            )
            return REGULAR_TIME_TYPE
        else:
            # Trajet simple - afficher le calendrier de s√©lection de date
            now = datetime.now()
            markup = await create_calendar_markup(now.year, now.month)
            await query.edit_message_text(
                "üìÖ S√©lectionnez la date du trajet:",
                reply_markup=markup
            )
            return CREATE_CALENDAR

    return CREATE_ARRIVAL

async def handle_create_arrival_text(update: Update, context: CallbackContext):
    """G√®re la saisie texte pour la ville d'arriv√©e."""
    user_input = update.message.text.strip()
    matches = find_locality(user_input)
    departure = context.user_data.get('departure', {})
    departure_display = departure.get('name', str(departure)) if departure else 'N/A'

    if matches:
        keyboard = []
        for match in matches[:5]:  # Limite √† 5 r√©sultats comme pour le d√©part
            display_text = format_locality_result(match)
            # Correction du format du callback_data pour correspondre au pattern attendu
            callback_data = f"create_arr_loc:{match['zip']}|{match['name']}"  # Pas de changement n√©cessaire
            keyboard.append([InlineKeyboardButton(display_text, callback_data=callback_data)])
        
        keyboard.append([InlineKeyboardButton("üîÑ R√©essayer", callback_data="create_arr_retry_text")])
        keyboard.append([InlineKeyboardButton("‚ùå Annuler", callback_data="create_trip:cancel")])
        
        await update.message.reply_text(
            f"D√©part: {departure_display}\n"
            "üìç Voici les localit√©s trouv√©es. Choisissez votre ville d'arriv√©e :",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            f"D√©part: {departure_display}\n"
            "‚ùå Ville non trouv√©e. Veuillez r√©essayer avec un autre nom ou NPA."
        )
    return CREATE_ARRIVAL

async def handle_create_arrival_loc_callback(update: Update, context: CallbackContext):
    """G√®re le clic sur une localit√© sp√©cifique pour l'arriv√©e."""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    departure = context.user_data.get('departure', {})
    departure_display = departure.get('name', str(departure)) if departure else 'N/A'
    
    if callback_data == "create_arr_retry_text":
        await query.edit_message_text(
            f"D√©part: {departure_display}\n"
            "‚å®Ô∏è Veuillez entrer le nom de votre ville d'arriv√©e ou son NPA:"
        )
        return CREATE_ARRIVAL

    elif callback_data.startswith("create_arr_loc:"):
        try:
            locality_part = callback_data.split(":")[1]
            zip_code, name = locality_part.split('|')
            context.user_data['arrival'] = {'name': name, 'zip': zip_code}
            logger.info(f"Ville d'arriv√©e (recherche) s√©lectionn√©e: {name} ({zip_code})")

            # V√©rifier si c'est un trajet r√©gulier qui a d√©j√† ses dates
            is_regular = context.user_data.get('trip_options', {}).get('regular', False)
            regular_dates = context.user_data.get('regular_dates')
            
            if is_regular and regular_dates:
                # Trajet r√©gulier avec dates d√©j√† s√©lectionn√©es - aller √† la s√©lection du type d'horaire
                departure = context.user_data.get('departure', {})
                arrival = context.user_data.get('arrival', {})
                departure_display = departure.get('name', str(departure)) if departure else 'N/A'
                arrival_display = arrival.get('name', str(arrival)) if arrival else 'N/A'
                
                dates_display = "\n".join([f"üìÖ {datetime.strptime(d, '%Y-%m-%d').strftime('%A %d %B %Y')}" for d in regular_dates[:3]])
                if len(regular_dates) > 3:
                    dates_display += f"\n... et {len(regular_dates) - 3} autres dates"
                
                message_text = (
                    f"‚úÖ **Trajets r√©guliers configur√©s**\n\n"
                    f"De: {departure_display}\n"
                    f"√Ä: {arrival_display}\n"
                    f"Dates:\n{dates_display}\n\n"
                    f"üìä **Total:** {len(regular_dates)} trajet{'s' if len(regular_dates) > 1 else ''}\n\n"
                    "‚è∞ Comment souhaitez-vous g√©rer les horaires ?"
                )
                
                keyboard = [
                    [InlineKeyboardButton("üïí M√™me horaire pour toutes les dates", callback_data="regular_time:same")],
                    [InlineKeyboardButton("‚è∞ Horaires individuels par date", callback_data="regular_time:individual")]
                ]
                await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard))
                return REGULAR_TIME_TYPE
            else:
                # Trajet simple - afficher le calendrier de s√©lection de date
                now = datetime.now()
                markup = await create_calendar_markup(now.year, now.month)
                await query.edit_message_text(
                    "üìÖ S√©lectionnez la date du trajet:",
                    reply_markup=markup
                )
                return CREATE_CALENDAR
            
        except Exception as e:
            logger.error(f"[ERROR] Erreur s√©lection ville: {str(e)}", exc_info=True)
            await query.edit_message_text(
                "‚ùå Une erreur s'est produite. Veuillez r√©essayer.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ R√©essayer", callback_data="create_arr_retry_text")
                ]])
            )
            return CREATE_ARRIVAL

    return CREATE_ARRIVAL

async def handle_regular_time_type(update: Update, context: CallbackContext):
    """G√®re la s√©lection du type d'horaire pour les trajets r√©guliers."""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    regular_dates = context.user_data.get('regular_dates', [])
    
    if callback_data == "regular_time:same":
        # M√™me horaire pour toutes les dates
        context.user_data['regular_time_type'] = 'same'
        
        departure = context.user_data.get('departure', {})
        arrival = context.user_data.get('arrival', {})
        departure_display = departure.get('name', str(departure)) if departure else 'N/A'
        arrival_display = arrival.get('name', str(arrival)) if arrival else 'N/A'
        
        message_text = (
            f"‚úÖ **M√™me horaire pour toutes les dates**\n\n"
            f"De: {departure_display}\n"
            f"√Ä: {arrival_display}\n"
            f"üìä {len(regular_dates)} trajet{'s' if len(regular_dates) > 1 else ''}\n\n"
            "‚è∞ Choisissez l'heure de d√©part pour tous les trajets:"
        )
        
        # Utiliser le s√©lecteur d'heure existant
        hours_keyboard = []
        for hour in range(6, 23):  # 6h √† 22h
            hours_keyboard.append([InlineKeyboardButton(f"{hour:02d}:00", callback_data=f"create_hour:{hour}")])
        
        await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(hours_keyboard))
        return CREATE_TIME
        
    elif callback_data == "regular_time:individual":
        # Horaires individuels par date
        context.user_data['regular_time_type'] = 'individual'
        context.user_data['regular_times'] = {}
        context.user_data['current_date_index'] = 0
        
        # Commencer avec la premi√®re date
        first_date = regular_dates[0]
        context.user_data['current_regular_date'] = first_date
        
        departure = context.user_data.get('departure', {})
        arrival = context.user_data.get('arrival', {})
        departure_display = departure.get('name', str(departure)) if departure else 'N/A'
        arrival_display = arrival.get('name', str(arrival)) if arrival else 'N/A'
        
        date_display = datetime.strptime(first_date, '%Y-%m-%d').strftime('%A %d %B %Y')
        
        message_text = (
            f"‚è∞ **Horaires individuels**\n\n"
            f"De: {departure_display}\n"
            f"√Ä: {arrival_display}\n\n"
            f"üìÖ **Date 1/{len(regular_dates)}:** {date_display}\n\n"
            "Choisissez l'heure de d√©part pour cette date:"
        )
        
        # Utiliser le s√©lecteur d'heure existant
        hours_keyboard = []
        for hour in range(6, 23):  # 6h √† 22h
            hours_keyboard.append([InlineKeyboardButton(f"{hour:02d}:00", callback_data=f"create_hour:{hour}")])
        
        await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(hours_keyboard))
        return CREATE_TIME
    
    return REGULAR_TIME_TYPE

async def handle_create_date_confirmed(update: Update, context: CallbackContext):
    """Appel√© apr√®s confirmation de la date et heure par le date_picker."""
    # selected_datetime devrait √™tre dans context.user_data par le date_picker
    selected_dt = context.user_data.get('selected_datetime')
    if not selected_dt:
        logger.error("selected_datetime non trouv√© dans handle_create_date_confirmed")
        await update.effective_message.reply_text("Une erreur s'est produite avec la date. Veuillez r√©essayer.")
        return CREATE_DATE

    context.user_data['date'] = selected_dt.strftime('%d/%m/%Y %H:%M')
    context.user_data['datetime_obj'] = selected_dt
    
    logger.debug(f"[DATE_CONFIRMED] Date d'aller stock√©e: {selected_dt}")
    logger.debug(f"[DATE_CONFIRMED] context.user_data['datetime_obj'] = {context.user_data['datetime_obj']}")
    
    # V√©rifier si c'est un trajet aller-retour
    trip_options = context.user_data.get('trip_options', {})
    is_round_trip = trip_options.get('round_trip', False)
    
    logger.debug(f"[DATE_CONFIRMED] is_round_trip: {is_round_trip}")
    logger.debug(f"[DATE_CONFIRMED] trip_options: {trip_options}")
    
    if is_round_trip:
        # Pour les trajets aller-retour, demander la date de retour
        logger.debug("[DATE_CONFIRMED] Redirection vers start_return_date_selection")
        logger.debug(f"[DATE_CONFIRMED] IMPORTANT - Trajet aller-retour d√©tect√© ! D√©but s√©lection retour")
        await start_return_date_selection(update, context)
        logger.debug(f"[DATE_CONFIRMED] IMPORTANT - Retour √©tat RETURN_DATE")
        return RETURN_DATE
    
    # Pour les trajets simples et r√©guliers, continuer normalement
    departure = context.user_data.get('departure', {})
    arrival = context.user_data.get('arrival', {})
    departure_display = departure.get('name', str(departure)) if departure else 'N/A'
    arrival_display = arrival.get('name', str(arrival)) if arrival else 'N/A'
    date_display = context.user_data['date']

    # Adapter le message selon le r√¥le
    trip_role = context.user_data.get('trip_type', 'driver')
    if trip_role == 'passenger':
        seats_message = "√âtape 6Ô∏è‚É£ - Combien de places voulez-vous r√©server? (1-4)"
    else:
        seats_message = "√âtape 6Ô∏è‚É£ - Combien de places disponibles? (1-8)"

    message_text = (
        f"R√©capitulatif partiel:\n"
        f"De: {departure_display}\n"
        f"√Ä: {arrival_display}\n"
        f"Date: {date_display}\n\n"
        f"{seats_message}"
    )
    if update.callback_query:
        await update.callback_query.edit_message_text(message_text)
    else:
        await update.message.reply_text(message_text)
    return CREATE_SEATS


async def handle_create_seats(update: Update, context: CallbackContext):
    """G√®re l'entr√©e du nombre de si√®ges."""
    seats_text = update.message.text
    if not validate_seats(seats_text):
        await update.message.reply_text("‚ùå Nombre de places invalide. Entrez un nombre entre 1 et 8.")
        return CREATE_SEATS
    
    context.user_data['seats'] = int(seats_text)
    trip_role = context.user_data.get('trip_type', 'driver')
    logger.info(f"Nombre de si√®ges (cr√©ation, r√¥le {trip_role}): {seats_text}")
    
    # V√âRIFICATION CRUCIALE : Pour les trajets aller-retour, v√©rifier si on a la date de retour
    trip_options = context.user_data.get('trip_options', {})
    is_round_trip = trip_options.get('round_trip', False)
    has_return_date = context.user_data.get('return_datetime_obj') is not None
    
    logger.debug(f"[SEATS] is_round_trip: {is_round_trip}, has_return_date: {has_return_date}")
    
    if is_round_trip and not has_return_date:
        # Pour les trajets aller-retour sans date de retour, aller √† la s√©lection de date de retour
        logger.debug("[SEATS] TRAJET ALLER-RETOUR sans date de retour - Redirection vers s√©lection retour")
        await start_return_date_selection(update, context)
        return RETURN_DATE
    
    # --- Calcul automatique du prix ---
    # Utiliser la fonction de calcul partag√©e
    return await handle_seats_to_price_calculation(update, context)

# --- Modification du r√©sum√© pour afficher le prix auto ---
async def handle_create_price(update: Update, context: CallbackContext, auto=False):
    # Ne pas demander de saisie, juste afficher le r√©sum√©
    dep = context.user_data.get('departure', {})
    arr = context.user_data.get('arrival', {})
    dep_display = dep.get('name', dep) if isinstance(dep, dict) else dep
    arr_display = arr.get('name', arr) if isinstance(arr, dict) else arr
    prix = context.user_data.get('price', 'N/A')
    dist = context.user_data.get('distance_km', 'N/A')
    
    # Traduction du r√¥le en fran√ßais
    trip_type = context.user_data.get('trip_type', 'N/A')
    if trip_type == 'driver':
        role_fr = "üöó Conducteur"
    elif trip_type == 'passenger':
        role_fr = "üßç Passager"
    else:
        role_fr = trip_type
    
    # V√©rification si c'est un trajet aller-retour
    is_round_trip = context.user_data.get('trip_options', {}).get('round_trip', False)
    
    # Formatage de la date/heure de d√©part
    datetime_obj = context.user_data.get('datetime_obj')
    if datetime_obj:
        date_formatted = datetime_obj.strftime('%d/%m/%Y √† %H:%M')
    else:
        # Fallback sur l'ancienne cl√© 'date' si elle existe
        date_str = context.user_data.get('date', 'N/A')
        if date_str != 'N/A':
            if hasattr(date_str, 'strftime'):
                date_formatted = date_str.strftime('%d/%m/%Y √† %H:%M')
            else:
                date_formatted = str(date_str)
        else:
            date_formatted = 'Non d√©finie'
    
    # Formatage de la date/heure de retour pour les trajets aller-retour
    return_date_formatted = None
    if is_round_trip:
        return_datetime_obj = context.user_data.get('return_datetime_obj')
        if return_datetime_obj:
            return_date_formatted = return_datetime_obj.strftime('%d/%m/%Y √† %H:%M')
    
    # Options en fran√ßais
    options = context.user_data.get('trip_options', {})
    if options.get('simple'):
        options_str = "‚úÖ Trajet simple"
    elif is_round_trip:
        options_str = "üîÑ Trajet aller-retour"
    else:
        options_str = "üìã Options avanc√©es"
    
    # Adaptation du message selon le r√¥le
    if trip_type == 'passenger':
        # CORRECTION : Pour les passagers, le prix est divis√© par le nombre de places recherch√©es
        seats = context.user_data.get('seats', 1)
        prix_par_place = round(prix / seats, 2)
        
        if is_round_trip and return_date_formatted:
            # Affichage pour trajet aller-retour passager
            summary = (
                "üéØ *R√©sum√© de votre demande de trajet aller-retour*\n\n"
                f"üë§ *R√¥le :* {role_fr}\n"
                f"‚öôÔ∏è *Type :* {options_str}\n\n"
                f"üîÑ **Trajet ALLER :**\n"
                f"üåç *D√©part :* {dep_display}\n"
                f"üèÅ *Arriv√©e :* {arr_display}\n"
                f"üìÖ *Date et heure :* {date_formatted}\n\n"
                f"üîÑ **Trajet RETOUR :**\n"
                f"üåç *D√©part :* {arr_display}\n"
                f"üèÅ *Arriv√©e :* {dep_display}\n"
                f"üìÖ *Date et heure :* {return_date_formatted}\n\n"
                f"üìè *Distance (par trajet) :* {dist} km\n"
                f"üë• *Places recherch√©es :* {seats}\n"
                f"üí∞ *Prix total (aller + retour) :* {prix * 2} CHF\n"
                f"üí∞ *Prix par place (aller + retour) :* {round((prix * 2) / seats, 2)} CHF\n\n"
                "‚ú® *Vos demandes seront visibles par les conducteurs disponibles.*\n"
                "üìû *Ils pourront vous proposer leurs services.*\n\n"
                "Confirmez-vous la publication de ces demandes ?"
            )
        else:
            # Affichage pour trajet simple passager
            summary = (
                "üéØ *R√©sum√© de votre demande de trajet*\n\n"
                f"üë§ *R√¥le :* {role_fr}\n"
                f"‚öôÔ∏è *Type :* {options_str}\n\n"
                f"üåç *D√©part :* {dep_display}\n"
                f"üèÅ *Arriv√©e :* {arr_display}\n"
                f"üìÖ *Date et heure :* {date_formatted}\n\n"
                f"üìè *Distance :* {dist} km\n"
                f"üë• *Places recherch√©es :* {seats}\n"
                f"üí∞ *Prix total du trajet :* {prix} CHF\n"
                f"üí∞ *Prix par place :* {prix_par_place} CHF (partag√© entre {seats} passagers)\n\n"
                "‚ú® *Votre demande sera visible par les conducteurs disponibles.*\n"
                "üìû *Ils pourront vous proposer leurs services.*\n\n"
                "Confirmez-vous la publication de cette demande ?"
            )
        button_text = "‚úÖ Publier ma demande !"
    else:
        if is_round_trip and return_date_formatted:
            # Affichage pour trajet aller-retour conducteur
            summary = (
                "üéØ *R√©sum√© de votre offre de trajet aller-retour*\n\n"
                f"üë§ *R√¥le :* {role_fr}\n"
                f"‚öôÔ∏è *Type :* {options_str}\n\n"
                f"üîÑ **Trajet ALLER :**\n"
                f"üåç *D√©part :* {dep_display}\n"
                f"üèÅ *Arriv√©e :* {arr_display}\n"
                f"üìÖ *Date et heure :* {date_formatted}\n\n"
                f"üîÑ **Trajet RETOUR :**\n"
                f"üåç *D√©part :* {arr_display}\n"
                f"üèÅ *Arriv√©e :* {dep_display}\n"
                f"üìÖ *Date et heure :* {return_date_formatted}\n\n"
                f"üìè *Distance (par trajet) :* {dist} km\n"
                f"üí∫ *Places disponibles :* {context.user_data.get('seats', 'N/A')}\n"
                f"üí∞ *Prix total (aller + retour) :* {prix * 2} CHF\n\n"
                f"üí° *Comment √ßa marche :*\n"
                f"‚Ä¢ Prix total fixe par trajet : {prix} CHF\n"
                f"‚Ä¢ Prix par passager = {prix} CHF √∑ nombre de passagers\n"
                f"‚Ä¢ Plus de passagers = prix moins cher pour chacun\n"
                f"‚Ä¢ Remboursement automatique si le prix diminue\n\n"
                "‚ú® *Vos trajets seront visibles par les passagers int√©ress√©s.*\n\n"
                "Confirmez-vous la cr√©ation de ces trajets ?"
            )
        else:
            # Affichage pour trajet simple conducteur
            summary = (
                "üéØ *R√©sum√© de votre offre de trajet*\n\n"
                f"üë§ *R√¥le :* {role_fr}\n"
                f"‚öôÔ∏è *Type :* {options_str}\n\n"
                f"üåç *D√©part :* {dep_display}\n"
                f"üèÅ *Arriv√©e :* {arr_display}\n"
                f"üìÖ *Date et heure :* {date_formatted}\n\n"
                f"üìè *Distance :* {dist} km\n"
                f"üí∫ *Places disponibles :* {context.user_data.get('seats', 'N/A')}\n"
                f"üí∞ *Prix total du trajet :* {prix} CHF\n\n"
                f"üí° *Comment √ßa marche :*\n"
                f"‚Ä¢ Prix total fixe du trajet : {prix} CHF\n"
                f"‚Ä¢ Prix par passager = {prix} CHF √∑ nombre de passagers\n"
                f"‚Ä¢ Plus de passagers = prix moins cher pour chacun\n"
                f"‚Ä¢ Remboursement automatique si le prix diminue\n\n"
                "‚ú® *Votre trajet sera visible par les passagers int√©ress√©s.*\n\n"
                "Confirmez-vous la cr√©ation de ce trajet ?"
            )
        button_text = "‚úÖ Cr√©er ce trajet !"
    
    keyboard = [
        [InlineKeyboardButton(button_text, callback_data="create_confirm_yes")],
        [InlineKeyboardButton("‚ùå Non, annuler", callback_data="create_trip:cancel_confirm")]
    ]
    if update.message:
        await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    else:
        await update.callback_query.edit_message_text(summary, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    return CREATE_CONFIRM

# =============================================================================
# FONCTIONS POUR TRAJETS ALLER-RETOUR
# =============================================================================

async def start_return_date_selection(update: Update, context: CallbackContext):
    """D√©marre la s√©lection de la date de retour pour un trajet aller-retour."""
    logger.debug("[RETURN_DATE] D√©marrage de la s√©lection de date de retour")
    
    departure_date = context.user_data.get('datetime_obj')
    departure_display = departure_date.strftime('%d/%m/%Y √† %H:%M') if departure_date else 'N/A'
    
    departure = context.user_data.get('departure', {})
    arrival = context.user_data.get('arrival', {})
    departure_city = departure.get('name', str(departure)) if departure else 'N/A'
    arrival_city = arrival.get('name', str(arrival)) if arrival else 'N/A'
    
    # Marquer que nous sommes dans le processus de s√©lection de retour
    context.user_data['selecting_return'] = True
    logger.debug("[RETURN_DATE] Flag selecting_return d√©fini √† True")
    logger.debug(f"[RETURN_DATE] IMPORTANT - Interface retour affich√©e, flag selecting_return=True")
    
    message_text = (
        f"üîÑ *TRAJET ALLER-RETOUR - √âTAPE 2/2*\n\n"
        f"‚úÖ **ALLER CONFIGUR√â :**\n"
        f"üìç {departure_city} ‚Üí {arrival_city}\n"
        f"üìÖ {departure_display}\n\n"
        f"üìÖ **MAINTENANT : CONFIGUREZ LE RETOUR**\n"
        f"üìç {arrival_city} ‚Üí {departure_city}\n\n"
        f"üëÜ *S√©lectionnez la DATE de retour dans le calendrier ci-dessous :*"
    )
    
    # Cr√©er le calendrier pour la s√©lection de date de retour
    now = datetime.now()
    calendar_markup = await create_calendar_markup(now.year, now.month)
    
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(
            message_text, 
            parse_mode="Markdown",
            reply_markup=calendar_markup
        )
    else:
        await update.message.reply_text(
            message_text, 
            parse_mode="Markdown",
            reply_markup=calendar_markup
        )
    
    return RETURN_DATE

async def handle_return_date_confirmed(update: Update, context: CallbackContext):
    """Appel√© apr√®s confirmation de la date et heure de retour."""
    # R√©cup√©rer la date de retour sp√©cifique
    selected_dt = context.user_data.get('return_selected_datetime')
    if not selected_dt:
        # Fallback vers selected_datetime si return_selected_datetime n'existe pas
        selected_dt = context.user_data.get('selected_datetime')
        if not selected_dt:
            logger.error("Aucune date de retour trouv√©e dans handle_return_date_confirmed")
            await update.effective_message.reply_text("Une erreur s'est produite avec la date de retour. Veuillez r√©essayer.")
            return RETURN_DATE

    logger.debug(f"[RETURN_DATE_CONFIRMED] Date de retour r√©cup√©r√©e: {selected_dt}")

    # IMPORTANT: Stocker imm√©diatement la date de retour pour √©viter l'√©crasement
    context.user_data['return_date'] = selected_dt.strftime('%d/%m/%Y %H:%M')
    context.user_data['return_datetime_obj'] = selected_dt
    
    # Nettoyer le flag de s√©lection de retour
    context.user_data['selecting_return'] = False
    
    # V√©rifier la logique des dates aller/retour
    departure_date = context.user_data.get('datetime_obj')
    logger.debug(f"[RETURN_DATE_VALIDATION] departure_date depuis context: {departure_date}")
    logger.debug(f"[RETURN_DATE_VALIDATION] selected_dt (retour): {selected_dt}")
    
    if departure_date and selected_dt:
        # Comparer les dates (sans l'heure)
        departure_date_only = departure_date.date()
        return_date_only = selected_dt.date()
        
        logger.debug(f"[RETURN_DATE_VALIDATION] Aller: {departure_date} ({departure_date_only})")
        logger.debug(f"[RETURN_DATE_VALIDATION] Retour: {selected_dt} ({return_date_only})")
        logger.debug(f"[RETURN_DATE_VALIDATION] Comparaison - M√™me jour? {return_date_only == departure_date_only}")
        logger.debug(f"[RETURN_DATE_VALIDATION] Comparaison - Retour avant aller? {return_date_only < departure_date_only}")
        logger.debug(f"[RETURN_DATE_VALIDATION] Comparaison - Retour apr√®s aller? {return_date_only > departure_date_only}")
        # Si c'est le m√™me jour, v√©rifier que l'heure de retour est apr√®s l'heure d'aller
        if return_date_only == departure_date_only:
            # M√™me jour : l'heure de retour doit √™tre apr√®s l'heure d'aller  
            if selected_dt <= departure_date:
                await update.effective_message.reply_text(
                    "‚ùå Pour un aller-retour le m√™me jour, l'heure de retour doit √™tre apr√®s l'heure d'aller.\n\n"
                    f"üöó Aller : {departure_date.strftime('%H:%M')}\n"
                    f"üîÑ Retour : {selected_dt.strftime('%H:%M')}\n\n"
                    "Veuillez s√©lectionner une heure de retour plus tardive."
                )
                return RETURN_DATE
        # Si c'est un jour ant√©rieur, refuser
        elif return_date_only < departure_date_only:
            await update.effective_message.reply_text(
                "‚ùå La date de retour ne peut pas √™tre avant la date d'aller.\n\n"
                f"üöó Aller : {departure_date.strftime('%d/%m/%Y')}\n" 
                f"üîÑ Retour : {selected_dt.strftime('%d/%m/%Y')}\n\n"
                "Veuillez s√©lectionner une date de retour apr√®s ou le m√™me jour que l'aller."
            )
            return RETURN_DATE
        # Si c'est un jour post√©rieur, tout va bien (pas de v√©rification d'heure n√©cessaire)
        else:
            logger.debug(f"[RETURN_DATE_VALIDATION] Jour post√©rieur d√©tect√© - validation OK")
    
    departure = context.user_data.get('departure', {})
    arrival = context.user_data.get('arrival', {})
    departure_display = departure.get('name', str(departure)) if departure else 'N/A'
    arrival_display = arrival.get('name', str(arrival)) if arrival else 'N/A'
    
    departure_date_display = context.user_data.get('date', 'N/A')
    return_date_display = context.user_data.get('return_date', 'N/A')

    # V√©rifier si on a d√©j√† le nombre de places
    seats = context.user_data.get('seats')
    if seats:
        # Si on a d√©j√† les places, aller directement au calcul de prix
        message_text = (
            f"‚úÖ **Trajet aller-retour configur√© :**\n\n"
            f"üöó **Aller :**\n"
            f"üìç {departure_display} ‚Üí {arrival_display}\n"
            f"üìÖ {departure_date_display}\n\n"
            f"üîÑ **Retour :**\n"
            f"üìç {arrival_display} ‚Üí {departure_display}\n"
            f"üìÖ {return_date_display}\n\n"
            f"üí∫ **Places disponibles :** {seats}\n\n"
            f"üîÑ Calcul du prix en cours..."
        )
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text, parse_mode="Markdown")
        else:
            await update.message.reply_text(message_text, parse_mode="Markdown")
        
        # Continuer avec le calcul de prix automatiquement
        return await handle_seats_to_price_calculation(update, context)
    else:
        # Si on n'a pas encore les places, les demander
        message_text = (
            f"‚úÖ **Trajet aller-retour configur√© :**\n\n"
            f"üöó **Aller :**\n"
            f"üìç {departure_display} ‚Üí {arrival_display}\n"
            f"üìÖ {departure_date_display}\n\n"
            f"üîÑ **Retour :**\n"
            f"üìç {arrival_display} ‚Üí {departure_display}\n"
            f"üìÖ {return_date_display}\n\n"
            f"Passons maintenant au nombre de places :"
        )
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text, parse_mode="Markdown")
        else:
            await update.message.reply_text(message_text, parse_mode="Markdown")
        
        return CREATE_SEATS

async def handle_seats_to_price_calculation(update: Update, context: CallbackContext):
    """Fait le calcul de prix apr√®s avoir obtenu le nombre de places."""
    trip_role = context.user_data.get('trip_type', 'driver')
    
    # --- Calcul automatique du prix ---
    dep = context.user_data.get('departure', {})
    arr = context.user_data.get('arrival', {})
    
    # Extraire les noms des localit√©s pour le calcul de prix
    dep_name = dep.get('name', '') if isinstance(dep, dict) else str(dep)
    arr_name = arr.get('name', '') if isinstance(arr, dict) else str(arr)
    
    prix, dist = compute_price_auto(dep_name, arr_name)
    context.user_data['price'] = prix
    context.user_data['distance_km'] = dist
    
    if prix is None:
        await update.effective_message.reply_text("Impossible de calculer le prix automatiquement (coordonn√©es manquantes). Veuillez contacter le support.")
        return ConversationHandler.END
    
    # Message adapt√© selon le r√¥le
    if trip_role == 'passenger':
        await update.effective_message.reply_text(
            f"üí∞ Budget estim√© : {prix} CHF par place pour {dist} km.\n"
            f"Ce montant sera propos√© aux conducteurs int√©ress√©s."
        )
    else:
        # CORRECTION CRITIQUE: Le prix calcul√© est le prix TOTAL du trajet
        # Le prix par passager d√©pend du nombre r√©el de passagers, pas des places disponibles
        
        # Stocker le prix total du trajet
        context.user_data['total_trip_price'] = prix
        
        await update.effective_message.reply_text(
            f"üí∞ Le prix total du trajet est calcul√© √† {prix} CHF pour {dist} km.\n\n"
            f"‚úÖ **LOGIQUE DE PRIX CORRIG√âE :**\n"
            f"‚Ä¢ Prix total du trajet : {prix} CHF\n"
            f"‚Ä¢ Prix par passager = Prix total √∑ Nombre de passagers ayant pay√©\n\n"
            f"üìä **Exemples de r√©partition :**\n"
            f"‚Ä¢ 1 passager ‚Üí {prix} CHF par passager\n"
            f"‚Ä¢ 2 passagers ‚Üí {round(prix / 2, 2)} CHF par passager\n"
            f"‚Ä¢ 3 passagers ‚Üí {round(prix / 3, 2)} CHF par passager\n\n"
            f"üîÑ **Remboursement automatique :**\n"
            f"Si un passager suppl√©mentaire s'ajoute apr√®s un paiement, "
            f"les passagers pr√©c√©dents seront automatiquement rembours√©s de la diff√©rence via PayPal."
        )
        
        # Le prix stock√© pour la cr√©ation du trajet reste le prix total
        context.user_data['price'] = prix
    
    # Passer directement √† la confirmation
    return await handle_create_price(update, context, auto=True)

async def handle_create_confirm(update: Update, context: CallbackContext):
    """Confirme et sauvegarde le trajet."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "create_confirm_yes":
        try:
            db = get_db()
            user_id = update.effective_user.id
            db_user = db.query(User).filter(User.telegram_id == user_id).first()
            if not db_user:
                logger.error(f"Utilisateur non trouv√© dans la BDD: {user_id}")
                await query.edit_message_text("‚ùå Erreur: Utilisateur non trouv√©. Veuillez d'abord utiliser /start.")
                context.user_data.clear()
                return ConversationHandler.END

            departure_data = context.user_data.get('departure', {})
            arrival_data = context.user_data.get('arrival', {})
            trip_options = context.user_data.get('trip_options', {})
            trip_role = context.user_data.get('trip_type', 'driver')  # 'driver' ou 'passenger'
            
            logger.info(f"Cr√©ation de trajet avec r√¥le: {trip_role}")
            
            # V√©rifier si c'est un trajet r√©gulier
            is_regular = trip_options.get('regular', False)
            regular_dates = context.user_data.get('regular_dates', [])
            
            if is_regular and regular_dates:
                # Cr√©er des trajets r√©guliers multiples
                created_trips = []
                for date_str in regular_dates:
                    # Convertir la date string en datetime avec l'heure
                    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                    # Utiliser l'heure du trajet simple ou par d√©faut 08:00
                    time_obj = context.user_data.get('datetime_obj')
                    if time_obj:
                        departure_time = date_obj.replace(hour=time_obj.hour, minute=time_obj.minute)
                    else:
                        departure_time = date_obj.replace(hour=8, minute=0)
                    
                    # Configuration des IDs selon le r√¥le
                    if trip_role == 'passenger':
                        # Passager : creator_id = user, driver_id = None (√† remplir plus tard)
                        driver_id = None
                        creator_id = db_user.id
                    else:
                        # Conducteur : driver_id = user, creator_id = user
                        driver_id = db_user.id
                        creator_id = db_user.id
                    
                    new_trip = Trip(
                        driver_id=driver_id,
                        creator_id=creator_id,
                        trip_role=trip_role,
                        departure_city=departure_data.get('name', str(departure_data)),
                        arrival_city=arrival_data.get('name', str(arrival_data)),
                        departure_time=departure_time,
                        seats_available=context.user_data.get('seats'),
                        price_per_seat=context.user_data.get('price'),
                        is_published=True,
                        
                        # Marquer comme trajet r√©gulier
                        recurring=True,
                        
                        # Options du trajet
                        smoking=trip_options.get('smoking', 'no_smoking'),
                        music=trip_options.get('music', 'music_ok'),
                        talk_preference=trip_options.get('talk', 'depends'),
                        pets_allowed=trip_options.get('pets', 'no_pets'),
                        luggage_size=trip_options.get('luggage', 'medium'),
                        stops=trip_options.get('stops', ''),
                        highway=trip_options.get('highway', True),
                        flexible_time=trip_options.get('flexible_time', False),
                        women_only=trip_options.get('women_only', False),
                        instant_booking=trip_options.get('instant_booking', True),
                        meeting_point=context.user_data.get('meeting_point', ''),
                        car_description=context.user_data.get('car_description', ''),
                        total_distance=context.user_data.get('total_distance', 0.0),
                        estimated_duration=context.user_data.get('estimated_duration', 0),
                        booking_deadline=departure_time,
                        additional_info=context.user_data.get('additional_info', '')
                    )
                    db.add(new_trip)
                    created_trips.append(new_trip)
                
                db.commit()
                logger.info(f"Cr√©√© {len(created_trips)} trajets r√©guliers.")
                
                # Message de confirmation pour trajets multiples
                dates_display = "\n".join([f"üìÖ {datetime.strptime(d, '%Y-%m-%d').strftime('%A %d %B %Y')}" for d in regular_dates[:5]])
                if len(regular_dates) > 5:
                    dates_display += f"\n... et {len(regular_dates) - 5} autres dates"
                
                keyboard_after_save = [
                    [InlineKeyboardButton("üìã Mes trajets", callback_data="main_menu:my_trips")],
                    [InlineKeyboardButton("üè† Menu principal", callback_data="main_menu:start")]
                ]
                await query.edit_message_text(
                    f"‚úÖ *Trajets r√©guliers cr√©√©s avec succ√®s!*\n\n"
                    f"üåç De: {departure_data.get('name', str(departure_data))}\n"
                    f"üèÅ √Ä: {arrival_data.get('name', str(arrival_data))}\n\n"
                    f"üìä **{len(created_trips)} trajets cr√©√©s:**\n"
                    f"{dates_display}\n\n"
                    f"Ils sont maintenant visibles pour les passagers potentiels.",
                    reply_markup=InlineKeyboardMarkup(keyboard_after_save),
                    parse_mode="Markdown"
                )
            elif trip_options.get('round_trip', False):
                # Cr√©er un trajet aller-retour (deux trajets li√©s)
                
                # Configuration des IDs selon le r√¥le
                if trip_role == 'passenger':
                    # Passager : creator_id = user, driver_id = None (√† remplir plus tard)
                    driver_id = None
                    creator_id = db_user.id
                else:
                    # Conducteur : driver_id = user, creator_id = user
                    driver_id = db_user.id
                    creator_id = db_user.id
                
                # Cr√©er le trajet aller
                departure_datetime = context.user_data.get('datetime_obj')
                outbound_trip = Trip(
                    driver_id=driver_id,
                    creator_id=creator_id,
                    trip_role=trip_role,
                    departure_city=departure_data.get('name', str(departure_data)),
                    arrival_city=arrival_data.get('name', str(arrival_data)),
                    departure_time=departure_datetime,
                    seats_available=context.user_data.get('seats'),
                    price_per_seat=context.user_data.get('price'),
                    is_published=True,
                    
                    # Trajet simple (pas r√©current)
                    recurring=False,
                    
                    # Options du trajet
                    smoking=trip_options.get('smoking', 'no_smoking'),
                    music=trip_options.get('music', 'music_ok'),
                    talk_preference=trip_options.get('talk', 'depends'),
                    pets_allowed=trip_options.get('pets', 'no_pets'),
                    luggage_size=trip_options.get('luggage', 'medium'),
                    stops=trip_options.get('stops', ''),
                    highway=trip_options.get('highway', True),
                    flexible_time=trip_options.get('flexible_time', False),
                    women_only=trip_options.get('women_only', False),
                    instant_booking=trip_options.get('instant_booking', True),
                    meeting_point=context.user_data.get('meeting_point', ''),
                    car_description=context.user_data.get('car_description', ''),
                    total_distance=context.user_data.get('total_distance', 0.0),
                    estimated_duration=context.user_data.get('estimated_duration', 0),
                    booking_deadline=departure_datetime,
                    additional_info=context.user_data.get('additional_info', '')
                )
                db.add(outbound_trip)
                db.flush()  # Pour obtenir l'ID du trajet aller
                
                # Cr√©er le trajet retour
                return_datetime = context.user_data.get('return_datetime_obj')
                return_trip = Trip(
                    driver_id=driver_id,
                    creator_id=creator_id,
                    trip_role=trip_role,
                    departure_city=arrival_data.get('name', str(arrival_data)),  # Invers√©
                    arrival_city=departure_data.get('name', str(departure_data)),  # Invers√©
                    departure_time=return_datetime,
                    seats_available=context.user_data.get('seats'),
                    price_per_seat=context.user_data.get('price'),
                    is_published=True,
                    
                    # Trajet simple (pas r√©current)
                    recurring=False,
                    
                    # Lien vers le trajet aller
                    return_trip_id=outbound_trip.id,
                    
                    # Options du trajet (identiques)
                    smoking=trip_options.get('smoking', 'no_smoking'),
                    music=trip_options.get('music', 'music_ok'),
                    talk_preference=trip_options.get('talk', 'depends'),
                    pets_allowed=trip_options.get('pets', 'no_pets'),
                    luggage_size=trip_options.get('luggage', 'medium'),
                    stops=trip_options.get('stops', ''),
                    highway=trip_options.get('highway', True),
                    flexible_time=trip_options.get('flexible_time', False),
                    women_only=trip_options.get('women_only', False),
                    instant_booking=trip_options.get('instant_booking', True),
                    meeting_point=context.user_data.get('meeting_point', ''),
                    car_description=context.user_data.get('car_description', ''),
                    total_distance=context.user_data.get('total_distance', 0.0),
                    estimated_duration=context.user_data.get('estimated_duration', 0),
                    booking_deadline=return_datetime,
                    additional_info=context.user_data.get('additional_info', '')
                )
                db.add(return_trip)
                
                # Mettre √† jour le trajet aller avec la r√©f√©rence du retour
                outbound_trip.return_trip_id = return_trip.id
                
                db.commit()
                db.refresh(outbound_trip)
                db.refresh(return_trip)
                logger.info(f"Trajet aller-retour cr√©√©: aller ID {outbound_trip.id}, retour ID {return_trip.id}")

                keyboard_after_save = [
                    [InlineKeyboardButton("üìã Mes trajets", callback_data="main_menu:my_trips")],
                    [InlineKeyboardButton("üè† Menu principal", callback_data="main_menu:start")]
                ]
                
                # Message adapt√© selon le r√¥le
                departure_date_str = departure_datetime.strftime('%d/%m/%Y √† %H:%M') if departure_datetime else 'N/A'
                return_date_str = return_datetime.strftime('%d/%m/%Y √† %H:%M') if return_datetime else 'N/A'
                
                if trip_role == 'passenger':
                    success_message = (
                        f"‚úÖ *Demande d'aller-retour publi√©e avec succ√®s!*\n\n"
                        f"üöó **Aller :**\n"
                        f"üìç {outbound_trip.departure_city} ‚Üí {outbound_trip.arrival_city}\n"
                        f"üìÖ {departure_date_str}\n\n"
                        f"üîÑ **Retour :**\n"
                        f"üìç {return_trip.departure_city} ‚Üí {return_trip.arrival_city}\n"
                        f"üìÖ {return_date_str}\n\n"
                        f"üí∞ Budget: {outbound_trip.price_per_seat} CHF/place (chaque trajet)\n\n"
                        f"üöó *Votre demande est maintenant visible par les conducteurs.*\n"
                        f"Vous recevrez une notification quand un conducteur proposera ses services."
                    )
                else:
                    success_message = (
                        f"‚úÖ *Trajet aller-retour cr√©√© avec succ√®s!*\n\n"
                        f"üöó **Aller :**\n"
                        f"üìç {outbound_trip.departure_city} ‚Üí {outbound_trip.arrival_city}\n"
                        f"üìÖ {departure_date_str}\n\n"
                        f"üîÑ **Retour :**\n"
                        f"üìç {return_trip.departure_city} ‚Üí {return_trip.arrival_city}\n"
                        f"üìÖ {return_date_str}\n\n"
                        f"üí∞ Prix: {outbound_trip.price_per_seat} CHF/place (chaque trajet)\n"
                        f"üí∫ {outbound_trip.seats_available} places disponibles\n\n"
                        f"üåç *Vos trajets sont maintenant visibles dans l'annuaire public.*"
                    )
                
                await query.edit_message_text(
                    success_message,
                    reply_markup=InlineKeyboardMarkup(keyboard_after_save),
                    parse_mode="Markdown"
                )
            else:
                # Cr√©er un trajet simple normal
                
                # Configuration des IDs selon le r√¥le
                if trip_role == 'passenger':
                    # Passager : creator_id = user, driver_id = None (√† remplir plus tard)
                    driver_id = None
                    creator_id = db_user.id
                else:
                    # Conducteur : driver_id = user, creator_id = user
                    driver_id = db_user.id
                    creator_id = db_user.id
                
                new_trip = Trip(
                    driver_id=driver_id,
                    creator_id=creator_id,
                    trip_role=trip_role,
                    departure_city=departure_data.get('name', str(departure_data)),
                    arrival_city=arrival_data.get('name', str(arrival_data)),
                    departure_time=context.user_data.get('datetime_obj'),
                    seats_available=context.user_data.get('seats'),
                    price_per_seat=context.user_data.get('price'),
                    is_published=True,
                    
                    # Trajet simple
                    recurring=False,
                    
                    # Options du trajet
                    smoking=trip_options.get('smoking', 'no_smoking'),
                    music=trip_options.get('music', 'music_ok'),
                    talk_preference=trip_options.get('talk', 'depends'),
                    pets_allowed=trip_options.get('pets', 'no_pets'),
                    luggage_size=trip_options.get('luggage', 'medium'),
                    stops=trip_options.get('stops', ''),
                    highway=trip_options.get('highway', True),
                    flexible_time=trip_options.get('flexible_time', False),
                    women_only=trip_options.get('women_only', False),
                    instant_booking=trip_options.get('instant_booking', True),
                    meeting_point=context.user_data.get('meeting_point', ''),
                    car_description=context.user_data.get('car_description', ''),
                    total_distance=context.user_data.get('total_distance', 0.0),
                    estimated_duration=context.user_data.get('estimated_duration', 0),
                    booking_deadline=context.user_data.get('datetime_obj'),
                    additional_info=context.user_data.get('additional_info', '')
                )
                db.add(new_trip)
                db.commit()
                db.refresh(new_trip)
                logger.info(f"Nouveau trajet ID {new_trip.id} sauvegard√© en BDD.")

                keyboard_after_save = [
                    [InlineKeyboardButton("üìã Mes trajets", callback_data="main_menu:my_trips")],
                    [InlineKeyboardButton("üè† Menu principal", callback_data="main_menu:start")]
                ]
                
                # Message adapt√© selon le r√¥le
                if trip_role == 'passenger':
                    success_message = (
                        f"‚úÖ *Demande de trajet publi√©e avec succ√®s!*\n\n"
                        f"üåç De: {new_trip.departure_city}\n"
                        f"üèÅ √Ä: {new_trip.arrival_city}\n"
                        f"üóìÔ∏è Le: {new_trip.departure_time.strftime('%d/%m/%Y √† %H:%M')}\n"
                        f"üí∞ Budget: {new_trip.price_per_seat} CHF/place\n\n"
                        f"üöó *Votre demande est maintenant visible par les conducteurs.*\n"
                        f"Vous recevrez une notification quand un conducteur proposera ses services."
                    )
                else:
                    success_message = (
                        f"‚úÖ *Trajet cr√©√© avec succ√®s!*\n\n"
                        f"üåç De: {new_trip.departure_city}\n"
                        f"üèÅ √Ä: {new_trip.arrival_city}\n"
                        f"üóìÔ∏è Le: {new_trip.departure_time.strftime('%d/%m/%Y √† %H:%M')}\n"
                        f"üí∞ Prix: {new_trip.price_per_seat} CHF/place\n\n"
                        f"üë• *Il est maintenant visible pour les passagers potentiels.*"
                    )
                
                await query.edit_message_text(
                    success_message,
                    reply_markup=InlineKeyboardMarkup(keyboard_after_save),
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde du trajet: {e}", exc_info=True)
            await query.edit_message_text("‚ùå Oups! Une erreur est survenue lors de la sauvegarde. Veuillez r√©essayer.")

    context.user_data.clear()
    return ConversationHandler.END

async def handle_create_cancel(update: Update, context: CallbackContext):
    """Annule la conversation de cr√©ation de trajet."""
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("‚ùå Cr√©ation de trajet annul√©e.")
    else:
        await update.message.reply_text("‚ùå Cr√©ation de trajet annul√©e.")
    context.user_data.clear()
    return ConversationHandler.END

async def handle_unexpected_input(update: Update, context: CallbackContext):
    """Fonction de fallback pour g√©rer les entr√©es inattendues dans la conversation."""
    # Si le mode est "search", ne pas intercepter l'entr√©e
    if context.user_data.get('mode') == 'search':
        return -1  # -1 signifie "continuer √† chercher d'autres gestionnaires"
        
    logger.warning(f"Entr√©e inattendue re√ßue dans la conversation create_trip: {update}")
    
    message = "D√©sol√©, je n'ai pas compris cette entr√©e. Veuillez utiliser les options fournies."
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(message)
    elif update.message:
        await update.message.reply_text(message)
    
    # Retour √† l'√©tat actuel (ne pas terminer la conversation)
    return context.user_data.get('current_state', CREATE_TRIP_TYPE)

# Handler pour le bouton de publication (en dehors de la conversation)
async def publish_created_trip(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    trip_id = int(query.data.split(":")[1])
    
    db = get_db()
    trip = db.query(Trip).filter(Trip.id == trip_id).first()
    
    if not trip:
        await query.edit_message_text("‚ùå Trajet introuvable.")
        return
    
    # V√©rifier si le trajet appartient √† l'utilisateur (s√©curit√© additionnelle)
    # user_id = update.effective_user.id
    # if trip.driver.telegram_id != user_id: # ou une logique plus complexe si passagers peuvent publier
    #     await query.edit_message_text("‚ùå Vous n'√™tes pas autoris√© √† publier ce trajet.")
    #     return

    trip.is_published = True
    db.commit()
    logger.info(f"Trajet ID {trip_id} publi√©.")
    
    keyboard_published = [
        [InlineKeyboardButton("üìã Mes trajets", callback_data="main_menu:my_trips")],
        [InlineKeyboardButton("üè† Menu principal", callback_data="main_menu:start")]
    ]
    await query.edit_message_text(
        f"‚úÖ Trajet {trip.departure_city} ‚Üí {trip.arrival_city} publi√© avec succ√®s!",
        reply_markup=InlineKeyboardMarkup(keyboard_published)
    )

async def create_calendar_markup(year: int, month: int) -> InlineKeyboardMarkup:
    """Cr√©e un clavier calendrier interactif."""
    keyboard = []
    current_date = datetime.now()
    logger.info(f"Cr√©ation du calendrier pour {month}/{year}")
    
    # En-t√™te avec mois/ann√©e et navigation
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"create_cal_month:{year}:{month}:prev"),
        InlineKeyboardButton(f"{calendar.month_name[month]} {year}", callback_data="ignore"),
        InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"create_cal_month:{year}:{month}:next")
    ])
    
    # Jours de la semaine
    days = ["Lu", "Ma", "Me", "Je", "Ve", "Sa", "Di"]
    keyboard.append([InlineKeyboardButton(day, callback_data="ignore") for day in days])
    
    # Obtenir le calendrier du mois
    month_cal = calendar.monthcalendar(year, month)
    
    # Ajouter les jours
    for week in month_cal:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                date = datetime(year, month, day)
                if date < current_date.replace(hour=0, minute=0, second=0, microsecond=0):
                    # D√©sactiver les dates pass√©es
                    row.append(InlineKeyboardButton("‚úñÔ∏è", callback_data="ignore"))
                else:
                    row.append(InlineKeyboardButton(
                        str(day),
                        callback_data=f"create_cal_date:{year}:{month}:{day}"
                    ))
        keyboard.append(row)
    
    # Bouton d'annulation
    keyboard.append([InlineKeyboardButton("‚ùå Annuler", callback_data="create_trip:cancel")])
    
    return InlineKeyboardMarkup(keyboard)

async def handle_calendar_navigation(update: Update, context: CallbackContext):
    """G√®re la navigation dans le calendrier."""
    query = update.callback_query
    await query.answer()
    logger.info(f"[CAL NAV] callback re√ßu: {query.data}")
    try:
        _, action, year, month = query.data.split(":")
        year, month = int(year), int(month)
        if action == "cal_month":
            # Extrait l'action (prev/next) depuis le 5√®me √©l√©ment
            action = query.data.split(":")[4] if len(query.data.split(":")) >= 5 else "none"
        
        if action == "prev":
            if month == 1:
                month = 12
                year -= 1
            else:
                month -= 1
        elif action == "next":
            if month == 12:
                month = 1
                year += 1
            else:
                month += 1
        
        logger.info(f"[CAL NAV] Nouvelle date apr√®s navigation: {month}/{year}")
        markup = await create_calendar_markup(year, month)
        await query.edit_message_text(
            "üìÖ S√©lectionnez la date du trajet:",
            reply_markup=markup
        )
        return CREATE_CALENDAR
    except Exception as e:
        logger.error(f"[CAL NAV] Erreur navigation calendrier: {str(e)}", exc_info=True)
        return CREATE_CALENDAR

async def create_hour_selection_keyboard():
    """Cr√©e un clavier de s√©lection d'heure avec toutes les heures de la journ√©e."""
    keyboard = []
    
    # Heures de la journ√©e par blocs de 4
    for row_start in range(0, 24, 4):
        row = []
        for hour in range(row_start, min(row_start + 4, 24)):
            hour_str = f"{hour:02d}h"
            row.append(InlineKeyboardButton(hour_str, callback_data=f"create_hour:{hour}"))
        keyboard.append(row)
    
    # Options d'horaires flexibles
    keyboard.append([
        InlineKeyboardButton("üåÖ Matin (6h-12h)", callback_data="create_flex_time:morning")
    ])
    keyboard.append([
        InlineKeyboardButton("‚òÄÔ∏è Apr√®s-midi (12h-18h)", callback_data="create_flex_time:afternoon")
    ])
    keyboard.append([
        InlineKeyboardButton("üåô Soir√©e (18h-23h)", callback_data="create_flex_time:evening")
    ])
    keyboard.append([
        InlineKeyboardButton("‚è∞ Heure √† convenir", callback_data="create_flex_time:tbd")
    ])
    
    # Bouton d'annulation
    keyboard.append([InlineKeyboardButton("‚ùå Annuler", callback_data="create_trip:cancel")])
    
    return InlineKeyboardMarkup(keyboard)

async def create_minute_selection_keyboard(hour):
    """Cr√©e un clavier de s√©lection des minutes par tranches de 5 minutes."""
    keyboard = []
    
    # Minutes par tranches de 5, en blocs de 4
    minutes = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]
    for row_start in range(0, len(minutes), 4):
        row = []
        for minute in minutes[row_start:row_start+4]:
            minute_str = f"{minute:02d}"
            row.append(InlineKeyboardButton(
                minute_str, 
                callback_data=f"create_minute:{hour}:{minute}"
            ))
        keyboard.append(row)
    
    # Boutons de navigation
    keyboard.append([
        InlineKeyboardButton("üîô Retour", callback_data="create_back_to_hour"),
        InlineKeyboardButton("‚ùå Annuler", callback_data="create_trip:cancel")
    ])
    
    return InlineKeyboardMarkup(keyboard)

async def handle_calendar_date_selection(update: Update, context: CallbackContext):
    """G√®re la s√©lection d'une date dans le calendrier et passe √† l'√©tape HOUR."""
    query = update.callback_query
    await query.answer()
    logger.info(f"[CAL DATE] callback re√ßu: {query.data}")
    
    try:
        # Extraire la date du callback
        parts = query.data.split(":")
        if len(parts) != 4:
            logger.error(f"[CAL DATE] Format callback invalide: {query.data}")
            raise ValueError(f"Format invalide: {query.data}")
        
        prefix, year, month, day = parts
        # V√©rifier qu'il s'agit bien d'un callback de date de calendrier
        if prefix != "create_cal_date":
            logger.error(f"[CAL DATE] Pr√©fixe de callback invalide: {prefix}")
            raise ValueError(f"Pr√©fixe invalide: {prefix}")
            
        year, month, day = int(year), int(month), int(day)
        
        # Cr√©er et stocker la date
        selected_date = datetime(year, month, day)
        context.user_data['selected_date'] = selected_date
        logger.info(f"[CAL DATE] Date s√©lectionn√©e: {selected_date}")
        
        # V√©rifier si nous sommes dans le processus de s√©lection de retour
        is_selecting_return = context.user_data.get('selecting_return', False)
        logger.debug(f"[CAL DATE] is_selecting_return: {is_selecting_return}")
        logger.debug(f"[CAL DATE] IMPORTANT - √âtat selecting_return: {is_selecting_return}")
        
        if is_selecting_return:
            logger.debug(f"[CAL DATE] IMPORTANT - Mode retour activ√©, affichage s√©lection heure retour")
            # Pour le retour, afficher un message plus clair
            departure = context.user_data.get('departure', {})
            arrival = context.user_data.get('arrival', {})
            departure_city = departure.get('name', str(departure)) if departure else 'N/A'
            arrival_city = arrival.get('name', str(arrival)) if arrival else 'N/A'
            
            # Afficher les options d'heures pour le retour
            hour_keyboard = await create_hour_selection_keyboard()
            await query.edit_message_text(
                f"üîÑ *TRAJET ALLER-RETOUR - RETOUR*\n\n"
                f"ÔøΩ {arrival_city} ‚Üí {departure_city}\n"
                f"ÔøΩüóìÔ∏è *Date s√©lectionn√©e :* {selected_date.strftime('%d/%m/%Y')}\n\n"
                f"‚è∞ *Maintenant, s√©lectionnez l'HEURE de d√©part du retour :*",
                reply_markup=hour_keyboard,
                parse_mode="Markdown"
            )
            return RETURN_TIME
        else:
            # Pour l'aller, comportement normal
            hour_keyboard = await create_hour_selection_keyboard()
            await query.edit_message_text(
                f"üóìÔ∏è Date s√©lectionn√©e: {selected_date.strftime('%d/%m/%Y')}\n"
                f"‚è∞ Veuillez s√©lectionner l'heure du trajet:",
                reply_markup=hour_keyboard
            )
            return CREATE_TIME
    
    except Exception as e:
        logger.error(f"[CAL DATE] Erreur lors de la s√©lection de date: {str(e)}", exc_info=True)
        await query.edit_message_text(
            "‚ùå Une erreur s'est produite lors de la s√©lection de la date. Veuillez r√©essayer.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ R√©essayer", callback_data="create_trip:calendar_retry")
            ]])
        )
        return CREATE_CALENDAR

async def handle_unexpected_calendar_callback(update: Update, context: CallbackContext):
    """Intercepte tout callback inattendu dans le calendrier."""
    query = update.callback_query
    await query.answer()
    logger.warning(f"[CALENDAR] Callback inattendu re√ßu: {query.data}")
    
    # V√©rifiez si c'est le bouton "ignore"
    if query.data == "ignore":
        return CREATE_CALENDAR
    
    await query.edit_message_text(
        "‚ùå Action non reconnue dans le calendrier.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîÑ R√©essayer", callback_data="create_trip:calendar_retry")
        ]])
    )
    return CREATE_CALENDAR

# Fonction pour g√©rer le bouton de retry du calendrier
async def handle_calendar_retry(update: Update, context: CallbackContext):
    """G√®re le bouton de r√©essai du calendrier."""
    query = update.callback_query
    await query.answer()
    
    # Afficher le calendrier du mois courant
    now = datetime.now()
    markup = await create_calendar_markup(now.year, now.month)
    
    await query.edit_message_text(
        "üìÖ S√©lectionnez la date du trajet:",
        reply_markup=markup
    )
    return CREATE_CALENDAR

async def handle_hour_selection(update: Update, context: CallbackContext):
    """G√®re la s√©lection de l'heure par bouton et passe √† la s√©lection des minutes."""
    query = update.callback_query
    await query.answer()
    logger.info(f"[HOUR] Callback re√ßu: {query.data}")
    
    if query.data.startswith("create_hour:"):
        # Extraction de l'heure s√©lectionn√©e
        hour = int(query.data.split(":")[1])
        context.user_data['selected_hour'] = hour
        logger.info(f"[HOUR] Heure s√©lectionn√©e: {hour}")
        
        # V√©rifier si nous sommes dans le processus de s√©lection de retour
        is_selecting_return = context.user_data.get('selecting_return', False)
        logger.debug(f"[HOUR] is_selecting_return: {is_selecting_return}")
        logger.debug(f"[HOUR] IMPORTANT - √âtat selecting_return: {is_selecting_return}")
        
        # V√©rifier si c'est un trajet r√©gulier
        regular_time_type = context.user_data.get('regular_time_type')
        
        if is_selecting_return:
            logger.debug(f"[HOUR] IMPORTANT - Mode retour, s√©lection minutes retour")
            # Pour le retour, afficher un message sp√©cifique
            departure = context.user_data.get('departure', {})
            arrival = context.user_data.get('arrival', {})
            departure_city = departure.get('name', str(departure)) if departure else 'N/A'
            arrival_city = arrival.get('name', str(arrival)) if arrival else 'N/A'
            selected_date = context.user_data.get('selected_date', datetime.now())
            
            # Afficher les options de minutes
            minute_keyboard = await create_minute_selection_keyboard(hour)
            await query.edit_message_text(
                f"üîÑ *TRAJET ALLER-RETOUR - RETOUR*\n\n"
                f"üìç {arrival_city} ‚Üí {departure_city}\n"
                f"üìÖ {selected_date.strftime('%d/%m/%Y')}\n"
                f"üïê *Heure s√©lectionn√©e :* {hour:02d}:XX\n\n"
                f"‚è∞ *Maintenant, s√©lectionnez les MINUTES :*",
                reply_markup=minute_keyboard,
                parse_mode="Markdown"
            )
            return CREATE_MINUTE
        
        elif regular_time_type:
            # Trajet r√©gulier - afficher les options de minutes avec contexte appropri√©
            current_date = context.user_data.get('current_regular_date')
            if current_date:
                date_display = datetime.strptime(current_date, '%Y-%m-%d').strftime('%A %d %B %Y')
                message_prefix = f"üìÖ {date_display}\n‚è±Ô∏è "
            else:
                message_prefix = "‚è±Ô∏è "
        else:
            # Trajet simple
            message_prefix = "‚è±Ô∏è "
        
        if not is_selecting_return:
            # Afficher les options de minutes
            minute_keyboard = await create_minute_selection_keyboard(hour)
            await query.edit_message_text(
                f"{message_prefix}Veuillez s√©lectionner les minutes:",
                reply_markup=minute_keyboard
            )
        
        return CREATE_MINUTE
    
    elif query.data == "create_back_to_calendar":
        # Retour au calendrier
        selected_date = context.user_data.get('selected_date', datetime.now())
        month = selected_date.month
        year = selected_date.year
        
        markup = await create_calendar_markup(year, month)
        await query.edit_message_text(
            "üìÖ S√©lectionnez la date du trajet:",
            reply_markup=markup
        )
        return CREATE_CALENDAR
    
    # Fallback
    await query.edit_message_text(
        "‚ùå Action non reconnue. Veuillez r√©essayer.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîÑ R√©essayer", callback_data="create_trip:calendar_retry")
        ]])
    )
    return CREATE_TIME

async def handle_flex_time_selection(update: Update, context: CallbackContext):
    """G√®re la s√©lection d'horaires vagues (matin, apr√®s-midi, etc.)"""
    query = update.callback_query
    await query.answer()
    logger.info(f"[FLEX_TIME] Callback re√ßu: {query.data}")
    
    if query.data.startswith("create_flex_time:"):
        # Extraire l'option d'horaire flexible
        time_option = query.data.split(":")[1]
        
        # D√©finir les plages d'heures correspondant aux options
        time_ranges = {
            "morning": "Matin√©e (6h-12h)",
            "afternoon": "Apr√®s-midi (12h-18h)",
            "evening": "Soir√©e (18h-23h)",
            "tbd": "Heure √† convenir"
        }
        
        # Stocker l'option d'horaire flexible
        flex_time_display = time_ranges.get(time_option, "Horaire flexible")
        context.user_data['flex_time'] = time_option
        context.user_data['flex_time_display'] = flex_time_display
        
        # Cr√©er un datetime repr√©sentatif pour la BDD
        selected_date = context.user_data.get('selected_date')
        if not selected_date:
            logger.error("[FLEX_TIME] Date non trouv√©e dans le contexte")
            await query.edit_message_text("‚ùå Erreur: Date non d√©finie.")
            return CREATE_CALENDAR
        
        # Assignation d'une heure repr√©sentative pour la plage horaire
        if time_option == "morning":
            hour, minute = 9, 0
        elif time_option == "afternoon":
            hour, minute = 14, 0
        elif time_option == "evening":
            hour, minute = 20, 0
        else:  # tbd - √† convenir
            hour, minute = 12, 0
        
        # Stocker le datetime et le marquer comme flexible
        selected_datetime = selected_date.replace(hour=hour, minute=minute)
        context.user_data['selected_datetime'] = selected_datetime
        context.user_data['date'] = f"{selected_date.strftime('%d/%m/%Y')} ({flex_time_display})"
        context.user_data['datetime_obj'] = selected_datetime
        context.user_data['is_flex_time'] = True
        
        # R√©cup√©ration des donn√©es de trajet pour le r√©capitulatif
        departure = context.user_data.get('departure', {})
        arrival = context.user_data.get('arrival', {})
        departure_display = departure.get('name', str(departure)) if departure else 'N/A'
        arrival_display = arrival.get('name', str(arrival)) if arrival else 'N/A'
        
        # Cr√©er des boutons de confirmation
        keyboard = [
            [InlineKeyboardButton("‚úÖ Confirmer", callback_data="datetime:confirm")],
            [InlineKeyboardButton("üîÑ Changer", callback_data="datetime:change")],
            [InlineKeyboardButton("‚ùå Annuler", callback_data="datetime:cancel")]
        ]
        
        # Afficher la date/heure s√©lectionn√©e avec confirmation
        await query.edit_message_text(
            f"üìÖ Date s√©lectionn√©e: {selected_date.strftime('%d/%m/%Y')}\n"
            f"‚è∞ Horaire: {flex_time_display}\n\n"
            f"R√©capitulatif:\n"
            f"De: {departure_display}\n"
            f"√Ä: {arrival_display}\n\n"
            "Confirmez-vous cette s√©lection?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return CREATE_CONFIRM_DATETIME
    
    # Fallback
    await query.edit_message_text(
        "‚ùå Action non reconnue. Veuillez r√©essayer.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîÑ R√©essayer", callback_data="create_trip:calendar_retry")
        ]])
    )
    return FLEX_HOUR

# === FONCTIONS POUR TRAJETS R√âGULIERS ===

def create_days_selection_keyboard(selected_days):
    """Cr√©e le clavier pour la s√©lection des jours de la semaine."""
    days = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"]
    keyboard = []
    
    # Cr√©er une rang√©e pour chaque jour
    for i, day in enumerate(days):
        if day in selected_days:
            button_text = f"‚úÖ {day}"
        else:
            button_text = f"‚òëÔ∏è {day}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"regular_day_toggle:{i}")])
    
    # Ajouter les boutons de validation et d'annulation
    if selected_days:
        keyboard.append([
            InlineKeyboardButton("‚û°Ô∏è Continuer", callback_data="regular_days_continue"),
            InlineKeyboardButton("‚ùå Annuler", callback_data="create_trip:cancel")
        ])
    else:
        keyboard.append([
            InlineKeyboardButton("‚ùå Annuler", callback_data="create_trip:cancel")
        ])
    
    return InlineKeyboardMarkup(keyboard)

async def handle_regular_day_toggle(update: Update, context: CallbackContext):
    """G√®re l'activation/d√©sactivation des jours de la semaine."""
    query = update.callback_query
    await query.answer()
    
    day_num = int(query.data.split(":")[1])
    days = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"]
    day_name = days[day_num]
    
    selected_days = context.user_data.get('selected_days', [])
    
    if day_name in selected_days:
        selected_days.remove(day_name)
    else:
        selected_days.append(day_name)
    
    context.user_data['selected_days'] = selected_days
    
    # Actualiser le clavier
    new_keyboard = create_days_selection_keyboard(selected_days)
    await query.edit_message_text(
        "üìÖ **Trajet r√©gulier**\n\n"
        "S√©lectionnez les jours de la semaine pour votre trajet r√©gulier :",
        reply_markup=new_keyboard,
        parse_mode="Markdown"
    )
    
    return REGULAR_DAYS_SELECTION

async def handle_regular_days_continue(update: Update, context: CallbackContext):
    """Passe √† la s√©lection du calendrier interactif."""
    query = update.callback_query
    await query.answer()
    
    selected_days = context.user_data.get('selected_days', [])
    if not selected_days:
        await query.answer("Veuillez s√©lectionner au moins un jour.", show_alert=True)
        return REGULAR_DAYS_SELECTION
    
    # Initialiser le calendrier pour le mois actuel
    now = datetime.now()
    context.user_data['calendar_year'] = now.year
    context.user_data['calendar_month'] = now.month
    context.user_data['selected_calendar_dates'] = set()
    
    # Afficher le calendrier interactif
    calendar_keyboard = create_interactive_calendar(now.year, now.month, selected_days, set())
    
    await query.edit_message_text(
        f"üìÖ **S√©lection des dates pr√©cises**\n\n"
        f"üóìÔ∏è Jours choisis: {', '.join(selected_days)}\n\n"
        "Cliquez sur les dates que vous voulez pour vos trajets :\n"
        "‚úÖ = S√©lectionn√©\n"
        "‚òëÔ∏è = Disponible\n"
        "‚ùå = Jour non s√©lectionn√©",
        reply_markup=calendar_keyboard
    )
    
    return REGULAR_CALENDAR_SELECTION

def create_interactive_calendar(year, month, selected_days, selected_dates):
    """Cr√©e un calendrier interactif pour la s√©lection de dates."""
    import calendar as cal
    
    # Cr√©er le calendrier du mois
    month_calendar = cal.monthcalendar(year, month)
    days_mapping = {"Lundi": 0, "Mardi": 1, "Mercredi": 2, "Jeudi": 3, 
                   "Vendredi": 4, "Samedi": 5, "Dimanche": 6}
    
    keyboard = []
    
    # En-t√™te avec mois et ann√©e
    month_name = cal.month_name[month]
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"cal_nav:prev:{year}:{month}"),
        InlineKeyboardButton(f"{month_name} {year}", callback_data="cal_nav:ignore"),
        InlineKeyboardButton("‚û°Ô∏è", callback_data=f"cal_nav:next:{year}:{month}")
    ])
    
    # Jours de la semaine - maintenant cliquables pour s√©lection rapide
    keyboard.append([
        InlineKeyboardButton("L", callback_data="cal_day:select:0"),  # Lundi
        InlineKeyboardButton("M", callback_data="cal_day:select:1"),  # Mardi
        InlineKeyboardButton("M", callback_data="cal_day:select:2"),  # Mercredi
        InlineKeyboardButton("J", callback_data="cal_day:select:3"),  # Jeudi
        InlineKeyboardButton("V", callback_data="cal_day:select:4"),  # Vendredi
        InlineKeyboardButton("S", callback_data="cal_day:select:5"),  # Samedi
        InlineKeyboardButton("D", callback_data="cal_day:select:6")   # Dimanche
    ])
    
    # Dates du mois - MODIFICATION: Toutes les dates sont maintenant cliquables ind√©pendamment
    for week in month_calendar:
        week_buttons = []
        for day in week:
            if day == 0:
                # Jour vide
                week_buttons.append(InlineKeyboardButton(" ", callback_data="cal_nav:ignore"))
            else:
                # V√©rifier si cette date est s√©lectionn√©e
                date_str = f"{year}-{month:02d}-{day:02d}"
                today = datetime.now().date()
                date_obj = datetime(year, month, day).date()
                
                if date_obj < today:
                    # Date pass√©e - non cliquable
                    week_buttons.append(InlineKeyboardButton(f"‚ùå{day}", callback_data="cal_nav:ignore"))
                elif date_str in selected_dates:
                    # Date s√©lectionn√©e - cliquable pour d√©s√©lectionner
                    week_buttons.append(InlineKeyboardButton(f"‚úÖ{day}", callback_data=f"cal_date:toggle:{date_str}"))
                else:
                    # Date disponible - cliquable pour s√©lectionner
                    week_buttons.append(InlineKeyboardButton(f"‚òëÔ∏è{day}", callback_data=f"cal_date:toggle:{date_str}"))
        
        keyboard.append(week_buttons)
    
    # Boutons d'action
    keyboard.append([
        InlineKeyboardButton("üóëÔ∏è Effacer tout", callback_data="cal_date:clear"),
        InlineKeyboardButton("‚úÖ Confirmer", callback_data="cal_date:confirm")
    ])
    keyboard.append([
        InlineKeyboardButton("‚ùå Annuler", callback_data="create_trip:cancel")
    ])
    
    return InlineKeyboardMarkup(keyboard)

async def handle_calendar_interaction(update: Update, context: CallbackContext):
    """G√®re les interactions avec le calendrier interactif."""
    query = update.callback_query
    await query.answer()
    
    data_parts = query.data.split(":")
    
    if data_parts[0] == "cal_nav":
        if data_parts[1] == "ignore":
            return REGULAR_CALENDAR_SELECTION
        elif data_parts[1] in ["prev", "next"]:
            # Navigation entre mois
            year = int(data_parts[2])
            month = int(data_parts[3])
            
            if data_parts[1] == "prev":
                if month == 1:
                    month = 12
                    year -= 1
                else:
                    month -= 1
            else:  # next
                if month == 12:
                    month = 1
                    year += 1
                else:
                    month += 1
            
            context.user_data['calendar_year'] = year
            context.user_data['calendar_month'] = month
            
            selected_days = context.user_data.get('selected_days', [])
            selected_dates = context.user_data.get('selected_calendar_dates', set())
            
            calendar_keyboard = create_interactive_calendar(year, month, selected_days, selected_dates)
            
            await query.edit_message_text(
                f"üìÖ **S√©lection des dates pr√©cises**\n\n"
                f"üóìÔ∏è Jours choisis: {', '.join(selected_days)}\n\n"
                "Cliquez sur les dates que vous voulez pour vos trajets :\n"
                "‚úÖ = S√©lectionn√©\n"
                "‚òëÔ∏è = Disponible\n"
                "‚ùå = Jour non s√©lectionn√©",
                reply_markup=calendar_keyboard
            )
            
    elif data_parts[0] == "cal_day":
        # S√©lection rapide d'un jour de la semaine
        if data_parts[1] == "select":
            weekday_index = int(data_parts[2])
            weekday_names = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"]
            selected_weekday = weekday_names[weekday_index]
            
            # Initialiser ou r√©cup√©rer les donn√©es
            selected_days = context.user_data.get('selected_days', [])
            selected_dates = context.user_data.get('selected_calendar_dates', set())
            
            # Basculer la s√©lection de ce jour de la semaine
            if selected_weekday in selected_days:
                # D√©s√©lectionner ce jour
                selected_days.remove(selected_weekday)
                # Retirer toutes les dates de ce jour du calendrier
                year = context.user_data['calendar_year']
                month = context.user_data['calendar_month']
                dates_to_remove = []
                for date_str in selected_dates:
                    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                    if date_obj.weekday() == weekday_index and date_obj.year == year and date_obj.month == month:
                        dates_to_remove.append(date_str)
                for date_str in dates_to_remove:
                    selected_dates.remove(date_str)
            else:
                # S√©lectionner ce jour
                selected_days.append(selected_weekday)
                # Ajouter toutes les dates futures de ce jour dans le mois actuel
                year = context.user_data['calendar_year']
                month = context.user_data['calendar_month']
                today = datetime.now().date()
                
                import calendar as cal
                month_calendar = cal.monthcalendar(year, month)
                for week in month_calendar:
                    for day in week:
                        if day != 0:
                            date_obj = datetime(year, month, day).date()
                            if date_obj >= today and date_obj.weekday() == weekday_index:
                                selected_dates.add(f"{year}-{month:02d}-{day:02d}")
            
            context.user_data['selected_days'] = selected_days
            context.user_data['selected_calendar_dates'] = selected_dates
            
            # Mettre √† jour l'affichage du calendrier
            calendar_keyboard = create_interactive_calendar(
                context.user_data['calendar_year'],
                context.user_data['calendar_month'],
                selected_days,
                selected_dates
            )
            
            await query.edit_message_text(
                f"üìÖ **Trajet r√©gulier - S√©lection des dates**\n\n"
                f"üóìÔ∏è Jours s√©lectionn√©s: {', '.join(selected_days) if selected_days else 'Aucun'}\n"
                f"üìç Dates s√©lectionn√©es: {len(selected_dates)} date(s)\n\n"
                f"Cliquez directement sur les dates pour les s√©lectionner/d√©s√©lectionner\n"
                f"Ou utilisez **L, M, M, J, V, S, D** pour s√©lectionner tous les jours de cette semaine\n\n"
                f"‚úÖ = S√©lectionn√©\n"
                f"‚òëÔ∏è = Disponible\n"
                f"‚ùå = Date pass√©e",
                reply_markup=calendar_keyboard,
                parse_mode="Markdown"
            )
            
    elif data_parts[0] == "cal_date":
        if data_parts[1] == "toggle":
            # Basculer une date
            date_str = data_parts[2]
            selected_dates = context.user_data.get('selected_calendar_dates', set())
            
            if date_str in selected_dates:
                selected_dates.remove(date_str)
            else:
                selected_dates.add(date_str)
            
            context.user_data['selected_calendar_dates'] = selected_dates
            
            year = context.user_data['calendar_year']
            month = context.user_data['calendar_month']
            selected_days = context.user_data.get('selected_days', [])
            
            calendar_keyboard = create_interactive_calendar(year, month, selected_days, selected_dates)
            
            await query.edit_message_text(
                f"üìÖ **S√©lection des dates pr√©cises**\n\n"
                f"üóìÔ∏è Jours choisis: {', '.join(selected_days)}\n\n"
                f"üìä **Dates s√©lectionn√©es:** {len(selected_dates)}\n\n"
                "Cliquez sur les dates que vous voulez pour vos trajets :\n"
                "‚úÖ = S√©lectionn√©\n"
                "‚òëÔ∏è = Disponible\n"
                "‚ùå = Jour non s√©lectionn√©",
                reply_markup=calendar_keyboard
            )
            
        elif data_parts[1] == "clear":
            # Effacer toutes les dates
            context.user_data['selected_calendar_dates'] = set()
            
            year = context.user_data['calendar_year']
            month = context.user_data['calendar_month']
            selected_days = context.user_data.get('selected_days', [])
            
            calendar_keyboard = create_interactive_calendar(year, month, selected_days, set())
            
            await query.edit_message_text(
                f"üìÖ **S√©lection des dates pr√©cises**\n\n"
                f"üóìÔ∏è Jours choisis: {', '.join(selected_days)}\n\n"
                "Cliquez sur les dates que vous voulez pour vos trajets :\n"
                "‚úÖ = S√©lectionn√©\n"
                "‚òëÔ∏è = Disponible\n"
                "‚ùå = Jour non s√©lectionn√©",
                reply_markup=calendar_keyboard
            )
            
        elif data_parts[1] == "confirm":
            # Confirmer les dates s√©lectionn√©es
            selected_dates = context.user_data.get('selected_calendar_dates', set())
            
            if not selected_dates:
                await query.answer("Veuillez s√©lectionner au moins une date.", show_alert=True)
                return REGULAR_CALENDAR_SELECTION
            
            # Convertir en format lisible et continuer vers la s√©lection des villes
            dates_list = sorted(list(selected_dates))
            context.user_data['regular_dates'] = dates_list
            
            # Continuer vers la s√©lection de la ville de d√©part
            keyboard_dep = [
                [InlineKeyboardButton(city, callback_data=f"create_dep_city:{city}")] 
                for city in SWISS_CITIES_SUGGESTIONS[:5]
            ]
            keyboard_dep.append([InlineKeyboardButton("Autre ville...", callback_data="create_dep_other")])
            keyboard_dep.append([InlineKeyboardButton("‚ùå Annuler", callback_data="create_trip:cancel")])
            
            dates_display = "\n".join([f"üìÖ {datetime.strptime(d, '%Y-%m-%d').strftime('%A %d %B %Y')}" for d in dates_list[:5]])
            if len(dates_list) > 5:
                dates_display += f"\n... et {len(dates_list) - 5} autres dates"
            
            await query.edit_message_text(
                f"‚úÖ **Dates confirm√©es pour vos trajets r√©guliers**\n\n"
                f"{dates_display}\n\n"
                f"üìä **Total:** {len(dates_list)} trajet{'s' if len(dates_list) > 1 else ''}\n\n"
                "Maintenant, choisissez votre ville de d√©part :",
                reply_markup=InlineKeyboardMarkup(keyboard_dep)
            )
            return CREATE_DEPARTURE
    
    return REGULAR_CALENDAR_SELECTION

# --- HANDLERS pour les boutons apr√®s cr√©ation de trajet ---
async def handle_show_my_trips(update: Update, context: CallbackContext):
    """Affiche la liste des trajets de l'utilisateur apr√®s cr√©ation."""
    query = update.callback_query
    await query.answer()
    
    # Import dynamique pour √©viter les imports circulaires
    from handlers.trip_handlers import list_my_trips
    
    # Appel de la vraie fonction de listage des trajets
    return await list_my_trips(update, context)

async def handle_main_menu(update: Update, context: CallbackContext):
    """Affiche le menu principal apr√®s cr√©ation de trajet."""
    query = update.callback_query
    await query.answer()
    
    # Import dynamique pour √©viter les imports circulaires
    from handlers.menu_handlers import start_command
    
    # Appel de la vraie fonction du menu principal
    return await start_command(update, context)

# ConversationHandler pour la cr√©ation de trajet
create_trip_conv_handler = ConversationHandler(
    entry_points=[
        CommandHandler('creer', start_create_trip),
        CommandHandler('creer_trajet', start_create_trip),  # Ajout pour le menu hamburger
        CallbackQueryHandler(start_create_trip, pattern='^creer_trajet$'),
        CallbackQueryHandler(start_create_trip, pattern='^menu:create$'),
        CallbackQueryHandler(start_create_trip, pattern='^main_menu:create_trip$')
    ],
    states={
        CREATE_TRIP_TYPE: [
            CallbackQueryHandler(handle_create_trip_type, pattern='^create_trip_type:(driver|passenger)$'),
            CallbackQueryHandler(handle_create_cancel, pattern='^create_trip:cancel')
        ],
        CREATE_TRIP_OPTIONS: [
            CallbackQueryHandler(handle_create_trip_options, pattern='^create_trip_option:'),
            CallbackQueryHandler(handle_create_trip_options, pattern='^create_trip_options:continue$'),
            CallbackQueryHandler(handle_create_cancel, pattern='^create_trip:cancel')
        ],
        CREATE_DEPARTURE: [
            CallbackQueryHandler(handle_create_departure_city_callback, pattern='^create_dep_city:'),
            CallbackQueryHandler(handle_create_departure_city_callback, pattern='^create_dep_other$'),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_create_departure_text),
            CallbackQueryHandler(handle_create_departure_loc_callback, pattern='^create_dep_loc:'),
            CallbackQueryHandler(handle_create_departure_loc_callback, pattern='^create_dep_retry_text$'),
            CallbackQueryHandler(handle_create_cancel, pattern='^create_trip:cancel')
        ],
        CREATE_ARRIVAL: [
            CallbackQueryHandler(handle_create_arrival_city_callback, pattern='^create_arr_city:'),
            CallbackQueryHandler(handle_create_arrival_city_callback, pattern='^create_arr_other$'),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_create_arrival_text),
            CallbackQueryHandler(handle_create_arrival_loc_callback, pattern='^create_arr_loc:'),
            CallbackQueryHandler(handle_create_arrival_loc_callback, pattern='^create_arr_retry_text$'),
            CallbackQueryHandler(handle_create_cancel, pattern='^create_trip:cancel$')
        ],
        CREATE_CALENDAR: [
            # IMPORTANT: Order matters! The most specific patterns should come first
            CallbackQueryHandler(handle_calendar_date_selection, pattern=r"^create_cal_date:\d+:\d+:\d+$"),
            CallbackQueryHandler(handle_calendar_navigation, pattern=r"^create_cal_month:\d+:\d+:(prev|next)$"),
            CallbackQueryHandler(handle_calendar_retry, pattern=r"^create_trip:calendar_retry$"),
            CallbackQueryHandler(handle_create_cancel, pattern=r"^create_trip:cancel$"),
            CallbackQueryHandler(handle_unexpected_calendar_callback)  # Catch-all for unexpected callbacks
        ],
        HOUR: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_hour_input),
        ],
        CREATE_TIME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_manual_time_input),
            CallbackQueryHandler(handle_hour_selection, pattern=r"^create_hour:\d+$"),
            CallbackQueryHandler(handle_flex_time_selection, pattern=r"^create_flex_time:(morning|afternoon|evening|tbd)$"),
            CallbackQueryHandler(handle_create_cancel, pattern="^create_trip:cancel$")
        ],
        CREATE_MINUTE: [
            CallbackQueryHandler(handle_minute_selection, pattern=r"^create_minute:\d+:\d+$"),
            CallbackQueryHandler(handle_hour_selection, pattern="^create_back_to_hour$"),
            CallbackQueryHandler(handle_create_cancel, pattern="^create_trip:cancel$")
        ],
        CREATE_CONFIRM_DATETIME: [
            CallbackQueryHandler(handle_create_date_confirmed, pattern="^datetime:confirm$"),
            CallbackQueryHandler(handle_calendar_retry, pattern="^datetime:change$"),
            CallbackQueryHandler(handle_create_cancel, pattern="^datetime:cancel$")
        ],
        CREATE_SEATS: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_create_seats)
        ],
        CREATE_CONFIRM: [
            CallbackQueryHandler(handle_create_confirm, pattern='^create_confirm_yes$'),
            CallbackQueryHandler(handle_show_my_trips, pattern='^main_menu:my_trips$'),
            CallbackQueryHandler(handle_main_menu, pattern='^main_menu:start$'),
            CallbackQueryHandler(handle_create_cancel, pattern='^create_trip:cancel_confirm$')
        ],
        FLEX_HOUR: [
            CallbackQueryHandler(handle_flex_time_selection, pattern="^(create_flex_time:(morning|afternoon|evening|tbd)|time:\d{1,2}:\d{2}|flex_time:(morning|afternoon|evening|tbd|manual))$"),
        ],
        # Nouveaux √©tats pour trajets r√©guliers
        REGULAR_DAYS_SELECTION: [
            CallbackQueryHandler(handle_regular_day_toggle, pattern='^regular_day_toggle:\d+$'),
            CallbackQueryHandler(handle_regular_days_continue, pattern='^regular_days_continue$'),
            CallbackQueryHandler(handle_create_cancel, pattern='^create_trip:cancel$')
        ],
        REGULAR_CALENDAR_SELECTION: [
            CallbackQueryHandler(handle_calendar_interaction, pattern='^cal_nav:'),
            CallbackQueryHandler(handle_calendar_interaction, pattern='^cal_date:'),
            CallbackQueryHandler(handle_calendar_interaction, pattern='^cal_day:'),
            CallbackQueryHandler(handle_create_cancel, pattern='^create_trip:cancel$')
        ],
        REGULAR_TIME_TYPE: [
            CallbackQueryHandler(handle_regular_time_type, pattern='^regular_time:(same|individual)$'),
            CallbackQueryHandler(handle_create_cancel, pattern='^create_trip:cancel$')
        ],
        # Nouveaux √©tats pour trajets aller-retour
        RETURN_DATE: [
            # Utiliser les m√™mes handlers que pour la date normale
            CallbackQueryHandler(handle_calendar_date_selection, pattern=r"^create_cal_date:\d+:\d+:\d+$"),
            CallbackQueryHandler(handle_calendar_navigation, pattern=r"^create_cal_month:\d+:\d+:(prev|next)$"),
            CallbackQueryHandler(handle_calendar_retry, pattern=r"^create_trip:calendar_retry$"),
            CallbackQueryHandler(handle_create_cancel, pattern=r"^create_trip:cancel$"),
            CallbackQueryHandler(handle_unexpected_calendar_callback)
        ],
        RETURN_TIME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_manual_time_input),
            CallbackQueryHandler(handle_hour_selection, pattern=r"^create_hour:\d+$"),
            CallbackQueryHandler(handle_flex_time_selection, pattern=r"^create_flex_time:(morning|afternoon|evening|tbd)$"),
            CallbackQueryHandler(handle_create_cancel, pattern="^create_trip:cancel$")
        ],
        RETURN_CONFIRM_DATETIME: [
            CallbackQueryHandler(handle_return_date_confirmed, pattern="^datetime:confirm$"),
            CallbackQueryHandler(handle_calendar_retry, pattern="^datetime:change$"),
            CallbackQueryHandler(handle_create_cancel, pattern="^datetime:cancel$")
        ],
    },
    fallbacks=[
        CallbackQueryHandler(handle_create_cancel, pattern='^create_trip:cancel'),
        CommandHandler('cancel', handle_create_cancel),
        MessageHandler(filters.ALL & ~filters.Command(['chercher']), handle_unexpected_input)
    ],
    name="create_trip_conversation",
    persistent=True,
    allow_reentry=True,
    per_message=False,
    per_chat=False,
    per_user=True  # Chaque utilisateur a sa propre conversation
)

publish_trip_handler = CallbackQueryHandler(publish_created_trip, pattern=r"^publish_trip:\d+$")

# Handlers globaux pour les boutons apr√®s cr√©ation de trajet
main_menu_handler = CallbackQueryHandler(handle_main_menu, pattern=r"^main_menu:start$")
my_trips_handler = CallbackQueryHandler(handle_show_my_trips, pattern=r"^main_menu:my_trips$")
