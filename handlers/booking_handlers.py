from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, CallbackContext, CallbackQueryHandler, ConversationHandler
from database.models import Booking, Trip, User
from datetime import datetime
from paypal_utils import create_trip_payment
from database import get_db
import logging

logger = logging.getLogger(__name__)

CONFIRM_BOOKING = range(1)

async def book_trip(update: Update, context: CallbackContext):
    """D√©marre le processus de r√©servation"""
    trip_id = context.args[0] if context.args else None
    if not trip_id:
        await update.message.reply_text("Veuillez sp√©cifier un ID de trajet.")
        return

    trip = Trip.query.get(trip_id)
    # Correction : emp√™cher la r√©servation d'un trajet annul√©
    if not trip or getattr(trip, 'is_cancelled', False):
        await update.message.reply_text("Trajet non trouv√© ou annul√©.")
        return

    keyboard = [
        [
            InlineKeyboardButton("Confirmer", callback_data=f"confirm_booking_{trip_id}"),
            InlineKeyboardButton("Annuler", callback_data="cancel_booking")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"R√©servation du trajet:\n"
        f"De: {trip.departure_city}\n"
        f"√Ä: {trip.arrival_city}\n"
        f"Date: {trip.departure_time}\n"
        f"Prix: {trip.price_per_seat} CHF\n\n"
        f"Voulez-vous confirmer la r√©servation?",
        reply_markup=reply_markup
    )

async def confirm_booking_callback(update: Update, context: CallbackContext):
    """Confirme la r√©servation et redirige vers le paiement"""
    query = update.callback_query
    trip_id = query.data.split('_')[-1]
    
    # Cr√©er la r√©servation
    booking = Booking(
        trip_id=trip_id,
        passenger_id=update.effective_user.id,
        status='pending'
    )
    # Sauvegarder dans la base de donn√©es
    
    context.user_data['booking_id'] = booking.id
    await query.edit_message_text(
        "R√©servation enregistr√©e! Proc√©dons au paiement.",
    )
    await process_payment(update, context)

# Fonction manquante qui est appel√©e dans confirm_booking_callback
async def process_payment(update, context):
    """Redirige vers le processus de paiement"""
    query = update.callback_query
    await query.answer()
    
    # Cette fonction devrait normalement √™tre li√©e √† payment_handlers.py
    keyboard = [
        [InlineKeyboardButton("üí≥ Payer maintenant", callback_data=f"pay_booking_{context.user_data.get('booking_id')}")],
        [InlineKeyboardButton("‚ùå Annuler", callback_data="cancel_booking")]
    ]
    
    await query.edit_message_text(
        "Votre r√©servation a √©t√© cr√©√©e. Proc√©dez au paiement pour la confirmer.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def confirm_booking_with_payment(update: Update, context: CallbackContext):
    """Confirme la r√©servation et d√©clenche automatiquement le paiement PayPal"""
    query = update.callback_query
    await query.answer()
    
    trip_id = int(query.data.split('_')[-1])
    user_id = update.effective_user.id
    
    try:
        db = get_db()
        
        # V√©rifier que le trajet existe et n'est pas annul√©
        trip = db.query(Trip).filter(Trip.id == trip_id).first()
        if not trip or getattr(trip, 'is_cancelled', False):
            await query.edit_message_text("‚ùå Trajet non trouv√© ou annul√©.")
            return
        
        # V√©rifier les places disponibles
        if trip.available_seats <= 0:
            await query.edit_message_text("‚ùå Plus de places disponibles pour ce trajet.")
            return
        
        # V√©rifier si l'utilisateur existe
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            await query.edit_message_text("‚ùå Utilisateur non trouv√©. Utilisez /start d'abord.")
            return
        
        # V√©rifier si une r√©servation existe d√©j√†
        existing_booking = db.query(Booking).filter(
            Booking.trip_id == trip_id,
            Booking.passenger_id == user.id,
            Booking.status.in_(['confirmed', 'pending'])
        ).first()
        
        if existing_booking:
            await query.edit_message_text("‚ùå Vous avez d√©j√† une r√©servation pour ce trajet.")
            return
        
        # CORRECTION CRITIQUE: Calculer le prix dynamique bas√© sur le nombre de passagers
        from utils.swiss_pricing import calculate_price_per_passenger, round_to_nearest_0_05_up
        
        # Compter les passagers qui ont d√©j√† pay√©
        existing_paid_passengers = db.query(Booking).filter(
            Booking.trip_id == trip_id,
            Booking.payment_status.in_(['completed', 'paid'])
        ).count()
        
        # Le nouveau passager sera le (existing_paid_passengers + 1)√®me
        new_passenger_count = existing_paid_passengers + 1
        
        # R√©cup√©rer le prix total du trajet
        # Si le trajet a √©t√© cr√©√© avec l'ancienne logique, utiliser price_per_seat * seats_available
        total_trip_price = getattr(trip, 'total_trip_price', None)
        if not total_trip_price:
            # Fallback: Recalculer le prix total depuis la distance ou utiliser l'ancien syst√®me
            if hasattr(trip, 'total_distance') and trip.total_distance:
                from handlers.trip_handlers import compute_price_auto
                total_trip_price, _ = compute_price_auto(trip.departure_city, trip.arrival_city)
            else:
                # Estimation bas√©e sur le prix par place et le nombre de places
                total_trip_price = trip.price_per_seat * trip.seats_available
        
        # Calculer le prix par passager avec arrondi suisse
        price_per_passenger = calculate_price_per_passenger(total_trip_price, new_passenger_count)
        
        # Cr√©er la r√©servation
        booking = Booking(
            trip_id=trip_id,
            passenger_id=user.id,
            status='pending',
            total_price=price_per_passenger,  # Prix dynamique calcul√©
            booking_date=datetime.utcnow(),
            payment_status='pending'
        )
        
        db.add(booking)
        db.commit()
        db.refresh(booking)
        
        # Cr√©er automatiquement le paiement PayPal
        trip_description = f"{trip.departure_city} ‚Üí {trip.arrival_city}"
        success, payment_id, approval_url = create_trip_payment(
            amount=float(price_per_passenger),  # Utiliser le prix dynamique
            trip_description=trip_description,
            booking_id=booking.id  # Pour le suivi
        )
        
        if success and payment_id and approval_url:
            # Sauvegarder l'ID de paiement PayPal
            booking.paypal_payment_id = payment_id
            db.commit()
            
            # Cr√©er le clavier avec le lien de paiement
            keyboard = [
                [InlineKeyboardButton("üí≥ Payer maintenant avec PayPal", url=approval_url)],
                [InlineKeyboardButton("‚ùå Annuler la r√©servation", callback_data=f"cancel_booking_{booking.id}")]
            ]
            
            await query.edit_message_text(
                f"‚úÖ *R√©servation cr√©√©e !*\n\n"
                f"üöó **D√©tails du trajet :**\n"
                f"üìç De : {trip.departure_city}\n"
                f"üìç √Ä : {trip.arrival_city}\n"
                f"üìÖ Date : {trip.departure_time.strftime('%d/%m/%Y √† %H:%M')}\n"
                f"üí∞ Prix : {price_per_passenger:.2f} CHF par place\n"
                f"üë§ Conducteur : {trip.driver.full_name if trip.driver else 'Inconnu'}\n\n"
                f"üí≥ **Paiement requis**\n"
                f"üí° *Prix calcul√© pour {new_passenger_count} passager(s)*\n"
                f"Cliquez sur le bouton ci-dessous pour payer avec PayPal.\n"
                f"Votre place sera confirm√©e apr√®s le paiement.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            # Notifier le conducteur de la nouvelle r√©servation
            if trip.driver and trip.driver.telegram_id:
                try:
                    await context.bot.send_message(
                        chat_id=trip.driver.telegram_id,
                        text=(
                            f"üéâ **Nouvelle r√©servation !**\n\n"
                            f"Un passager a r√©serv√© votre trajet :\n"
                            f"üìç {trip.departure_city} ‚Üí {trip.arrival_city}\n"
                            f"üìÖ {trip.departure_time.strftime('%d/%m/%Y √† %H:%M')}\n"
                            f"üë§ Passager : {user.full_name or 'Nom non d√©fini'}\n\n"
                            f"‚è≥ En attente du paiement PayPal..."
                        ),
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"Erreur notification conducteur: {e}")
            
            logger.info(f"R√©servation cr√©√©e avec paiement PayPal: booking_id={booking.id}, payment_id={payment_id}")
            
        else:
            # Erreur lors de la cr√©ation du paiement PayPal
            db.delete(booking)
            db.commit()
            
            await query.edit_message_text(
                "‚ùå Erreur lors de la cr√©ation du paiement PayPal.\n"
                "Veuillez r√©essayer plus tard ou contacter le support."
            )
            
    except Exception as e:
        logger.error(f"Erreur lors de la r√©servation avec paiement: {e}")
        await query.edit_message_text(
            "‚ùå Erreur lors de la r√©servation. Veuillez r√©essayer plus tard."
        )

async def cancel_booking_callback(update: Update, context: CallbackContext):
    """Annule une r√©servation en attente"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel_booking":
        await query.edit_message_text("‚ùå R√©servation annul√©e.")
        return
    
    # Format: cancel_booking_{booking_id}
    booking_id = int(query.data.split('_')[-1])
    user_id = update.effective_user.id
    
    try:
        db = get_db()
        
        # Trouver la r√©servation
        user = db.query(User).filter(User.telegram_id == user_id).first()
        booking = db.query(Booking).filter(
            Booking.id == booking_id,
            Booking.passenger_id == user.id,
            Booking.status == 'pending'
        ).first()
        
        if not booking:
            await query.edit_message_text("‚ùå R√©servation non trouv√©e ou d√©j√† trait√©e.")
            return
        
        # Annuler la r√©servation
        booking.status = 'cancelled'
        booking.payment_status = 'cancelled'
        db.commit()
        
        await query.edit_message_text(
            "‚ùå **R√©servation annul√©e**\n\n"
            "Votre r√©servation a √©t√© annul√©e avec succ√®s.\n"
            "Si vous aviez commenc√© un paiement PayPal, il sera automatiquement annul√©.",
            parse_mode="Markdown"
        )
        
        logger.info(f"R√©servation {booking_id} annul√©e par l'utilisateur {user_id}")
        
    except Exception as e:
        logger.error(f"Erreur lors de l'annulation de r√©servation: {e}")
        await query.edit_message_text("‚ùå Erreur lors de l'annulation. Veuillez r√©essayer.")

async def check_booking_status(update: Update, context: CallbackContext):
    """Commande pour v√©rifier le statut des r√©servations"""
    user_id = update.effective_user.id
    
    try:
        db = get_db()
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            await update.message.reply_text("‚ùå Utilisateur non trouv√©. Utilisez /start d'abord.")
            return
        
        # R√©cup√©rer les r√©servations actives
        bookings = db.query(Booking).filter(
            Booking.passenger_id == user.id,
            Booking.status.in_(['pending', 'confirmed'])
        ).order_by(Booking.booking_date.desc()).limit(5).all()
        
        if not bookings:
            await update.message.reply_text(
                "üìã **Mes r√©servations**\n\n"
                "Vous n'avez aucune r√©servation active.",
                parse_mode="Markdown"
            )
            return
        
        message = "üìã **Mes r√©servations actives**\n\n"
        
        for booking in bookings:
            trip = booking.trip
            status_emoji = "‚è≥" if booking.status == 'pending' else "‚úÖ"
            payment_status = "üí≥ Paiement en attente" if booking.payment_status == 'pending' else "‚úÖ Pay√©"
            
            message += (
                f"{status_emoji} **R√©servation #{booking.id}**\n"
                f"üìç {trip.departure_city} ‚Üí {trip.arrival_city}\n"
                f"üìÖ {trip.departure_time.strftime('%d/%m/%Y √† %H:%M')}\n"
                f"üí∞ {booking.total_price} CHF\n"
                f"üìä Statut: {booking.status.title()}\n"
                f"üí≥ {payment_status}\n\n"
            )
        
        await update.message.reply_text(message, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Erreur v√©rification statut r√©servations: {e}")
        await update.message.reply_text("‚ùå Erreur lors de la v√©rification. Veuillez r√©essayer.")

def register(application):
    """Enregistre les handlers de r√©servation"""
    application.add_handler(CommandHandler("reserver", book_trip))
    application.add_handler(CallbackQueryHandler(
        confirm_booking_callback,
        pattern='^confirm_booking_'
    ))
    application.add_handler(CallbackQueryHandler(
        lambda u, c: u.callback_query.edit_message_text("R√©servation annul√©e."),
        pattern='^cancel_booking$'
    ))
    
    # Pour g√©rer les boutons book_{trip_id}
    application.add_handler(CallbackQueryHandler(
        lambda u, c: book_trip(u, c),
        pattern='^book_'
    ))
