#!/usr/bin/env python
"""
Script de correction urgente pour les relations SQLAlchemy.
Corrige les probl√®mes de relations ambigu√´s apr√®s l'ajout du syst√®me dual-role.
"""

import logging
from database import get_db
from database.db_manager import engine
from database.models import Base
from sqlalchemy import text

logger = logging.getLogger(__name__)

def fix_database_relations():
    """Corrige les relations de base de donn√©es et ajoute les colonnes manquantes."""
    
    db = get_db()
    
    try:
        logger.info("D√©but de la correction des relations de base de donn√©es...")
        
        # 1. Ajouter les colonnes manquantes √† la table bookings
        try:
            result = db.execute(text("PRAGMA table_info(bookings)"))
            columns = [row[1] for row in result.fetchall()]
            
            if 'booking_status' not in columns:
                logger.info("Ajout de la colonne booking_status √† la table bookings...")
                db.execute(text("ALTER TABLE bookings ADD COLUMN booking_status VARCHAR(50) DEFAULT 'pending'"))
                db.commit()
                logger.info("‚úÖ Colonne booking_status ajout√©e")
            
            if 'seats_booked' not in columns:
                logger.info("Ajout de la colonne seats_booked √† la table bookings...")
                db.execute(text("ALTER TABLE bookings ADD COLUMN seats_booked INTEGER DEFAULT 1"))
                db.commit()
                logger.info("‚úÖ Colonne seats_booked ajout√©e")
                
        except Exception as e:
            logger.error(f"Erreur lors de l'ajout des colonnes √† bookings: {e}")
            db.rollback()
            raise
        
        # 2. Ajouter les colonnes manquantes √† la table driver_proposals
        try:
            result = db.execute(text("PRAGMA table_info(driver_proposals)"))
            columns = [row[1] for row in result.fetchall()]
            
            if 'accepted_at' not in columns:
                logger.info("Ajout de la colonne accepted_at √† la table driver_proposals...")
                db.execute(text("ALTER TABLE driver_proposals ADD COLUMN accepted_at DATETIME"))
                db.commit()
                logger.info("‚úÖ Colonne accepted_at ajout√©e")
            
            if 'rejected_at' not in columns:
                logger.info("Ajout de la colonne rejected_at √† la table driver_proposals...")
                db.execute(text("ALTER TABLE driver_proposals ADD COLUMN rejected_at DATETIME"))
                db.commit()
                logger.info("‚úÖ Colonne rejected_at ajout√©e")
                
        except Exception as e:
            logger.error(f"Erreur lors de l'ajout des colonnes √† driver_proposals: {e}")
            db.rollback()
            raise
        
        # 3. Mettre √† jour les donn√©es existantes
        try:
            logger.info("Mise √† jour des donn√©es existantes...")
            
            # Copier seats vers seats_booked pour les r√©servations existantes
            db.execute(text("UPDATE bookings SET seats_booked = seats WHERE seats_booked IS NULL"))
            
            # S'assurer que booking_status a une valeur par d√©faut
            db.execute(text("UPDATE bookings SET booking_status = 'pending' WHERE booking_status IS NULL"))
            
            db.commit()
            logger.info("‚úÖ Donn√©es existantes mises √† jour")
            
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour des donn√©es: {e}")
            db.rollback()
            raise
        
        # 4. Recr√©er les tables avec les bonnes relations
        try:
            logger.info("Recr√©ation des tables avec relations corrig√©es...")
            Base.metadata.create_all(bind=engine)
            logger.info("‚úÖ Tables recre√©es avec relations corrig√©es")
            
        except Exception as e:
            logger.error(f"Erreur lors de la recr√©ation des tables: {e}")
            raise
        
        # 5. V√©rification finale
        try:
            logger.info("V√©rification de la correction...")
            
            # V√©rifier les tables principales
            trips_count = db.execute(text("SELECT COUNT(*) FROM trips")).scalar()
            bookings_count = db.execute(text("SELECT COUNT(*) FROM bookings")).scalar()
            proposals_count = db.execute(text("SELECT COUNT(*) FROM driver_proposals")).scalar()
            
            logger.info(f"‚úÖ Trajets: {trips_count}")
            logger.info(f"‚úÖ R√©servations: {bookings_count}")
            logger.info(f"‚úÖ Propositions: {proposals_count}")
            
        except Exception as e:
            logger.error(f"Erreur lors de la v√©rification: {e}")
            raise
        
        logger.info("üéâ Correction des relations termin√©e avec succ√®s !")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la correction: {e}")
        return False
    
    finally:
        db.close()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    
    print("üîß Correction des relations de base de donn√©es...")
    success = fix_database_relations()
    
    if success:
        print("‚úÖ Correction termin√©e avec succ√®s")
        print("Le bot peut maintenant red√©marrer normalement.")
    else:
        print("‚ùå Correction √©chou√©e")
        print("V√©rifiez les logs pour plus de d√©tails.")
