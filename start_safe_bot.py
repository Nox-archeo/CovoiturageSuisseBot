#!/usr/bin/env python3
"""
Script de d√©marrage s√©curis√© pour le bot de covoiturage suisse
Corrige automatiquement les probl√®mes de fichiers pickle corrompus
"""

import os
import pickle
import sys
from pathlib import Path

def fix_pickle_files():
    """Corrige les fichiers pickle corrompus"""
    pickle_files = ['bot_data.pickle', 'bot_data_complete_communes.pickle']
    
    for pickle_file in pickle_files:
        if os.path.exists(pickle_file):
            try:
                # Tester si le fichier peut √™tre lu
                with open(pickle_file, 'rb') as f:
                    pickle.load(f)
                print(f"‚úÖ {pickle_file} est valide")
            except Exception as e:
                print(f"‚ö†Ô∏è  {pickle_file} corrompu: {e}")
                
                # Sauvegarder l'ancien fichier
                backup_name = f"{pickle_file}.backup"
                if os.path.exists(backup_name):
                    os.remove(backup_name)
                os.rename(pickle_file, backup_name)
                print(f"üì¶ Ancien fichier sauvegard√© dans {backup_name}")
                
                # Cr√©er un nouveau fichier valide
                data = {
                    'user_data': {},
                    'chat_data': {},
                    'bot_data': {},
                    'conversations': {}
                }
                
                with open(pickle_file, 'wb') as f:
                    pickle.dump(data, f)
                print(f"‚úÖ Nouveau {pickle_file} cr√©√©")
        else:
            # Cr√©er le fichier s'il n'existe pas
            data = {
                'user_data': {},
                'chat_data': {},
                'bot_data': {},
                'conversations': {}
            }
            
            with open(pickle_file, 'wb') as f:
                pickle.dump(data, f)
            print(f"‚úÖ {pickle_file} cr√©√©")

def verify_system():
    """V√©rifie que tous les composants sont OK"""
    print("üîç V√âRIFICATION DU SYST√àME")
    print("=" * 40)
    
    # V√©rifier les fichiers de donn√©es critiques
    critical_files = [
        'data/swiss_localities.json',
        'database/covoiturage.db'
    ]
    
    for file_path in critical_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path} trouv√©")
        else:
            print(f"‚ùå {file_path} manquant")
            return False
    
    # Tester les imports critiques
    try:
        from utils.swiss_cities import find_locality
        from utils.route_distance import get_route_distance_km
        from handlers.create_trip_handler import compute_price_auto
        print("‚úÖ Imports critiques OK")
        
        # Test rapide de fonctionnalit√©
        result = find_locality('1727')
        if result:
            print(f"‚úÖ Recherche fonctionnelle: {result[0]['name']}")
        else:
            print("‚ùå Recherche non fonctionnelle")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur imports: {e}")
        return False
    
    return True

def main():
    """Fonction principale"""
    print("ü§ñ D√âMARRAGE S√âCURIS√â DU BOT DE COVOITURAGE SUISSE")
    print("=" * 60)
    
    # 1. Corriger les fichiers pickle
    print("\\nüîß Correction des fichiers pickle...")
    fix_pickle_files()
    
    # 2. V√©rifier le syst√®me
    print("\\nüîç V√©rification du syst√®me...")
    if not verify_system():
        print("‚ùå Le syst√®me n'est pas pr√™t")
        return 1
    
    # 3. D√©marrer le bot
    print("\\nüöÄ D√©marrage du bot...")
    try:
        import bot
        print("‚úÖ Bot import√© avec succ√®s")
        
        # D√©marrer le bot
        bot.main()
        
    except KeyboardInterrupt:
        print("\\n‚è∏Ô∏è  Bot arr√™t√© par l'utilisateur")
        return 0
    except Exception as e:
        print(f"‚ùå Erreur d√©marrage: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
