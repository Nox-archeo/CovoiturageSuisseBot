#!/usr/bin/env python
# filepath: /Users/margaux/CovoiturageSuisse/utils/location_picker.py
"""
Module de s√©lection de localit√© pour le bot CovoiturageSuisse.
Impl√©mente un s√©lecteur interactif de villes.
"""
import logging
import re
from typing import List, Dict, Tuple, Optional
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, CallbackQueryHandler, MessageHandler, filters
from utils.swiss_cities import load_localities, find_locality, format_locality_result

logger = logging.getLogger(__name__)

# Charger les localit√©s
SWISS_LOCALITIES = load_localities()

def search_cities(query: str, max_results: int = 5) -> List[Tuple[str, Dict]]:
    """
    Recherche des villes correspondant √† la requ√™te.
    
    Args:
        query: La requ√™te de recherche (nom ou NPA)
        max_results: Nombre maximum de r√©sultats √† retourner
        
    Returns:
        Liste des villes trouv√©es (nom, donn√©es)
    """
    results = []
    
    # V√©rifier si la requ√™te est un code postal
    is_zip = re.match(r'^\d{4}$', query.strip())
    
    if is_zip:
        # Recherche par NPA
        for name, data in SWISS_LOCALITIES.items():
            if data.get('zip') == query.strip():
                results.append((name, data))
                if len(results) >= max_results:
                    break
    
    # Si pas assez de r√©sultats par NPA, rechercher par nom
    if len(results) < max_results:
        # Pr√©parer la requ√™te pour recherche insensible √† la casse
        query_lower = query.lower()
        
        for name, data in SWISS_LOCALITIES.items():
            if query_lower in name.lower():
                # √âviter les doublons
                if not any(name == existing[0] for existing in results):
                    results.append((name, data))
                    if len(results) >= max_results:
                        break
    
    return results

def get_location_keyboard(results: List[Tuple[str, Dict]], action: str) -> InlineKeyboardMarkup:
    """
    Cr√©e un clavier avec les r√©sultats de recherche de localit√©s.
    
    Args:
        results: Liste des r√©sultats (nom, donn√©es)
        action: Pr√©fixe de l'action pour les callback_data (ex: "departure" ou "arrival")
        
    Returns:
        Clavier InlineKeyboardMarkup avec les r√©sultats
    """
    keyboard = []
    
    # Ajouter un bouton pour chaque r√©sultat
    for name, data in results:
        # Afficher le nom et le NPA
        button_text = f"{name} ({data.get('zip', 'N/A')})"
        callback_data = f"{action}:{name}"
        
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    # Bouton pour rechercher √† nouveau
    keyboard.append([InlineKeyboardButton("üîç Nouvelle recherche", callback_data=f"{action}:search")])
    
    # Bouton pour annuler
    keyboard.append([InlineKeyboardButton("‚ùå Annuler", callback_data=f"{action}:cancel")])
    
    return InlineKeyboardMarkup(keyboard)

def get_popular_cities_keyboard(action: str) -> InlineKeyboardMarkup:
    """
    Cr√©e un clavier avec les villes populaires.
    
    Args:
        action: Pr√©fixe de l'action pour les callback_data (ex: "departure" ou "arrival")
        
    Returns:
        Clavier InlineKeyboardMarkup avec les villes populaires
    """
    popular_cities = [
        "Z√ºrich", "Gen√®ve", "B√¢le", "Lausanne", "Berne", 
        "Lucerne", "Fribourg", "Neuch√¢tel", "Sion"
    ]
    
    keyboard = []
    for i in range(0, len(popular_cities), 3):
        row = []
        for city in popular_cities[i:i+3]:
            row.append(InlineKeyboardButton(city, callback_data=f"{action}:{city}"))
        keyboard.append(row)
    
    # Bouton pour recherche personnalis√©e
    keyboard.append([InlineKeyboardButton("üîç Autre ville...", callback_data=f"{action}:search")])
    
    # Bouton pour annuler
    keyboard.append([InlineKeyboardButton("‚ùå Annuler", callback_data=f"{action}:cancel")])
    
    return InlineKeyboardMarkup(keyboard)

async def start_location_selection(update: Update, context: CallbackContext, action: str, message_text: str):
    """
    Lance le processus de s√©lection de localit√©.
    
    Args:
        update: Update Telegram
        context: Contexte de la conversation
        action: Pr√©fixe de l'action pour les callback_data (ex: "departure" ou "arrival")
        message_text: Texte √† afficher dans le message
    
    Returns:
        Prochain √©tat de la conversation ("ENTERING_LOCATION")
    """
    keyboard = get_popular_cities_keyboard(action)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=keyboard
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=keyboard
        )
    
    # Sauvegarder l'action pour pouvoir l'utiliser dans le handler de message
    context.user_data['location_action'] = action
    
    return "ENTERING_LOCATION"

async def handle_location_selection(update: Update, context: CallbackContext, next_state: str):
    """
    G√®re la s√©lection d'une localit√© dans le clavier.
    
    Args:
        update: Update Telegram
        context: Contexte de la conversation
        next_state: √âtat suivant dans la conversation
    
    Returns:
        Prochain √©tat de la conversation
    """
    query = update.callback_query
    await query.answer()
    
    # Extraire action et valeur
    action, value = query.data.split(':', 1)
    
    if value == "search":
        # L'utilisateur veut faire une recherche personnalis√©e
        await query.edit_message_text(
            "üèôÔ∏è Entrez le nom de la ville ou le code postal (NPA):"
        )
        # Sauvegarder l'action pour l'utiliser ensuite
        context.user_data['location_action'] = action
        return "SEARCHING_LOCATION"
    
    elif value == "cancel":
        # L'utilisateur annule
        await query.edit_message_text("‚ùå S√©lection de localit√© annul√©e.")
        return "CANCEL"
    
    else:
        # L'utilisateur a s√©lectionn√© une ville
        city_name = value
        
        # Stocker la ville s√©lectionn√©e dans context.user_data
        context.user_data[action] = city_name
        
        # Message de confirmation
        action_text = "de d√©part" if action == "departure" else "d'arriv√©e" if action == "arrival" else ""
        await query.edit_message_text(f"‚úÖ Ville {action_text} s√©lectionn√©e: *{city_name}*", parse_mode="Markdown")
        
        # Passer √† l'√©tape suivante
        return next_state

async def handle_location_query(update: Update, context: CallbackContext):
    """
    G√®re la recherche de localit√© lorsque l'utilisateur entre un texte.
    
    Args:
        update: Update Telegram
        context: Contexte de la conversation
    
    Returns:
        Prochain √©tat de la conversation
    """
    query_text = update.message.text.strip()
    action = context.user_data.get('location_action', 'location')
    
    # Rechercher les villes correspondantes
    results = search_cities(query_text)
    
    if not results:
        # Aucun r√©sultat trouv√©
        await update.message.reply_text(
            "‚ùå Aucune ville trouv√©e. Veuillez r√©essayer avec un autre nom ou code postal."
        )
        return "SEARCHING_LOCATION"
    
    # Afficher les r√©sultats sous forme de boutons
    keyboard = get_location_keyboard(results, action)
    
    await update.message.reply_text(
        "üèôÔ∏è S√©lectionnez une ville parmi les r√©sultats:",
        reply_markup=keyboard
    )
    
    return "SELECTING_FROM_RESULTS"

# Ne pas d√©finir directement des handlers ici, ils doivent √™tre cr√©√©s par le module qui les utilise
# D√©finition des patterns regex pour les handlers
LOCATION_SELECTION_PATTERN = r"^(departure|arrival):.+$"

# Documentation pour aider √† la cr√©ation des handlers
"""
Pour utiliser les fonctions de ce module dans un ConversationHandler:

location_handlers = {
    "ENTERING_LOCATION": [
        CallbackQueryHandler(
            lambda u, c: handle_location_selection(u, c, "NEXT_STATE"), 
            pattern=LOCATION_SELECTION_PATTERN
        )
    ],
    "SEARCHING_LOCATION": [
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_location_query)
    ],
    "SELECTING_FROM_RESULTS": [
        CallbackQueryHandler(
            lambda u, c: handle_location_selection(u, c, "NEXT_STATE"), 
            pattern=LOCATION_SELECTION_PATTERN
        )
    ]
}
"""
