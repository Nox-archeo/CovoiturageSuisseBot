#!/usr/bin/env python
# filepath: /Users/margaux/CovoiturageSuisse/utils/date_picker.py
"""
Module de s√©lection de date et heure pour le bot CovoiturageSuisse.
Impl√©mente un s√©lecteur interactif de date et d'heure avec des boutons.
"""
import calendar
import logging
import locale
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, CallbackQueryHandler

logger = logging.getLogger(__name__)

# D√©finition des patterns pour les callbacks du calendrier
CALENDAR_NAVIGATION_PATTERN = r"^calendar:(prev|next|month):\d+:\d+$"
CALENDAR_DAY_SELECTION_PATTERN = r"^calendar:day:\d+:\d+:\d+$"
CALENDAR_CANCEL_PATTERN = r"^calendar:cancel$"
TIME_SELECTION_PATTERN = r"^time:\d+:\d+$|^hour:\d+$"
# Pattern pour les options d'horaires flexibles
FLEX_TIME_PATTERN = r"^flex_time:(.+)$"

TIME_BACK_PATTERN = r"^time:back$"
TIME_CANCEL_PATTERN = r"^time:cancel$"

# Configurer le locale pour avoir les noms de mois en fran√ßais
try:
    locale.setlocale(locale.LC_TIME, 'fr_FR.UTF-8')
except locale.Error:
    try:
        locale.setlocale(locale.LC_TIME, 'fr_FR')
    except locale.Error:
        logger.warning("Impossible de configurer le locale fran√ßais, utilisation du locale par d√©faut.")

# Noms de jours et mois en fran√ßais (fallback si locale ne fonctionne pas)
DAYS_FR = ["Lun", "Mar", "Mer", "Jeu", "Ven", "Sam", "Dim"]
MONTHS_FR = [
    "Janvier", "F√©vrier", "Mars", "Avril", "Mai", "Juin",
    "Juillet", "Ao√ªt", "Septembre", "Octobre", "Novembre", "D√©cembre"
]

def create_date_buttons():
    """Cr√©e des boutons pour la s√©lection rapide de dates."""
    today = datetime.now().date()
    keyboard = []
    
    # Dates rapides : Aujourd'hui, Demain, Ce week-end
    keyboard.append([
        InlineKeyboardButton("üóìÔ∏è Aujourd'hui", callback_data=f"quick_date:{today.strftime('%Y-%m-%d')}"),
        InlineKeyboardButton("üìÖ Demain", callback_data=f"quick_date:{(today + timedelta(days=1)).strftime('%Y-%m-%d')}")
    ])
    
    # Prochains jours
    next_dates = []
    for i in range(2, 5):  # Jour +2, +3, +4
        date_option = today + timedelta(days=i)
        day_name = DAYS_FR[date_option.weekday()]
        date_text = f"{day_name} {date_option.day}/{date_option.month}"
        next_dates.append(InlineKeyboardButton(
            date_text, 
            callback_data=f"quick_date:{date_option.strftime('%Y-%m-%d')}"
        ))
    
    # Ajouter par paires
    for i in range(0, len(next_dates), 2):
        row = next_dates[i:i+2]
        keyboard.append(row)
    
    # Bouton calendrier complet
    keyboard.append([InlineKeyboardButton("üìÜ Calendrier complet", callback_data="show_calendar")])
    
    return InlineKeyboardMarkup(keyboard)

def format_date_display(date_obj):
    """Formate une date pour l'affichage."""
    if isinstance(date_obj, str):
        # Si c'est une cha√Æne, essayer de la parser
        try:
            date_obj = datetime.strptime(date_obj, '%Y-%m-%d').date()
        except:
            return date_obj
    
    if hasattr(date_obj, 'date'):
        date_obj = date_obj.date()
    
    today = datetime.now().date()
    
    if date_obj == today:
        return "Aujourd'hui"
    elif date_obj == today + timedelta(days=1):
        return "Demain"
    else:
        day_name = DAYS_FR[date_obj.weekday()]
        return f"{day_name} {date_obj.day}/{date_obj.month}/{date_obj.year}"

def get_calendar_keyboard(year, month):
    """G√©n√®re un clavier de calendrier interactif pour le mois sp√©cifi√©"""
    keyboard = []
    
    # En-t√™te avec mois et ann√©e
    month_name = MONTHS_FR[month-1]
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"calendar:prev:{year}:{month}"),
        InlineKeyboardButton(f"{month_name} {year}", callback_data=f"calendar:month:{year}:{month}"),
        InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"calendar:next:{year}:{month}")
    ])
    
    # Jours de la semaine
    keyboard.append([InlineKeyboardButton(day, callback_data="calendar:ignore") for day in DAYS_FR])
    
    # R√©cup√©rer les jours du mois
    cal = calendar.monthcalendar(year, month)
    today = datetime.now().date()
    
    # G√©n√©rer les boutons pour chaque jour
    for week in cal:
        row = []
        for day in week:
            if day == 0:
                # Jour vide (hors du mois)
                row.append(InlineKeyboardButton(" ", callback_data="calendar:ignore"))
            else:
                # V√©rifier si le jour est dans le pass√©
                current_date = datetime(year, month, day).date()
                
                if current_date < today:
                    # Jour pass√© - d√©sactiv√©
                    row.append(InlineKeyboardButton("‚úñÔ∏è", callback_data="calendar:ignore"))
                else:
                    # Jour valide - s√©lectionnable
                    row.append(InlineKeyboardButton(
                        str(day),
                        callback_data=f"calendar:day:{year}:{month}:{day}"
                    ))
        keyboard.append(row)
    
    # Bouton pour annuler
    keyboard.append([InlineKeyboardButton("‚ùå Annuler", callback_data="calendar:cancel")])
    
    return InlineKeyboardMarkup(keyboard)

def get_time_keyboard(selected_date=None):
    """Renvoie le clavier pour la s√©lection de l'heure
    
    Args:
        selected_date (datetime, optional): La date s√©lectionn√©e. Defaults to None.
    """
    keyboard = []
    
    # Heures standards (0-23)
    for i in range(0, 24, 3):
        row = []
        for h in range(i, min(i+3, 24)):
            hour_str = f"{h:02d}"
            row.append(InlineKeyboardButton(hour_str, callback_data=f"time:{hour_str}"))
        keyboard.append(row)
    
    # Options d'horaires flexibles
    keyboard.append([
        InlineKeyboardButton("üïó Matin√©e (6h-12h)", callback_data="flex_time:morning")
    ])
    keyboard.append([
        InlineKeyboardButton("üåá Apr√®s-midi (12h-18h)", callback_data="flex_time:afternoon")
    ])
    keyboard.append([
        InlineKeyboardButton("üåô Soir√©e (18h-23h)", callback_data="flex_time:evening")
    ])
    keyboard.append([
        InlineKeyboardButton("‚è∞ Heure √† d√©finir", callback_data="flex_time:tbd")
    ])
    
    # Boutons de navigation
    keyboard.append([
        InlineKeyboardButton("üîô Retour", callback_data="time:back"),
        InlineKeyboardButton("‚ùå Annuler", callback_data="time:cancel")
    ])
    
    return InlineKeyboardMarkup(keyboard)
def get_minute_keyboard(selected_hour):
    """G√©n√®re un clavier pour s√©lectionner les minutes"""
    keyboard = []
    
    # G√©n√©rer les minutes par intervalles de 5
    minutes = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]
    
    # Cr√©er des boutons pour chaque minute (4 par ligne)
    for i in range(0, len(minutes), 4):
        row = []
        for m in minutes[i:i+4]:
            minute_str = f"{m:02d}"
            row.append(InlineKeyboardButton(
                minute_str,
                callback_data=f"minute:{selected_hour}:{m}"
            ))
        keyboard.append(row)
    
    # Bouton pour revenir au s√©lecteur d'heures
    keyboard.append([
        InlineKeyboardButton("üîô Retour", callback_data="minute:back"),
        InlineKeyboardButton("‚ùå Annuler", callback_data="minute:cancel")
    ])
    
    return InlineKeyboardMarkup(keyboard)

async def handle_calendar_navigation(update: Update, context: CallbackContext):
    """G√®re la navigation dans le calendrier"""
    query = update.callback_query
    await query.answer()
    
    # Extraire les donn√©es du callback
    _, action, year, month = query.data.split(':')
    year, month = int(year), int(month)
    
    if action == 'prev':
        # Mois pr√©c√©dent
        if month == 1:
            month = 12
            year -= 1
        else:
            month -= 1
    elif action == 'next':
        # Mois suivant
        if month == 12:
            month = 1
            year += 1
        else:
            month += 1
    
    # Mettre √† jour le calendrier
    await query.edit_message_text(
        "üìÖ S√©lectionnez une date pour votre trajet:",
        reply_markup=get_calendar_keyboard(year, month)
    )
    return "CALENDAR"

async def handle_day_selection(update: Update, context: CallbackContext):
    """G√®re la s√©lection d'un jour dans le calendrier"""
    query = update.callback_query
    await query.answer()
    
    # Extraire la date s√©lectionn√©e
    _, _, year, month, day = query.data.split(':')
    selected_date = datetime(int(year), int(month), int(day))
    
    # Sauvegarder la date dans le contexte
    context.user_data['selected_date'] = selected_date
    
    # Afficher le s√©lecteur d'heure
    await query.edit_message_text(
        f"üïí S√©lectionnez l'heure pour le {selected_date.strftime('%d %B %Y')}:",
        reply_markup=get_time_keyboard(selected_date)
    )
    return "TIME"

async def handle_time_selection(update: Update, context: CallbackContext):
    """G√®re la s√©lection de l'heure et redirige vers la s√©lection des minutes"""
    query = update.callback_query
    await query.answer()
    
    # V√©rifier s'il s'agit d'une option d'horaire flexible
    if query.data.startswith("flex_time:"):
        return await handle_flex_time_selection(update, context)
    
    # V√©rifier si c'est un pattern hour: ou time:
    if query.data.startswith("hour:"):
        # Nouvelle logique pour s√©lection de l'heure uniquement
        _, hour = query.data.split(':')
        hour = int(hour)
        
        # Stocker temporairement l'heure s√©lectionn√©e
        context.user_data['selected_hour'] = hour
        
        # R√©cup√©rer la date s√©lectionn√©e
        selected_date = context.user_data.get('selected_date')
        if not selected_date:
            logger.error("Date non trouv√©e dans le contexte")
            await query.edit_message_text(
                "‚ùå Erreur: La date n'a pas √©t√© d√©finie. Veuillez r√©essayer."
            )
            return "CANCEL"
        
        # Afficher le s√©lecteur de minutes
        await query.edit_message_text(
            f"‚è±Ô∏è S√©lectionnez les minutes pour {selected_date.strftime('%d %B %Y')} √† {hour:02d}h :",
            reply_markup=get_minute_keyboard(hour)
        )
        return "MINUTE"
    
    elif query.data.startswith("time:"):
        # Ancien format pour compatibilit√© - extraire l'heure et les minutes
        _, hour, minute = query.data.split(':')
        hour, minute = int(hour), int(minute)
        
        # R√©cup√©rer la date s√©lectionn√©e
        selected_date = context.user_data.get('selected_date')
        if not selected_date:
            logger.error("Date non trouv√©e dans le contexte")
            await query.edit_message_text(
                "‚ùå Erreur: La date n'a pas √©t√© d√©finie. Veuillez r√©essayer."
            )
            return "CANCEL"
        
        # Cr√©er l'objet datetime complet
        selected_datetime = selected_date.replace(hour=hour, minute=minute)
        context.user_data['selected_datetime'] = selected_datetime
        
        # Formater pour l'affichage
        formatted_date = selected_datetime.strftime('%d %B %Y √† %H:%M')
        
        # Passer directement √† l'√©tape de confirmation
        keyboard = [
            [InlineKeyboardButton("‚úÖ Confirmer", callback_data="datetime:confirm")],
            [InlineKeyboardButton("üîÑ Changer", callback_data="datetime:change")],
            [InlineKeyboardButton("‚ùå Annuler", callback_data="datetime:cancel")]
        ]
        
        await query.edit_message_text(
            f"üìÖ Date et heure s√©lectionn√©es:\n\n"
            f"*{formatted_date}*\n\n"
            f"Confirmer cette s√©lection?",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return "EDIT_CONFIRM_DATETIME"
    
    # Cas impr√©vu
    logger.error(f"Format de donn√©es non reconnu: {query.data}")
    await query.edit_message_text("‚ùå Erreur: Format d'heure non reconnu.")
    return "CANCEL"

async def handle_minute_selection(update: Update, context: CallbackContext):
    """G√®re la s√©lection des minutes"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("minute:back"):
        # Retour √† la s√©lection de l'heure
        selected_date = context.user_data.get('selected_date')
        if not selected_date:
            logger.error("Date non trouv√©e dans le contexte")
            return "CANCEL"
        
        await query.edit_message_text(
            f"üïí S√©lectionnez l'heure pour le {selected_date.strftime('%d %B %Y')}:",
            reply_markup=get_time_keyboard(selected_date)
        )
        return "TIME"
    
    elif query.data.startswith("minute:cancel"):
        await query.edit_message_text("‚ùå S√©lection de l'heure annul√©e.")
        return "CANCEL"
    
    # Extraire l'heure et les minutes
    _, selected_hour, selected_minute = query.data.split(':')
    hour, minute = int(selected_hour), int(selected_minute)
    
    # R√©cup√©rer la date s√©lectionn√©e
    selected_date = context.user_data.get('selected_date')
    if not selected_date:
        logger.error("Date non trouv√©e dans le contexte")
        await query.edit_message_text(
            "‚ùå Erreur: La date n'a pas √©t√© d√©finie. Veuillez r√©essayer."
        )
        return "CANCEL"
    
    # Cr√©er l'objet datetime complet
    selected_datetime = selected_date.replace(hour=hour, minute=minute)
    
    # V√©rifier si on s√©lectionne une date de retour
    selecting_return = context.user_data.get('selecting_return', False)
    if selecting_return:
        context.user_data['return_selected_datetime'] = selected_datetime
        logger.debug(f"[DATE_PICKER] Date de RETOUR stock√©e: {selected_datetime}")
    else:
        context.user_data['selected_datetime'] = selected_datetime
        logger.debug(f"[DATE_PICKER] Date d'ALLER stock√©e: {selected_datetime}")
    
    # Formater pour l'affichage
    formatted_date = selected_datetime.strftime('%d %B %Y √† %H:%M')
    
    # Afficher l'√©cran de confirmation
    keyboard = [
        [InlineKeyboardButton("‚úÖ Confirmer", callback_data="datetime:confirm")],
        [InlineKeyboardButton("üîÑ Changer", callback_data="datetime:change")],
        [InlineKeyboardButton("‚ùå Annuler", callback_data="datetime:cancel")]
    ]
    
    await query.edit_message_text(
        f"üìÖ Date et heure s√©lectionn√©es:\n\n"
        f"*{formatted_date}*\n\n"
        f"Confirmer cette s√©lection?",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return "EDIT_CONFIRM_DATETIME"

async def handle_datetime_action(update: Update, context: CallbackContext, next_state=None):
    """G√®re les actions apr√®s la s√©lection de date/heure"""
    query = update.callback_query
    await query.answer()
    
    logger.debug(f"handle_datetime_action appel√© avec data={query.data}, next_state={next_state}")
    
    _, action = query.data.split(':')
    
    if action == 'confirm':
        # R√©cup√©rer la date appropri√©e selon le contexte
        selecting_return = context.user_data.get('selecting_return', False)
        if selecting_return:
            selected_datetime = context.user_data.get('return_selected_datetime')
            logger.debug(f"[DATE_PICKER] Confirmation date RETOUR: {selected_datetime}")
        else:
            selected_datetime = context.user_data.get('selected_datetime')
            logger.debug(f"[DATE_PICKER] Confirmation date ALLER: {selected_datetime}")
            
        if not selected_datetime:
            logger.error("Date/heure non trouv√©e dans le contexte")
            await query.edit_message_text("‚ùå Erreur: Date/heure non d√©finie.")
            return "CANCEL"
        
        # La date a √©t√© confirm√©e - passez √† l'√©tape suivante d√©finie par le param√®tre next_state
        logger.info(f"Date confirm√©e: {selected_datetime}, passage √† l'√©tat suivant: {next_state}")
        
        # Si next_state est une fonction, l'appeler
        if callable(next_state):
            logger.info(f"next_state est une fonction: {next_state.__name__}")
            return await next_state(update, context)
        # Sinon, c'est probablement une constante d'√©tat
        else:
            logger.info(f"next_state est une constante: {next_state}")
            # S'assurer que nous retournons bien la valeur, m√™me si elle est None
            return next_state
    
    elif action == 'change':
        # Revenir au s√©lecteur de calendrier
        now = datetime.now()
        await query.edit_message_text(
            "üìÖ S√©lectionnez une date pour votre trajet:",
            reply_markup=get_calendar_keyboard(now.year, now.month)
        )
        return "CALENDAR"
    
    elif action == 'cancel':
        await query.edit_message_text("‚ùå S√©lection de date annul√©e.")
        return "CANCEL"
    
    # Cas par d√©faut
    await query.edit_message_text("‚ùå Action non reconnue.")
    return "CANCEL"

async def start_date_selection(
    update: Update,
    context: CallbackContext,
    message: str = "Select date:",
    next_state=None,  # Utiliser ce param√®tre au lieu de next_state_after_confirm
    calendar_state=None,
    time_state=None,
    minute_state=None,
    datetime_confirm_state=None,
    action_prefix="cal"
):
    """Lance la s√©lection de date."""
    logger.debug(f"D√©marrage date_picker avec context.user_data: {context.user_data}")
    now = datetime.now()
    
    # Message par d√©faut si non sp√©cifi√©
    if not message:
        message = "üìÖ S√©lectionnez une date pour votre trajet:"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message,
            reply_markup=get_calendar_keyboard(now.year, now.month)
        )
    else:
        await update.message.reply_text(
            message,
            reply_markup=get_calendar_keyboard(now.year, now.month)
        )
    
    return "CALENDAR"

# Ne pas d√©finir directement des handlers ici, ils doivent √™tre cr√©√©s par le module qui les utilise
# D√©finition des patterns regex pour les handlers
CALENDAR_NAVIGATION_PATTERN = r"^calendar:(prev|next|month):\d+:\d+$"
CALENDAR_DAY_SELECTION_PATTERN = r"^calendar:day:\d+:\d+:\d+$"
CALENDAR_CANCEL_PATTERN = r"^calendar:cancel$"
TIME_SELECTION_PATTERN = r"^time:\d+:\d+$|^hour:\d+$"
TIME_BACK_PATTERN = r"^time:back$"
TIME_CANCEL_PATTERN = r"^time:cancel$"
MINUTE_SELECTION_PATTERN = r"^minute:\d+:\d+$"
MINUTE_BACK_PATTERN = r"^minute:back$"
MINUTE_CANCEL_PATTERN = r"^minute:cancel$"
DATETIME_ACTION_PATTERN = r"^datetime:(confirm|change|cancel)$"

# Documentation pour aider √† la cr√©ation des handlers
"""
Pour utiliser les fonctions de ce module dans un ConversationHandler:

calendar_handlers = {
    "CALENDAR": [
        CallbackQueryHandler(handle_calendar_navigation, pattern=CALENDAR_NAVIGATION_PATTERN),
        CallbackQueryHandler(handle_day_selection, pattern=CALENDAR_DAY_SELECTION_PATTERN),
        CallbackQueryHandler(lambda u, c: "CANCEL", pattern=CALENDAR_CANCEL_PATTERN)
    ],
    "TIME": [
        CallbackQueryHandler(handle_time_selection, pattern=TIME_SELECTION_PATTERN),
        CallbackQueryHandler(lambda u, c: start_date_selection(u, c), pattern=TIME_BACK_PATTERN),
        CallbackQueryHandler(lambda u, c: "CANCEL", pattern=TIME_CANCEL_PATTERN)
    ],
    "MINUTE": [
        CallbackQueryHandler(handle_minute_selection, pattern=MINUTE_SELECTION_PATTERN),
        CallbackQueryHandler(handle_minute_selection, pattern=MINUTE_BACK_PATTERN),
        CallbackQueryHandler(lambda u, c: "CANCEL", pattern=MINUTE_CANCEL_PATTERN)
    ]
}
"""

async def handle_flex_time_selection(update: Update, context: CallbackContext):
    """G√®re la s√©lection d'horaire flexible"""
    query = update.callback_query
    await query.answer()
    
    _, option = query.data.split(":", 1)
    
    time_mapping = {
        "morning": "Dans la matin√©e (6h-12h)",
        "afternoon": "L'apr√®s-midi (12h-18h)",
        "evening": "En soir√©e (18h-23h)",
        "tbd": "Heure √† d√©finir"
    }
    
    # Stocker l'option horaire flexible
    context.user_data['flex_time'] = option
    context.user_data['flex_time_display'] = time_mapping.get(option, "Horaire flexible")
    
    # Cr√©er un datetime factice pour maintenir la compatibilit√©
    from datetime import datetime
    today = datetime.now().date()
    if option == "morning":
        hour = 9
    elif option == "afternoon":
        hour = 14
    elif option == "evening":
        hour = 20
    else:  # tbd
        hour = 12
    
    # Stocker le datetime flexible
    flex_datetime = datetime.combine(today, datetime.min.time().replace(hour=hour))
    context.user_data['selected_datetime'] = flex_datetime
    context.user_data['is_flex_time'] = True
    
    # Afficher la confirmation
    keyboard = [
        [InlineKeyboardButton("‚úÖ Confirmer", callback_data="datetime:confirm")],
        [InlineKeyboardButton("üîÑ Changer", callback_data="datetime:change")],
        [InlineKeyboardButton("‚ùå Annuler", callback_data="datetime:cancel")]
    ]
    
    await query.edit_message_text(
        f"üìÖ *Date s√©lectionn√©e:* {flex_datetime.strftime('%d/%m/%Y')}\n"
        f"‚è∞ *Heure:* {context.user_data['flex_time_display']}\n\n"
        "Confirmez-vous cette s√©lection?",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    
    return "EDIT_CONFIRM_DATETIME"
