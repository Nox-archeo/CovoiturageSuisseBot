#!/usr/bin/env python3
"""
Script d'urgence pour recr√©er les tables PostgreSQL avec le bon sch√©ma
√Ä utiliser si la migration normale √©choue
"""

import os
import sys
import logging
from dotenv import load_dotenv

# Ajouter le r√©pertoire parent au chemin Python
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.db_manager import engine
from database.models import Base
from sqlalchemy import text

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def recreate_postgresql_tables():
    """Recr√©e toutes les tables avec le sch√©ma corrig√©"""
    
    DATABASE_URL = os.getenv('DATABASE_URL')
    if not DATABASE_URL or not DATABASE_URL.startswith(('postgres://', 'postgresql://')):
        logger.info("üè† SQLite d√©tect√© - aucune action n√©cessaire")
        return
    
    logger.info("üö® RECREATION URGENTE DES TABLES POSTGRESQL")
    
    try:
        with engine.connect() as conn:
            # ATTENTION: Supprime toutes les donn√©es existantes
            logger.warning("‚ö†Ô∏è SUPPRESSION DE TOUTES LES DONN√âES...")
            
            # Supprimer toutes les tables dans l'ordre inverse des d√©pendances
            drop_commands = [
                "DROP TABLE IF EXISTS reviews CASCADE",
                "DROP TABLE IF EXISTS messages CASCADE", 
                "DROP TABLE IF EXISTS driver_proposals CASCADE",
                "DROP TABLE IF EXISTS bookings CASCADE",
                "DROP TABLE IF EXISTS trips CASCADE",
                "DROP TABLE IF EXISTS users CASCADE",
            ]
            
            for cmd in drop_commands:
                try:
                    conn.execute(text(cmd))
                    logger.info(f"‚úÖ Table supprim√©e: {cmd}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur suppression (ignor√©e): {e}")
            
            conn.commit()
            
            # Recr√©er avec le bon sch√©ma
            logger.info("üî® RECREATION AVEC BON SCHEMA...")
            Base.metadata.create_all(bind=engine)
            
            logger.info("üéâ Tables recr√©√©es avec succ√®s!")
            logger.warning("‚ö†Ô∏è TOUTES LES DONN√âES ONT √âT√â PERDUES")
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la recr√©ation: {e}")
        raise

if __name__ == "__main__":
    response = input("‚ö†Ô∏è ATTENTION: Ceci va SUPPRIMER TOUTES LES DONN√âES. Continuer? (oui/non): ")
    if response.lower() == 'oui':
        recreate_postgresql_tables()
    else:
        print("‚ùå Op√©ration annul√©e")
