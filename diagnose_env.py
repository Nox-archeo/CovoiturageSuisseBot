#!/usr/bin/env python3
"""
Script de diagnostic pour identifier les caract√®res non-ASCII dans les variables d'environnement
"""

import os
import re
from dotenv import load_dotenv

load_dotenv()

def analyze_env_variable(var_name):
    """Analyse une variable d'environnement pour d√©tecter les caract√®res probl√©matiques"""
    value = os.getenv(var_name)
    if not value:
        print(f"‚ùå Variable {var_name} non d√©finie")
        return
    
    print(f"\nüîç Analyse de {var_name}:")
    print(f"  Longueur: {len(value)} caract√®res")
    
    # D√©tecter les caract√®res non-ASCII
    non_ascii_chars = []
    for i, char in enumerate(value):
        if ord(char) < 32 or ord(char) > 126:
            non_ascii_chars.append((i, char, ord(char)))
    
    if non_ascii_chars:
        print(f"  ‚ùå {len(non_ascii_chars)} caract√®res non-ASCII d√©tect√©s:")
        for pos, char, code in non_ascii_chars[:10]:  # Limiter √† 10 pour √©viter le spam
            char_repr = repr(char)
            print(f"    Position {pos}: {char_repr} (code {code})")
    else:
        print(f"  ‚úÖ Tous les caract√®res sont ASCII valides")
    
    # V√©rifier les espaces en d√©but/fin
    stripped = value.strip()
    if len(stripped) != len(value):
        print(f"  ‚ö†Ô∏è Espaces d√©tect√©s: {len(value) - len(stripped)} caract√®res d'espacement")
    
    # Afficher les premiers et derniers caract√®res
    if len(value) > 0:
        first_chars = value[:10] if len(value) > 10 else value
        last_chars = value[-10:] if len(value) > 10 else value
        print(f"  D√©but: {repr(first_chars)}")
        if len(value) > 10:
            print(f"  Fin: {repr(last_chars)}")

def main():
    """Fonction principale de diagnostic"""
    print("üîç DIAGNOSTIC DES VARIABLES D'ENVIRONNEMENT")
    print("=" * 60)
    
    # Variables √† analyser
    variables = [
        'TELEGRAM_BOT_TOKEN',
        'PAYPAL_CLIENT_ID',
        'PAYPAL_CLIENT_SECRET',
        'BOT_URL',
        'WEBHOOK_URL'
    ]
    
    for var in variables:
        analyze_env_variable(var)
    
    print(f"\nüìä R√âSUM√â:")
    print("Ce script aide √† identifier les caract√®res non-ASCII qui causent l'erreur InvalidURL")
    print("Recherchez les caract√®res avec des codes < 32 ou > 126")

if __name__ == '__main__':
    main()
