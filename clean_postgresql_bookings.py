#!/usr/bin/env python3
"""
Script pour nettoyer les r√©servations dans la base PostgreSQL de production
"""

import os
import psycopg2
from urllib.parse import urlparse

# URL de la base PostgreSQL depuis les variables d'environnement
DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://covoiturage_user:LonePumpkin321@dpg-crt6bt5umphs73ah6700-a.oregon-postgres.render.com/covoiturage')

def clean_postgresql_bookings():
    try:
        # Parser l'URL de la base
        parsed = urlparse(DATABASE_URL)
        
        # Connexion √† PostgreSQL
        conn = psycopg2.connect(
            host=parsed.hostname,
            port=parsed.port,
            database=parsed.path[1:],  # Enlever le / au d√©but
            user=parsed.username,
            password=parsed.password
        )
        
        cursor = conn.cursor()
        
        print("üîç Connexion √† PostgreSQL r√©ussie")
        
        # Voir toutes les r√©servations actuelles
        cursor.execute("SELECT id, paypal_payment_id, is_paid, payment_status FROM bookings ORDER BY id")
        bookings = cursor.fetchall()
        
        print(f"üìä {len(bookings)} r√©servations trouv√©es:")
        for booking in bookings:
            print(f"  ID: {booking[0]}, PayPal: {booking[1]}, Pay√©: {booking[2]}, Status: {booking[3]}")
        
        if bookings:
            # Supprimer TOUTES les r√©servations
            cursor.execute("DELETE FROM bookings")
            deleted = cursor.rowcount
            print(f"üóëÔ∏è {deleted} r√©servations supprim√©es")
            
            # V√©rifier que c'est vide
            cursor.execute("SELECT COUNT(*) FROM bookings")
            remaining = cursor.fetchone()[0]
            print(f"‚úÖ R√©servations restantes: {remaining}")
            
            # Commit les changements
            conn.commit()
            print("üíæ Changements sauvegard√©s")
        else:
            print("‚ÑπÔ∏è Aucune r√©servation √† supprimer")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False
    
    return True

if __name__ == "__main__":
    print("üßπ Nettoyage des r√©servations PostgreSQL...")
    success = clean_postgresql_bookings()
    if success:
        print("‚úÖ Nettoyage termin√© avec succ√®s")
    else:
        print("‚ùå Erreur lors du nettoyage")
