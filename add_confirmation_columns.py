#!/usr/bin/env python3
"""
Migration pour ajouter les colonnes de confirmation de trajet
"""

import sys
import os
sys.path.append('/Users/margaux/CovoiturageSuisse')

from database.db_manager import get_db, engine
from database.models import Trip, Booking
from sqlalchemy import text
import logging

logger = logging.getLogger(__name__)

def add_confirmation_columns():
    """Ajoute les colonnes de confirmation dans les tables"""
    
    try:
        # Ajouter colonnes √† la table trips
        with engine.connect() as conn:
            try:
                # Colonne pour confirmation conducteur
                conn.execute(text("ALTER TABLE trips ADD COLUMN driver_confirmed_completion BOOLEAN DEFAULT FALSE"))
                print("‚úÖ Colonne driver_confirmed_completion ajout√©e √† trips")
            except Exception as e:
                if "already exists" in str(e) or "duplicate column" in str(e).lower():
                    print("‚ÑπÔ∏è Colonne driver_confirmed_completion existe d√©j√†")
                else:
                    raise e
            
            try:
                # Colonne pour indiquer si le paiement a √©t√© lib√©r√©
                conn.execute(text("ALTER TABLE trips ADD COLUMN payment_released BOOLEAN DEFAULT FALSE"))
                print("‚úÖ Colonne payment_released ajout√©e √† trips")
            except Exception as e:
                if "already exists" in str(e) or "duplicate column" in str(e).lower():
                    print("‚ÑπÔ∏è Colonne payment_released existe d√©j√†")
                else:
                    raise e
            
            # Ajouter colonne √† la table bookings
            try:
                # Colonne pour confirmation passager
                conn.execute(text("ALTER TABLE bookings ADD COLUMN passenger_confirmed_completion BOOLEAN DEFAULT FALSE"))
                print("‚úÖ Colonne passenger_confirmed_completion ajout√©e √† bookings")
            except Exception as e:
                if "already exists" in str(e) or "duplicate column" in str(e).lower():
                    print("‚ÑπÔ∏è Colonne passenger_confirmed_completion existe d√©j√†")
                else:
                    raise e
            
            conn.commit()
            
        print("üéâ Migration des colonnes de confirmation termin√©e !")
        
    except Exception as e:
        logger.error(f"Erreur lors de la migration: {e}")
        print(f"‚ùå Erreur migration: {e}")

if __name__ == "__main__":
    add_confirmation_columns()
